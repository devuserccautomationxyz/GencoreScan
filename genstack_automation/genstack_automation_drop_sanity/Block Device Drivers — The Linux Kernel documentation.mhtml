From: <Saved by Blink>
Snapshot-Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html
Subject: =?utf-8?Q?Block=20Device=20Drivers=20=E2=80=94=20The=20Linux=20Kernel=20d?=
 =?utf-8?Q?ocumentation?=
Date: Sun, 26 May 2024 23:03:23 -0700
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----"


------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----
Content-Type: text/html
Content-ID: <frame-2E0E8CDCD3B463AE1127083B527F0FA9@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html

<!DOCTYPE html><html class=3D"writer-html4" lang=3D"en"><head><meta http-eq=
uiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
 =20
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1.0">
  <title>Block Device Drivers =E2=80=94 The Linux Kernel  documentation</ti=
tle><link rel=3D"stylesheet" href=3D"https://linux-kernel-labs.github.io/re=
fs/heads/master/_static/css/theme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://linux-kernel-labs.github.io/re=
fs/heads/master/_static/pygments.css" type=3D"text/css">
      <link rel=3D"stylesheet" href=3D"https://linux-kernel-labs.github.io/=
refs/heads/master/_static/asciinema-player.css" type=3D"text/css">
      <link rel=3D"stylesheet" href=3D"https://linux-kernel-labs.github.io/=
refs/heads/master/_static/theme_overrides.css" type=3D"text/css">
  <!--[if lt IE 9]>
    <script src=3D"../_static/js/html5shiv.min.js"></script>
  <![endif]-->
 =20
     =20
       =20
       =20
       =20
       =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"https://linux-kernel-labs.g=
ithub.io/refs/heads/master/genindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://linux-kernel-labs=
.github.io/refs/heads/master/search.html">
    <link rel=3D"next" title=3D"File system drivers (Part 1)" href=3D"https=
://linux-kernel-labs.github.io/refs/heads/master/labs/filesystems_part1.htm=
l">
    <link rel=3D"prev" title=3D"Deferred work" href=3D"https://linux-kernel=
-labs.github.io/refs/heads/master/labs/deferred_work.html">=20
</head>

<body class=3D"wy-body-for-nav" data-new-gr-c-s-check-loaded=3D"14.1174.0" =
data-gr-ext-installed=3D"">=20
  <div class=3D"wy-grid-for-nav">
    <nav data-toggle=3D"wy-nav-shift" class=3D"wy-nav-side">
      <div class=3D"wy-side-scroll">
        <div class=3D"wy-side-nav-search">

         =20
         =20
          <a href=3D"https://linux-kernel-labs.github.io/refs/heads/master/=
index.html" class=3D"icon icon-home">
            The Linux Kernel
          </a>
              <div class=3D"version">
                5.10.14
              </div>
<div role=3D"search">
  <form id=3D"rtd-search-form" class=3D"wy-form" action=3D"https://linux-ke=
rnel-labs.github.io/refs/heads/master/search.html" method=3D"get">
    <input type=3D"text" name=3D"q" placeholder=3D"Search docs" aria-label=
=3D"Search docs">
   =20
   =20
  </form>
</div>
        </div><div class=3D"wy-menu wy-menu-vertical" data-spy=3D"affix" ro=
le=3D"navigation" aria-label=3D"Navigation menu">
              <ul>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/so2/index.html">Operating Syste=
ms 2</a></li>
</ul>
<p class=3D"caption"><span class=3D"caption-text">Lectures</span></p>
<ul>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/intro.html">Introducti=
on</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/syscalls.html">System =
Calls</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/processes.html">Proces=
ses</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/interrupts.html">Inter=
rupts</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/smp.html">Symmetric Mu=
lti-Processing</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/address-space.html">Ad=
dress Space</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/memory-management.html=
">Memory Management</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/fs.html">Filesystem Ma=
nagement</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/debugging.html">Debugg=
ing</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/networking.html">Netwo=
rk Management</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/arch.html">Architectur=
e Layer</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/lectures/virt.html">Virtualizat=
ion</a></li>
</ul>
<p class=3D"caption"><span class=3D"caption-text">Labs</span></p>
<ul class=3D"current" aria-expanded=3D"true">
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/infrastructure.html">Infra=
structure</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/introduction.html">Introdu=
ction</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/kernel_modules.html">Kerne=
l modules</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/kernel_api.html">Kernel AP=
I</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/device_drivers.html">Chara=
cter device drivers</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/interrupts.html">I/O acces=
s and Interrupts</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/deferred_work.html">Deferr=
ed work</a></li>
<li class=3D"toctree-l1 current" aria-expanded=3D"true"><a class=3D"referen=
ce internal current" href=3D"https://linux-kernel-labs.github.io/refs/heads=
/master/labs/block_device_drivers.html#" aria-expanded=3D"true"><button cla=
ss=3D"toctree-expand" title=3D"Open/close menu"></button>Block Device Drive=
rs</a><ul>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
lab-objectives">Lab objectives</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
overview">Overview</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
register-a-block-i-o-device">Register a block I/O device</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
register-a-disk">Register a disk</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
struct-gendisk-structure"><code class=3D"docutils literal"><span class=3D"p=
re">struct</span> <span class=3D"pre">gendisk</span></code> structure</a></=
li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
struct-block-device-operations-structure"><code class=3D"docutils literal">=
<span class=3D"pre">struct</span> <span class=3D"pre">block_device_operatio=
ns</span></code> structure</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
request-queues-multi-queue-block-layer"><button class=3D"toctree-expand" ti=
tle=3D"Open/close menu"></button>Request Queues - Multi-Queue Block Layer</=
a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
software-staging-queues">Software staging queues</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
hardware-dispatch-queues">Hardware dispatch queues</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
tag-sets">Tag sets</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
create-and-delete-a-request-queue">Create and delete a request queue</a></l=
i>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
useful-functions-for-processing-request-queues">Useful functions for proces=
sing request queues</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
requests-for-block-devices"><button class=3D"toctree-expand" title=3D"Open/=
close menu"></button>Requests for block devices</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
create-a-request">Create a request</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
process-a-request">Process a request</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
struct-bio-structure"><button class=3D"toctree-expand" title=3D"Open/close =
menu"></button><code class=3D"docutils literal"><span class=3D"pre">struct<=
/span> <span class=3D"pre">bio</span></code> structure</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
create-a-struct-bio-structure">Create a <code class=3D"docutils literal"><s=
pan class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> struc=
ture</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
submit-a-struct-bio-structure">Submit a <code class=3D"docutils literal"><s=
pan class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> struc=
ture</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
wait-for-the-completion-of-a-struct-bio-structure">Wait for the completion =
of a <code class=3D"docutils literal"><span class=3D"pre">struct</span> <sp=
an class=3D"pre">bio</span></code> structure</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
initialize-a-struct-bio-structure">Initialize a <code class=3D"docutils lit=
eral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></cod=
e> structure</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
how-to-use-the-content-of-a-struct-bio-structure">How to use the content of=
 a <code class=3D"docutils literal"><span class=3D"pre">struct</span> <span=
 class=3D"pre">bio</span></code> structure</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
free-a-struct-bio-structure">Free a <code class=3D"docutils literal"><span =
class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure=
</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
set-up-a-request-queue-at-struct-bio-level">Set up a request queue at <code=
 class=3D"docutils literal"><span class=3D"pre">struct</span> <span class=
=3D"pre">bio</span></code> level</a></li>
</ul>
</li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
further-reading">Further reading</a></li>
<li class=3D"toctree-l2"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
exercises"><button class=3D"toctree-expand" title=3D"Open/close menu"></but=
ton>Exercises</a><ul>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
intro">0. Intro</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
block-device">1. Block device</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
disk-registration">2. Disk registration</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
ram-disk">3. RAM disk</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
read-data-from-the-disk">4. Read data from the disk</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
write-data-to-the-disk">5. Write data to the disk</a></li>
<li class=3D"toctree-l3"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#=
processing-requests-from-the-request-queue-at-struct-bio-level">6. Processi=
ng requests from the request queue at <code class=3D"docutils literal"><spa=
n class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> level</=
a></li>
</ul>
</li>
</ul>
</li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/filesystems_part1.html">Fi=
le system drivers (Part 1)</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/filesystems_part2.html">Fi=
le system drivers (Part 2)</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/networking.html">Networkin=
g</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/arm_kernel_development.htm=
l">Kernel Development on ARM</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/memory_mapping.html">Memor=
y mapping</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/device_model.html">Linux D=
evice Model</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/labs/kernel_profiling.html">Ker=
nel Profiling</a></li>
</ul>
<p class=3D"caption"><span class=3D"caption-text">Useful info</span></p>
<ul>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/info/vm.html">Recommended Setup=
</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/info/vm.html#virtual-machine-se=
tup">Virtual Machine Setup</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/info/extra-vm.html">Customizing=
 the Virtual Machine Setup</a></li>
<li class=3D"toctree-l1"><a class=3D"reference internal" href=3D"https://li=
nux-kernel-labs.github.io/refs/heads/master/info/contributing.html">Contrib=
uting to linux-kernel-labs</a></li>
</ul>

        </div>
      </div>
    </nav>

    <section data-toggle=3D"wy-nav-shift" class=3D"wy-nav-content-wrap"><na=
v class=3D"wy-nav-top" aria-label=3D"Mobile navigation menu">
          <i data-toggle=3D"wy-nav-top" class=3D"fa fa-bars"></i>
          <a href=3D"https://linux-kernel-labs.github.io/refs/heads/master/=
index.html">The Linux Kernel</a>
      </nav>

      <div class=3D"wy-nav-content">
        <div class=3D"rst-content">
          <div role=3D"navigation" aria-label=3D"Page navigation">
  <ul class=3D"wy-breadcrumbs">
      <li><a href=3D"https://linux-kernel-labs.github.io/refs/heads/master/=
index.html" class=3D"icon icon-home" aria-label=3D"Home"></a></li>
      <li class=3D"breadcrumb-item active">Block Device Drivers</li>
      <li class=3D"wy-breadcrumbs-aside">
            <a href=3D"https://linux-kernel-labs.github.io/refs/heads/maste=
r/_sources/labs/block_device_drivers.rst.txt" rel=3D"nofollow"> View page s=
ource</a>
      </li>
  </ul>
  <hr>
</div>
          <div role=3D"main" class=3D"document" itemscope=3D"itemscope" ite=
mtype=3D"http://schema.org/Article">
           <div itemprop=3D"articleBody">
            =20
  <div class=3D"section" id=3D"block-device-drivers">
<h1>Block Device Drivers<a class=3D"headerlink" href=3D"https://linux-kerne=
l-labs.github.io/refs/heads/master/labs/block_device_drivers.html#block-dev=
ice-drivers" title=3D"Permalink to this headline">=C2=B6</a></h1>
<div class=3D"section" id=3D"lab-objectives">
<h2>Lab objectives<a class=3D"headerlink" href=3D"https://linux-kernel-labs=
.github.io/refs/heads/master/labs/block_device_drivers.html#lab-objectives"=
 title=3D"Permalink to this headline">=C2=B6</a></h2>
<blockquote>
<div><ul class=3D"simple">
<li>acquiring knowledge about the behavior of the I/O subsystem on Linux</l=
i>
<li>hands-on activities in structures and functions of block devices</li>
<li>acquiring basic skills for utilizing the API for block devices, by solv=
ing
exercises</li>
</ul>
</div></blockquote>
</div>
<div class=3D"section" id=3D"overview">
<h2>Overview<a class=3D"headerlink" href=3D"https://linux-kernel-labs.githu=
b.io/refs/heads/master/labs/block_device_drivers.html#overview" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h2>
<p>Block devices are characterized by random access to data organized in fi=
xed-size
blocks. Examples of such devices are hard drives, CD-ROM drives, RAM disks,=
 etc.
The speed of block devices is generally much higher than the speed of chara=
cter
devices, and their performance is also important. This is why the Linux ker=
nel
handles differently these 2 types of devices (it uses a specialized API).</=
p>
<p>Working with block devices is therefore more complicated than working wi=
th
character devices. Character devices have a single current position, while =
block
devices must be able to move to any position in the device to provide rando=
m
access to data. To simplify work with block devices, the Linux kernel provi=
des
an entire subsystem called the block I/O (or block layer) subsystem.</p>
<p>From the kernel perspective, the smallest logical unit of addressing is =
the
block. Although the physical device can be addressed at sector level, the k=
ernel
performs all disk operations using blocks. Since the smallest unit of physi=
cal
addressing is the sector, the size of the block must be a multiple of the s=
ize
of the sector. Additionally, the block size must be a power of 2 and can no=
t
exceed the size of a page. The size of the block may vary depending on the =
file
system used, the most common values being 512 bytes, 1 kilobytes and 4
kilobytes.</p>
</div>
<div class=3D"section" id=3D"register-a-block-i-o-device">
<h2>Register a block I/O device<a class=3D"headerlink" href=3D"https://linu=
x-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#re=
gister-a-block-i-o-device" title=3D"Permalink to this headline">=C2=B6</a><=
/h2>
<p>To register a block I/O device, function <code class=3D"xref c c-func do=
cutils literal"><span class=3D"pre">register_blkdev()</span></code> is used=
.
To deregister a block I/O device, function <code class=3D"xref c c-func doc=
utils literal"><span class=3D"pre">unregister_blkdev()</span></code> is
used.</p>
<p>Starting with version 4.9 of the Linux kernel, the call to
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">register=
_blkdev()</span></code> is optional. The only operations performed by this
function are the dynamic allocation of a major (if the major argument is 0 =
when
calling the function) and creating an entry in <code class=3D"file docutils=
 literal"><span class=3D"pre">/proc/devices</span></code>. In
future kernel versions it may be removed; however, most drivers still call =
it.</p>
<p>Usually, the call to the register function is performed in the module
initialization function, and the call to the deregister function is perform=
ed in
the module exit function. A typical scenario is presented below:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/fs.h&gt;</span>=
<span class=3D"cp"></span>

<span class=3D"cp">#define MY_BLOCK_MAJOR           240</span>
<span class=3D"cp">#define MY_BLKDEV_NAME          "mybdev"</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_init</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"kt">int</span> <span class=3D"n">status</span><span clas=
s=3D"p">;</span>

    <span class=3D"n">status</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">register_blkdev</span><span class=3D"p">(</span><span class=3D"n">M=
Y_BLOCK_MAJOR</span><span class=3D"p">,</span> <span class=3D"n">MY_BLKDEV_=
NAME</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>status</span> <span class=3D"o">&lt;</span> <span class=3D"mi">0</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span>
             <span class=3D"n">printk</span><span class=3D"p">(</span><span=
 class=3D"n">KERN_ERR</span> <span class=3D"s">"unable to register mybdev b=
lock device</span><span class=3D"se">\n</span><span class=3D"s">"</span><sp=
an class=3D"p">);</span>
             <span class=3D"k">return</span> <span class=3D"o">-</span><spa=
n class=3D"n">EBUSY</span><span class=3D"p">;</span>
     <span class=3D"p">}</span>
     <span class=3D"c1">//...</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">my_block_exit</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
     <span class=3D"c1">//...</span>
     <span class=3D"n">unregister_blkdev</span><span class=3D"p">(</span><s=
pan class=3D"n">MY_BLOCK_MAJOR</span><span class=3D"p">,</span> <span class=
=3D"n">MY_BLKDEV_NAME</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"register-a-disk">
<h2>Register a disk<a class=3D"headerlink" href=3D"https://linux-kernel-lab=
s.github.io/refs/heads/master/labs/block_device_drivers.html#register-a-dis=
k" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Although the <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">register_blkdev()</span></code> function obtains a major, it does =
not
provide a device (disk) to the system. For creating and using block devices
(disks), a specialized interface defined in <code class=3D"file docutils li=
teral"><span class=3D"pre">linux/genhd.h</span></code> is used.</p>
<p>The useful functions defined in <code class=3D"file docutils literal"><s=
pan class=3D"pre">linux/genhd.h</span></code> are to register /allocate
a disk, add it to the system, and de-register /unmount the disk.</p>
<p>The <code class=3D"xref c c-func docutils literal"><span class=3D"pre">a=
lloc_disk()</span></code> function is used to allocate a disk, and the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">del_gend=
isk()</span></code> function is used to deallocate it. Adding the disk to t=
he
system is done using the <code class=3D"xref c c-func docutils literal"><sp=
an class=3D"pre">add_disk()</span></code> function.</p>
<p>The <code class=3D"xref c c-func docutils literal"><span class=3D"pre">a=
lloc_disk()</span></code> and <code class=3D"xref c c-func docutils literal=
"><span class=3D"pre">add_disk()</span></code> functions are typically used=
 in
the module initialization function, and the <code class=3D"xref c c-func do=
cutils literal"><span class=3D"pre">del_gendisk()</span></code> function in
the module exit function.</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/fs.h&gt;</span>=
<span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/genhd.h&gt=
;</span><span class=3D"cp"></span>

<span class=3D"cp">#define MY_BLOCK_MINORS       1</span>

<span class=3D"k">static</span> <span class=3D"k">struct</span> <span class=
=3D"n">my_block_dev</span> <span class=3D"p">{</span>
    <span class=3D"k">struct</span> <span class=3D"n">gendisk</span> <span =
class=3D"o">*</span><span class=3D"n">gd</span><span class=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span> <span class=3D"n">dev</span><span class=3D"p">;<=
/span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">create_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span> <span class=3D"o">=3D</span> <span class=3D"n">alloc_disk<=
/span><span class=3D"p">(</span><span class=3D"n">MY_BLOCK_MINORS</span><sp=
an class=3D"p">);</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">add_disk</span><span class=3D"p">(</span><span class=
=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</span><=
span class=3D"p">);</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_init</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">create_block_device</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">=
);</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">delete_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</span><span c=
lass=3D"p">)</span>
        <span class=3D"n">del_gendisk</span><span class=3D"p">(</span><span=
 class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</=
span><span class=3D"p">);</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">my_block_exit</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"n">delete_block_device</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">=
);</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>As with character devices, it is recommended to use <code class=3D"xref =
c c-type docutils literal"><span class=3D"pre">my_block_dev</span></code>
structure to store important elements describing the block device.</p>
<p>Note that immediately after calling the <code class=3D"xref c c-func doc=
utils literal"><span class=3D"pre">add_disk()</span></code> function (actua=
lly
even during the call), the disk is active and its methods can be called at =
any
time. As a result, this function should not be called before the driver is =
fully
initialized and ready to respond to requests for the registered disk.</p>
<p>It can be noticed that the basic structure in working with block devices=
 (disks)
is the <code class=3D"xref c c-type docutils literal"><span class=3D"pre">s=
truct</span> <span class=3D"pre">gendisk</span></code> structure.</p>
<p>After a call to <code class=3D"xref c c-func docutils literal"><span cla=
ss=3D"pre">del_gendisk()</span></code>, the <code class=3D"xref c c-type do=
cutils literal"><span class=3D"pre">struct</span> <span class=3D"pre">gendi=
sk</span></code> structure
may continue to exist (and the device operations may still be called) if th=
ere
are still users (an open operation was called on the device but the associa=
ted
release operation has not been called). One solution is to keep the number =
of
users of the device and call the <code class=3D"xref c c-func docutils lite=
ral"><span class=3D"pre">del_gendisk()</span></code> function only when the=
re
are no users left of the device.</p>
</div>
<div class=3D"section" id=3D"struct-gendisk-structure">
<h2><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">gendisk</span></code> structure<a class=3D"he=
aderlink" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/lab=
s/block_device_drivers.html#struct-gendisk-structure" title=3D"Permalink to=
 this headline">=C2=B6</a></h2>
<p>The <code class=3D"xref c c-type docutils literal"><span class=3D"pre">s=
truct</span> <span class=3D"pre">gendisk</span></code> structure stores inf=
ormation about a disk. As
stated above, such a structure is obtained from the <code class=3D"xref c c=
-func docutils literal"><span class=3D"pre">alloc_disk()</span></code> call
and its fields must be filled before it is sent to the <code class=3D"xref =
c c-func docutils literal"><span class=3D"pre">add_disk()</span></code>
function.</p>
<p>The <code class=3D"xref c c-type docutils literal"><span class=3D"pre">s=
truct</span> <span class=3D"pre">gendisk</span></code> structure has the fo=
llowing important fields:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">ma=
jor</span></code>, <code class=3D"xref c c-member docutils literal"><span c=
lass=3D"pre">first_minor</span></code>, <code class=3D"xref c c-member docu=
tils literal"><span class=3D"pre">minor</span></code>, describing
the identifiers used by the disk; a disk must have at least one minor; if
the disk allows the partitioning operation, a minor must be allocated for
each possible partition</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">di=
sk_name</span></code>, which represents the disk name as it appears in
<code class=3D"file docutils literal"><span class=3D"pre">/proc/partitions<=
/span></code> and in sysfs (<code class=3D"file docutils literal"><span cla=
ss=3D"pre">/sys/block</span></code>)</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">fo=
ps</span></code>, representing operations associated with the disk</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">qu=
eue</span></code>, which represents the queue of requests</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">ca=
pacity</span></code>, which is disk capacity in 512 byte sectors;
it is initialized using the <code class=3D"xref c c-func docutils literal">=
<span class=3D"pre">set_capacity()</span></code> function</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">pr=
ivate_data</span></code>, which is a pointer to private data</li>
</ul>
</div></blockquote>
<p>An example of filling a <code class=3D"xref c c-type docutils literal"><=
span class=3D"pre">struct</span> <span class=3D"pre">gendisk</span></code> =
structure is presented below:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/genhd.h&gt;</sp=
an><span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/fs.h&gt;</=
span><span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/blkdev.h&g=
t;</span><span class=3D"cp"></span>

<span class=3D"cp">#define NR_SECTORS                   1024</span>

<span class=3D"cp">#define KERNEL_SECTOR_SIZE           512</span>

<span class=3D"k">static</span> <span class=3D"k">struct</span> <span class=
=3D"n">my_block_dev</span> <span class=3D"p">{</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">spinlock_t</span> <span class=3D"n">lock</span><span =
class=3D"p">;</span>                <span class=3D"cm">/* For mutual exclus=
ion */</span>
    <span class=3D"k">struct</span> <span class=3D"n">request_queue</span> =
<span class=3D"o">*</span><span class=3D"n">queue</span><span class=3D"p">;=
</span>    <span class=3D"cm">/* The device request queue */</span>
    <span class=3D"k">struct</span> <span class=3D"n">gendisk</span> <span =
class=3D"o">*</span><span class=3D"n">gd</span><span class=3D"p">;</span>  =
           <span class=3D"cm">/* The gendisk structure */</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span> <span class=3D"n">dev</span><span class=3D"p">;<=
/span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">create_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"p">...</span>
    <span class=3D"cm">/* Initialize the gendisk structure */</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span> <span class=3D"o">=3D</span> <span class=3D"n">alloc_disk<=
/span><span class=3D"p">(</span><span class=3D"n">MY_BLOCK_MINORS</span><sp=
an class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o"=
>!</span><span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span cl=
ass=3D"n">gd</span><span class=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"n">printk</span> <span class=3D"p">(</span><span cla=
ss=3D"n">KERN_NOTICE</span> <span class=3D"s">"alloc_disk failure</span><sp=
an class=3D"se">\n</span><span class=3D"s">"</span><span class=3D"p">);</sp=
an>
        <span class=3D"k">return</span> <span class=3D"o">-</span><span cla=
ss=3D"n">ENOMEM</span><span class=3D"p">;</span>
    <span class=3D"p">}</span>

    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">major</span=
> <span class=3D"o">=3D</span> <span class=3D"n">MY_BLOCK_MAJOR</span><span=
 class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">first_minor=
</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">fops</span>=
 <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span><span class=3D"=
n">my_block_ops</span><span class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">queue</span=
> <span class=3D"o">=3D</span> <span class=3D"n">dev</span><span class=3D"o=
">-&gt;</span><span class=3D"n">queue</span><span class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">private_dat=
a</span> <span class=3D"o">=3D</span> <span class=3D"n">dev</span><span cla=
ss=3D"p">;</span>
    <span class=3D"n">snprintf</span> <span class=3D"p">(</span><span class=
=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</span><=
span class=3D"o">-&gt;</span><span class=3D"n">disk_name</span><span class=
=3D"p">,</span> <span class=3D"mi">32</span><span class=3D"p">,</span> <spa=
n class=3D"s">"myblock"</span><span class=3D"p">);</span>
    <span class=3D"n">set_capacity</span><span class=3D"p">(</span><span cl=
ass=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</spa=
n><span class=3D"p">,</span> <span class=3D"n">NR_SECTORS</span><span class=
=3D"p">);</span>

    <span class=3D"n">add_disk</span><span class=3D"p">(</span><span class=
=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</span><=
span class=3D"p">);</span>

    <span class=3D"k">return</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_init</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"kt">int</span> <span class=3D"n">status</span><span clas=
s=3D"p">;</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">status</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">create_block_device</span><span class=3D"p">(</span><span class=3D"=
o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>status</span> <span class=3D"o">&lt;</span> <span class=3D"mi">0</span><sp=
an class=3D"p">)</span>
        <span class=3D"k">return</span> <span class=3D"n">status</span><spa=
n class=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">delete_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</span><span c=
lass=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"n">del_gendisk</span><span class=3D"p">(</span><span=
 class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">gd</=
span><span class=3D"p">);</span>
    <span class=3D"p">}</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">my_block_exit</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"n">delete_block_device</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">=
);</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>As stated before, the kernel considers a disk as a vector of 512 byte se=
ctors.
In reality, the devices may have a different size of the sector. To work wi=
th
these devices, the kernel needs to be informed about the real size of a sec=
tor,
and for all operations the necessary conversions must be made.</p>
<p>To inform the kernel about the device sector size, a parameter of the re=
quest
queue must be set just after the request queue is allocated, using the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">blk_queu=
e_logical_block_size()</span></code> function. All requests generated by th=
e
kernel will be multiple of this sector size and will be aligned accordingly=
.
However, communication between the device and the driver will still be perf=
ormed
in sectors of 512 bytes in size, so conversion should be done each time (an
example of such conversion is when calling the <code class=3D"xref c c-func=
 docutils literal"><span class=3D"pre">set_capacity()</span></code> functio=
n
in the code above).</p>
</div>
<div class=3D"section" id=3D"struct-block-device-operations-structure">
<h2><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">block_device_operations</span></code> structu=
re<a class=3D"headerlink" href=3D"https://linux-kernel-labs.github.io/refs/=
heads/master/labs/block_device_drivers.html#struct-block-device-operations-=
structure" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Just as for a character device, operations in <code class=3D"xref c c-ty=
pe docutils literal"><span class=3D"pre">struct</span> <span class=3D"pre">=
file_operations</span></code>
should be completed, so for a block device, the operations in
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">block_device_operations</span></code> should be c=
ompleted. The association
of operations is done through the <code class=3D"xref c c-member docutils l=
iteral"><span class=3D"pre">fops</span></code> field in the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">gendisk</span></code>
structure.</p>
<p>Some of the fields of the <code class=3D"xref c c-type docutils literal"=
><span class=3D"pre">struct</span> <span class=3D"pre">block_device_operati=
ons</span></code> structure
are presented below:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">struct</span> <span class=3D"n">block_device_operations</span>=
 <span class=3D"p">{</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">open</span><span class=3D"p">)</span> <span cl=
ass=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n">block_d=
evice</span> <span class=3D"o">*</span><span class=3D"p">,</span> <span cla=
ss=3D"n">fmode_t</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">release</span><span class=3D"p">)</span> <span=
 class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n">gend=
isk</span> <span class=3D"o">*</span><span class=3D"p">,</span> <span class=
=3D"n">fmode_t</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">locked_ioctl</span><span class=3D"p">)</span> =
<span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n"=
>block_device</span> <span class=3D"o">*</span><span class=3D"p">,</span> <=
span class=3D"n">fmode_t</span><span class=3D"p">,</span> <span class=3D"kt=
">unsigned</span><span class=3D"p">,</span>
                         <span class=3D"kt">unsigned</span> <span class=3D"=
kt">long</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">ioctl</span><span class=3D"p">)</span> <span c=
lass=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n">block_=
device</span> <span class=3D"o">*</span><span class=3D"p">,</span> <span cl=
ass=3D"n">fmode_t</span><span class=3D"p">,</span> <span class=3D"kt">unsig=
ned</span><span class=3D"p">,</span> <span class=3D"kt">unsigned</span> <sp=
an class=3D"kt">long</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">compat_ioctl</span><span class=3D"p">)</span> =
<span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n"=
>block_device</span> <span class=3D"o">*</span><span class=3D"p">,</span> <=
span class=3D"n">fmode_t</span><span class=3D"p">,</span> <span class=3D"kt=
">unsigned</span><span class=3D"p">,</span>
                         <span class=3D"kt">unsigned</span> <span class=3D"=
kt">long</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">direct_access</span><span class=3D"p">)</span>=
 <span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n=
">block_device</span> <span class=3D"o">*</span><span class=3D"p">,</span> =
<span class=3D"n">sector_t</span><span class=3D"p">,</span>
                          <span class=3D"kt">void</span> <span class=3D"o">=
**</span><span class=3D"p">,</span> <span class=3D"kt">unsigned</span> <spa=
n class=3D"kt">long</span> <span class=3D"o">*</span><span class=3D"p">);</=
span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">media_changed</span><span class=3D"p">)</span>=
 <span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n=
">gendisk</span> <span class=3D"o">*</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">revalidate_disk</span><span class=3D"p">)</spa=
n> <span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D=
"n">gendisk</span> <span class=3D"o">*</span><span class=3D"p">);</span>
    <span class=3D"kt">int</span> <span class=3D"p">(</span><span class=3D"=
o">*</span><span class=3D"n">getgeo</span><span class=3D"p">)(</span><span =
class=3D"k">struct</span> <span class=3D"n">block_device</span> <span class=
=3D"o">*</span><span class=3D"p">,</span> <span class=3D"k">struct</span> <=
span class=3D"n">hd_geometry</span> <span class=3D"o">*</span><span class=
=3D"p">);</span>
    <span class=3D"n">blk_qc_t</span> <span class=3D"p">(</span><span class=
=3D"o">*</span><span class=3D"n">submit_bio</span><span class=3D"p">)</span=
> <span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"=
n">bio</span> <span class=3D"o">*</span><span class=3D"n">bio</span><span c=
lass=3D"p">);</span>
    <span class=3D"k">struct</span> <span class=3D"n">module</span> <span c=
lass=3D"o">*</span><span class=3D"n">owner</span><span class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p><code class=3D"xref c c-func docutils literal"><span class=3D"pre">open(=
)</span></code> and <code class=3D"xref c c-func docutils literal"><span cl=
ass=3D"pre">release()</span></code> operations are called directly from use=
r
space by utilities that may perform the following tasks: partitioning, file
system creation, file system verification. In a <code class=3D"xref c c-fun=
c docutils literal"><span class=3D"pre">mount()</span></code> operation, th=
e
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">open()</=
span></code> function is called directly from the kernel space, the file
descriptor being stored by the kernel. A driver for a block device can not
differentiate between <code class=3D"xref c c-func docutils literal"><span =
class=3D"pre">open()</span></code> calls performed from user space and kern=
el
space.</p>
<p>An example of how to use these two functions is given below:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/fs.h&gt;</span>=
<span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/genhd.h&gt=
;</span><span class=3D"cp"></span>

<span class=3D"k">static</span> <span class=3D"k">struct</span> <span class=
=3D"n">my_block_dev</span> <span class=3D"p">{</span>
    <span class=3D"c1">//...</span>
    <span class=3D"k">struct</span> <span class=3D"n">gendisk</span> <span =
class=3D"o">*</span> <span class=3D"n">gd</span><span class=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span> <span class=3D"n">dev</span><span class=3D"p">;<=
/span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_open</span><span class=3D"p">(</span><span class=3D"k">str=
uct</span> <span class=3D"n">block_device</span> <span class=3D"o">*</span>=
<span class=3D"n">bdev</span><span class=3D"p">,</span> <span class=3D"n">f=
mode_t</span> <span class=3D"n">mode</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"c1">//...</span>

    <span class=3D"k">return</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_release</span><span class=3D"p">(</span><span class=3D"k">=
struct</span> <span class=3D"n">gendisk</span> <span class=3D"o">*</span><s=
pan class=3D"n">gd</span><span class=3D"p">,</span> <span class=3D"n">fmode=
_t</span> <span class=3D"n">mode</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"c1">//...</span>

    <span class=3D"k">return</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"k">struct</span> <span class=3D"n">block_device_operations</=
span> <span class=3D"n">my_block_ops</span> <span class=3D"o">=3D</span> <s=
pan class=3D"p">{</span>
    <span class=3D"p">.</span><span class=3D"n">owner</span> <span class=3D=
"o">=3D</span> <span class=3D"n">THIS_MODULE</span><span class=3D"p">,</spa=
n>
    <span class=3D"p">.</span><span class=3D"n">open</span> <span class=3D"=
o">=3D</span> <span class=3D"n">my_block_open</span><span class=3D"p">,</sp=
an>
    <span class=3D"p">.</span><span class=3D"n">release</span> <span class=
=3D"o">=3D</span> <span class=3D"n">my_block_release</span>
<span class=3D"p">};</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">create_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"c1">//....</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">fops</span>=
 <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span><span class=3D"=
n">my_block_ops</span><span class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">gd</span><span class=3D"o">-&gt;</span><span class=3D"n">private_dat=
a</span> <span class=3D"o">=3D</span> <span class=3D"n">dev</span><span cla=
ss=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>Please notice that there are no read or write operations. These operatio=
ns are
performed by the <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">request()</span></code> function associated with the request queue
of the disk.</p>
</div>
<div class=3D"section" id=3D"request-queues-multi-queue-block-layer">
<h2>Request Queues - Multi-Queue Block Layer<a class=3D"headerlink" href=3D=
"https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_dr=
ivers.html#request-queues-multi-queue-block-layer" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p>Drivers for block devices use queues to store the block I/O requests tha=
t will
be processed. A request queue is represented by the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">request_queue</span></code> structure. The reques=
t queue is made up of a
double-linked list of requests and their associated control information. Th=
e
requests are added to the queue by higher-level kernel code (for example, f=
ile
systems).</p>
<p>The block device driver associates each queue with a handling function, =
which
will be called for each request in the queue
(the <code class=3D"xref c c-type docutils literal"><span class=3D"pre">str=
uct</span> <span class=3D"pre">request</span></code> structure).</p>
<p>In earlier version of the Linux kernel, each device driver had associate=
d one or
more request queues (<code class=3D"xref c c-type docutils literal"><span c=
lass=3D"pre">struct</span> <span class=3D"pre">request_queue</span></code>)=
, where any client could add
requests, while also being able to reorder them.
The problem with this approach is that it requires a per-queue lock, making=
 it
inefficient in distributed systems.</p>
<p>The <a class=3D"reference external" href=3D"https://www.kernel.org/doc/h=
tml/latest/block/blk-mq.html">Multi-Queue Block Queing Mechanism</a>
solves this issue by splitting the device driver queue in two parts:</p>
<blockquote>
<div><ol class=3D"arabic simple">
<li>Software staging queues</li>
<li>Hardware dispatch queues</li>
</ol>
</div></blockquote>
<div class=3D"section" id=3D"software-staging-queues">
<h3>Software staging queues<a class=3D"headerlink" href=3D"https://linux-ke=
rnel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#softwa=
re-staging-queues" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The staging queues hold requests from the clients before sending them to=
 the
block device driver. To prevent the waiting for a per-queue lock, a staging
queue is allocated for each CPU or node. A software queue is associated to
only one hardware queue.</p>
<p>While in this queue, the requests can be merged or reordered, according =
to an
I/O Scheduler, in order to maximize performance. This means that only the
requests coming from the same CPU or node can be optimized.</p>
<p>Staging queues are usually not used by the block device drivers, but onl=
y
internally by the I/O subsystem to optimize requests before sending them to=
 the
device drivers.</p>
</div>
<div class=3D"section" id=3D"hardware-dispatch-queues">
<h3>Hardware dispatch queues<a class=3D"headerlink" href=3D"https://linux-k=
ernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#hardw=
are-dispatch-queues" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The hardware queues (<code class=3D"xref c c-type docutils literal"><spa=
n class=3D"pre">struct</span> <span class=3D"pre">blk_mq_hw_ctx</span></cod=
e>) are used to send the
requests from the staging queues to the block device driver.
Once in this queue, the requests can't be merged or reordered.</p>
<p>Depending on the underlying hardware, a block device driver can create m=
ultiple
hardware queues in order to improve parallelism and maximize performance.</=
p>
</div>
<div class=3D"section" id=3D"tag-sets">
<h3>Tag sets<a class=3D"headerlink" href=3D"https://linux-kernel-labs.githu=
b.io/refs/heads/master/labs/block_device_drivers.html#tag-sets" title=3D"Pe=
rmalink to this headline">=C2=B6</a></h3>
<p>A block device driver can accept a request before the previous one is co=
mpleted.
As a consequence, the upper layers need a way to know when a request is
completed. For this, a "tag" is added to each request upon submission and s=
ent
back using a completion notification after the request is completed.</p>
<p>The tags are part of a tag set (<code class=3D"xref c c-type docutils li=
teral"><span class=3D"pre">struct</span> <span class=3D"pre">blk_mq_tag_set=
</span></code>), which is
unique to a device.
The tag set structure is allocated and initialized before the request queue=
s
and also stores some of the queues properties.</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">struct</span> <span class=3D"n">blk_mq_tag_set</span> <span cl=
ass=3D"p">{</span>
  <span class=3D"p">...</span>
  <span class=3D"k">const</span> <span class=3D"k">struct</span> <span clas=
s=3D"n">blk_mq_ops</span>   <span class=3D"o">*</span><span class=3D"n">ops=
</span><span class=3D"p">;</span>
  <span class=3D"kt">unsigned</span> <span class=3D"kt">int</span>         =
      <span class=3D"n">nr_hw_queues</span><span class=3D"p">;</span>
  <span class=3D"kt">unsigned</span> <span class=3D"kt">int</span>         =
      <span class=3D"n">queue_depth</span><span class=3D"p">;</span>
  <span class=3D"kt">unsigned</span> <span class=3D"kt">int</span>         =
      <span class=3D"n">cmd_size</span><span class=3D"p">;</span>
  <span class=3D"kt">int</span>                        <span class=3D"n">nu=
ma_node</span><span class=3D"p">;</span>
  <span class=3D"kt">void</span>                      <span class=3D"o">*</=
span><span class=3D"n">driver_data</span><span class=3D"p">;</span>
  <span class=3D"k">struct</span> <span class=3D"n">blk_mq_tags</span>     =
  <span class=3D"o">**</span><span class=3D"n">tags</span><span class=3D"p"=
>;</span>
  <span class=3D"k">struct</span> <span class=3D"n">list_head</span>       =
    <span class=3D"n">tag_list</span><span class=3D"p">;</span>
  <span class=3D"p">...</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>Some of the fields in <code class=3D"xref c c-type docutils literal"><sp=
an class=3D"pre">struct</span> <span class=3D"pre">blk_mq_tag_set</span></c=
ode> are:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"docutils literal"><span class=3D"pre">ops</span></code> =
- Queue operations, most notably the request handling function.</li>
<li><code class=3D"docutils literal"><span class=3D"pre">nr_hw_queues</span=
></code> - The number of hardware queues allocated for the device</li>
<li><code class=3D"docutils literal"><span class=3D"pre">queue_depth</span>=
</code> - Hardware queues size</li>
<li><code class=3D"docutils literal"><span class=3D"pre">cmd_size</span></c=
ode> - Number of extra bytes allocated at the end of the device, to
be used by the block device driver, if needed.</li>
<li><code class=3D"docutils literal"><span class=3D"pre">numa_node</span></=
code> - In NUMA systems, the index of the node the storage device is
connected to.</li>
<li><code class=3D"docutils literal"><span class=3D"pre">driver_data</span>=
</code> - Data private to the driver, if needed.</li>
<li><code class=3D"docutils literal"><span class=3D"pre">tags</span></code>=
 - Pointer to an array of <code class=3D"docutils literal"><span class=3D"p=
re">nr_hw_queues</span></code> tag sets.</li>
<li><code class=3D"docutils literal"><span class=3D"pre">tag_list</span></c=
ode> - List of request queues using this tag set.</li>
</ul>
</div></blockquote>
</div>
<div class=3D"section" id=3D"create-and-delete-a-request-queue">
<h3>Create and delete a request queue<a class=3D"headerlink" href=3D"https:=
//linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.h=
tml#create-and-delete-a-request-queue" title=3D"Permalink to this headline"=
>=C2=B6</a></h3>
<p>Request queues are created using the <code class=3D"xref c c-func docuti=
ls literal"><span class=3D"pre">blk_mq_init_queue()</span></code> function =
and
are deleted using <code class=3D"xref c c-func docutils literal"><span clas=
s=3D"pre">blk_cleanup_queue()</span></code>. The first function creates bot=
h
the hardware and the software queues and initializes their structures.</p>
<p>Queue properties, including the number of hardware queues, their capacit=
y and
request handling function are configured using the <code class=3D"xref c c-=
type docutils literal"><span class=3D"pre">blk_mq_tag_set</span></code>
structure, as described above.</p>
<p>An example of using these functions is as follows:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/fs.h&gt;</span>=
<span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/genhd.h&gt=
;</span><span class=3D"cp"></span>
<span class=3D"cp">#include</span> <span class=3D"cpf">&lt;linux/blkdev.h&g=
t;</span><span class=3D"cp"></span>

<span class=3D"k">static</span> <span class=3D"k">struct</span> <span class=
=3D"n">my_block_dev</span> <span class=3D"p">{</span>
    <span class=3D"c1">//...</span>
    <span class=3D"k">struct</span> <span class=3D"n">blk_mq_tag_set</span>=
 <span class=3D"n">tag_set</span><span class=3D"p">;</span>
    <span class=3D"k">struct</span> <span class=3D"n">request_queue</span> =
<span class=3D"o">*</span><span class=3D"n">queue</span><span class=3D"p">;=
</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span> <span class=3D"n">dev</span><span class=3D"p">;<=
/span>

<span class=3D"k">static</span> <span class=3D"n">blk_status_t</span> <span=
 class=3D"nf">my_block_request</span><span class=3D"p">(</span><span class=
=3D"k">struct</span> <span class=3D"n">blk_mq_hw_ctx</span> <span class=3D"=
o">*</span><span class=3D"n">hctx</span><span class=3D"p">,</span>
                                     <span class=3D"k">const</span> <span c=
lass=3D"k">struct</span> <span class=3D"n">blk_mq_queue_data</span> <span c=
lass=3D"o">*</span><span class=3D"n">bd</span><span class=3D"p">)</span>
<span class=3D"c1">//...</span>

<span class=3D"k">static</span> <span class=3D"k">struct</span> <span class=
=3D"n">blk_mq_ops</span> <span class=3D"n">my_queue_ops</span> <span class=
=3D"o">=3D</span> <span class=3D"p">{</span>
   <span class=3D"p">.</span><span class=3D"n">queue_rq</span> <span class=
=3D"o">=3D</span> <span class=3D"n">my_block_request</span><span class=3D"p=
">,</span>
<span class=3D"p">};</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">create_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*<=
/span><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"cm">/* Initialize tag set. */</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">ops</span>=
 <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span><span class=3D"=
n">my_queue_ops</span><span class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">nr_hw_queu=
es</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><span cla=
ss=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">queue_dept=
h</span> <span class=3D"o">=3D</span> <span class=3D"mi">128</span><span cl=
ass=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">numa_node<=
/span> <span class=3D"o">=3D</span> <span class=3D"n">NUMA_NO_NODE</span><s=
pan class=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">cmd_size</=
span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">tag_set</span><span class=3D"p">.</span><span class=3D"n">flags</spa=
n> <span class=3D"o">=3D</span> <span class=3D"n">BLK_MQ_F_SHOULD_MERGE</sp=
an><span class=3D"p">;</span>
    <span class=3D"n">err</span> <span class=3D"o">=3D</span> <span class=
=3D"n">blk_mq_alloc_tag_set</span><span class=3D"p">(</span><span class=3D"=
o">&amp;</span><span class=3D"n">dev</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">tag_set</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>err</span><span class=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"k">goto</span> <span class=3D"n">out_err</span><span=
 class=3D"p">;</span>
    <span class=3D"p">}</span>

    <span class=3D"cm">/* Allocate queue. */</span>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">queue</span> <span class=3D"o">=3D</span> <span class=3D"n">blk_mq_i=
nit_queue</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><sp=
an class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">ta=
g_set</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>IS_ERR</span><span class=3D"p">(</span><span class=3D"n">dev</span><span c=
lass=3D"o">-&gt;</span><span class=3D"n">queue</span><span class=3D"p">))</=
span> <span class=3D"p">{</span>
        <span class=3D"k">goto</span> <span class=3D"n">out_blk_init</span>=
<span class=3D"p">;</span>
    <span class=3D"p">}</span>

    <span class=3D"n">blk_queue_logical_block_size</span><span class=3D"p">=
(</span><span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span cla=
ss=3D"n">queue</span><span class=3D"p">,</span> <span class=3D"n">KERNEL_SE=
CTOR_SIZE</span><span class=3D"p">);</span>

     <span class=3D"cm">/* Assign private data to queue structure. */</span=
>
    <span class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=
=3D"n">queue</span><span class=3D"o">-&gt;</span><span class=3D"n">queuedat=
a</span> <span class=3D"o">=3D</span> <span class=3D"n">dev</span><span cla=
ss=3D"p">;</span>
    <span class=3D"c1">//...</span>

<span class=3D"nl">out_blk_init</span><span class=3D"p">:</span>
    <span class=3D"n">blk_mq_free_tag_set</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"o">=
-&gt;</span><span class=3D"n">tag_set</span><span class=3D"p">);</span>
<span class=3D"nl">out_err</span><span class=3D"p">:</span>
    <span class=3D"k">return</span> <span class=3D"o">-</span><span class=
=3D"n">ENOMEM</span><span class=3D"p">;</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_block_init</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"kt">int</span> <span class=3D"n">status</span><span clas=
s=3D"p">;</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">status</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">create_block_device</span><span class=3D"p">(</span><span class=3D"=
o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>status</span> <span class=3D"o">&lt;</span> <span class=3D"mi">0</span><sp=
an class=3D"p">)</span>
        <span class=3D"k">return</span> <span class=3D"n">status</span><spa=
n class=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">delete_block_device</span><span class=3D"p">(</span><span class=3D"=
k">struct</span> <span class=3D"n">block_dev</span> <span class=3D"o">*</sp=
an><span class=3D"n">dev</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"c1">//...</span>
    <span class=3D"n">blk_cleanup_queue</span><span class=3D"p">(</span><sp=
an class=3D"n">dev</span><span class=3D"o">-&gt;</span><span class=3D"n">qu=
eue</span><span class=3D"p">);</span>
    <span class=3D"n">blk_mq_free_tag_set</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"o">=
-&gt;</span><span class=3D"n">tag_set</span><span class=3D"p">);</span>
<span class=3D"p">}</span>

<span class=3D"k">static</span> <span class=3D"kt">void</span> <span class=
=3D"nf">my_block_exit</span><span class=3D"p">(</span><span class=3D"kt">vo=
id</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"n">delete_block_device</span><span class=3D"p">(</span><=
span class=3D"o">&amp;</span><span class=3D"n">dev</span><span class=3D"p">=
);</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>After initializing the tag set structure, the tag lists are allocated us=
ing the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">blk_mq_a=
lloc_tag_set()</span></code> function.
The pointer to the function which will process the requests
(<code class=3D"xref c c-func docutils literal"><span class=3D"pre">my_bloc=
k_request()</span></code>) is filled in the <code class=3D"docutils literal=
"><span class=3D"pre">my_queue_ops</span></code> structure and
then the pointer to this structure is added to the tag set.</p>
<p>The queue is created using the <code class=3D"xref c c-func docutils lit=
eral"><span class=3D"pre">blk_mq_init_queue()</span></code> function, based=
 on
the information added in the tag set.</p>
<p>As part of the request queue initialization, you can configure the
<code class=3D"xref c c-member docutils literal"><span class=3D"pre">queued=
ata</span></code> field, which is equivalent to the <code class=3D"xref c c=
-member docutils literal"><span class=3D"pre">private_data</span></code>
field in other structures.</p>
</div>
<div class=3D"section" id=3D"useful-functions-for-processing-request-queues=
">
<h3>Useful functions for processing request queues<a class=3D"headerlink" h=
ref=3D"https://linux-kernel-labs.github.io/refs/heads/master/labs/block_dev=
ice_drivers.html#useful-functions-for-processing-request-queues" title=3D"P=
ermalink to this headline">=C2=B6</a></h3>
<p>The <code class=3D"docutils literal"><span class=3D"pre">queue_rq</span>=
</code> function from <code class=3D"xref c c-type docutils literal"><span =
class=3D"pre">struct</span> <span class=3D"pre">blk_mq_ops</span></code> is=
 used to handle
requests for working with the block device.
This function is the equivalent of read and write functions encountered on
character devices. The function receives the requests for the device as
arguments and can use various functions for processing them.</p>
<p>The functions used to process the requests in the handler are described =
below:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"xref c c-func docutils literal"><span class=3D"pre">blk_=
mq_start_request()</span></code> - must be called before starting processin=
g
a request;</li>
<li><code class=3D"xref c c-func docutils literal"><span class=3D"pre">blk_=
mq_requeue_request()</span></code> - to re-send the request in the queue;</=
li>
<li><code class=3D"xref c c-func docutils literal"><span class=3D"pre">blk_=
mq_end_request()</span></code> - to end request processing and notify the
upper layers.</li>
</ul>
</div></blockquote>
</div>
</div>
<div class=3D"section" id=3D"requests-for-block-devices">
<h2>Requests for block devices<a class=3D"headerlink" href=3D"https://linux=
-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#req=
uests-for-block-devices" title=3D"Permalink to this headline">=C2=B6</a></h=
2>
<p>A request for a block device is described by <code class=3D"xref c c-typ=
e docutils literal"><span class=3D"pre">struct</span> <span class=3D"pre">r=
equest</span></code>
structure.</p>
<p>The fields of <code class=3D"xref c c-type docutils literal"><span class=
=3D"pre">struct</span> <span class=3D"pre">request</span></code> structure =
include:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">cm=
d_flags</span></code>: a series of flags including direction (reading or
writing); to find out the direction, the macrodefinition
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">rq_data=
_dir</span></code> is used, which returns 0 for a read request and 1
for a write request on the device;</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">__=
sector</span></code>: the first sector of the transfer request; if the
device sector has a different size, the appropriate conversion should be
done. To access this field, use the <code class=3D"xref c c-macro docutils =
literal"><span class=3D"pre">blk_rq_pos</span></code> macro;</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">__=
data_len</span></code>: the total number of bytes to be transferred; to
access this field the <code class=3D"xref c c-macro docutils literal"><span=
 class=3D"pre">blk_rq_bytes</span></code> macro is used;</li>
<li>generally, data from the current <code class=3D"xref c c-type docutils =
literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></=
code> will be
transferred; the data size is obtained using the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">blk_rq_=
cur_bytes</span></code> macro;</li>
<li><code class=3D"xref c c-member docutils literal"><span class=3D"pre">bi=
o</span></code>, a dynamic list of <code class=3D"xref c c-type docutils li=
teral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></co=
de> structures that
is a set of buffers associated to the request; this field is accessed by
macrodefinition <code class=3D"xref c c-macro docutils literal"><span class=
=3D"pre">rq_for_each_segment</span></code> if there are multiple
buffers, or by <code class=3D"xref c c-macro docutils literal"><span class=
=3D"pre">bio_data</span></code> macrodefinition in case there is only
one associated buffer;</li>
</ul>
</div></blockquote>
<p>We will discuss more about the <code class=3D"xref c c-type docutils lit=
eral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></cod=
e> structure and its
associated operations in the <span class=3D"xref std std-ref">bio_structure=
</span> section.</p>
<div class=3D"section" id=3D"create-a-request">
<h3>Create a request<a class=3D"headerlink" href=3D"https://linux-kernel-la=
bs.github.io/refs/heads/master/labs/block_device_drivers.html#create-a-requ=
est" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Read /write requests are created by code layers superior to the kernel I=
/O
subsystem. Typically, the subsystem that creates requests for block devices=
 is
the file management subsystem. The I/O subsystem acts as an interface betwe=
en
the file management subsystem and the block device driver. The main operati=
ons
under the responsibility of the I/O subsystem are adding requests to the qu=
eue
of the specific block device and sorting and merging requests according to
performance considerations.</p>
</div>
<div class=3D"section" id=3D"process-a-request">
<h3>Process a request<a class=3D"headerlink" href=3D"https://linux-kernel-l=
abs.github.io/refs/heads/master/labs/block_device_drivers.html#process-a-re=
quest" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The central part of a block device driver is the request handling functi=
on
(<code class=3D"docutils literal"><span class=3D"pre">queue_rq</span></code=
>). In previous examples, the function that fulfilled this role was
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">my_block=
_request()</span></code>. As stated in the
<a class=3D"reference internal" href=3D"https://linux-kernel-labs.github.io=
/refs/heads/master/labs/block_device_drivers.html#create-and-delete-a-reque=
st-queue">Create and delete a request queue</a> section, this function is a=
ssociated to the
driver when creating the tag set structure.</p>
<p>This function is called when the kernel considers that the driver should=
 process
I/O requests. The function must start processing the requests from the queu=
e,
but it is not mandatory to finish them, as requests may be finished by othe=
r
parts of the driver.</p>
<p>The request function runs in an atomic context and must follow the rules=
 for
atomic code (it does not need to call functions that can cause sleep, etc.)=
.</p>
<p>Calling the function that processes the requests is asynchronous relativ=
e
to the actions of any userspace process and no assumptions about the proces=
s
in which the respective function is running should be made. Also, it should=
 not
be assumed that the buffer provided by a request is from kernel space or us=
er
space, any operation that accesses the userspace being erroneous.</p>
<p>One of the simplest request handling function is presented below:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">static</span> <span class=3D"n">blk_status_t</span> <span clas=
s=3D"nf">my_block_request</span><span class=3D"p">(</span><span class=3D"k"=
>struct</span> <span class=3D"n">blk_mq_hw_ctx</span> <span class=3D"o">*</=
span><span class=3D"n">hctx</span><span class=3D"p">,</span>
                                     <span class=3D"k">const</span> <span c=
lass=3D"k">struct</span> <span class=3D"n">blk_mq_queue_data</span> <span c=
lass=3D"o">*</span><span class=3D"n">bd</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"k">struct</span> <span class=3D"n">request</span> <span =
class=3D"o">*</span><span class=3D"n">rq</span> <span class=3D"o">=3D</span=
> <span class=3D"n">bd</span><span class=3D"o">-&gt;</span><span class=3D"n=
">rq</span><span class=3D"p">;</span>
    <span class=3D"k">struct</span> <span class=3D"n">my_block_dev</span> <=
span class=3D"o">*</span><span class=3D"n">dev</span> <span class=3D"o">=3D=
</span> <span class=3D"n">q</span><span class=3D"o">-&gt;</span><span class=
=3D"n">queuedata</span><span class=3D"p">;</span>

    <span class=3D"n">blk_mq_start_request</span><span class=3D"p">(</span>=
<span class=3D"n">rq</span><span class=3D"p">);</span>

    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>blk_rq_is_passthrough</span><span class=3D"p">(</span><span class=3D"n">rq=
</span><span class=3D"p">))</span> <span class=3D"p">{</span>
        <span class=3D"n">printk</span> <span class=3D"p">(</span><span cla=
ss=3D"n">KERN_NOTICE</span> <span class=3D"s">"Skip non-fs request</span><s=
pan class=3D"se">\n</span><span class=3D"s">"</span><span class=3D"p">);</s=
pan>
        <span class=3D"n">blk_mq_end_request</span><span class=3D"p">(</spa=
n><span class=3D"n">rq</span><span class=3D"p">,</span> <span class=3D"n">B=
LK_STS_IOERR</span><span class=3D"p">);</span>
        <span class=3D"k">goto</span> <span class=3D"n">out</span><span cla=
ss=3D"p">;</span>
    <span class=3D"p">}</span>

    <span class=3D"cm">/* do work */</span>
    <span class=3D"p">...</span>

    <span class=3D"n">blk_mq_end_request</span><span class=3D"p">(</span><s=
pan class=3D"n">rq</span><span class=3D"p">,</span> <span class=3D"n">BLK_S=
TS_OK</span><span class=3D"p">);</span>

<span class=3D"nl">out</span><span class=3D"p">:</span>
    <span class=3D"k">return</span> <span class=3D"n">BLK_STS_OK</span><spa=
n class=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>The <code class=3D"xref c c-func docutils literal"><span class=3D"pre">m=
y_block_request()</span></code> function performs the following operations:=
</p>
<blockquote>
<div><ul class=3D"simple">
<li>Get a pointer to the request structure from the <code class=3D"docutils=
 literal"><span class=3D"pre">bd</span></code> argument and start
its processing using the <code class=3D"xref c c-func docutils literal"><sp=
an class=3D"pre">blk_mq_start_request()</span></code> function.</li>
<li>A block device can receive calls which do not transfer data blocks (e.g=
.
low level operations on the disk, instructions referring to special ways of
accessing the device). Most drivers do not know how to handle these
requests and return an error.</li>
<li>To return an error, <code class=3D"xref c c-func docutils literal"><spa=
n class=3D"pre">blk_mq_end_request()</span></code> function is called,
<code class=3D"docutils literal"><span class=3D"pre">BLK_STS_IOERR</span></=
code> being the second argument.</li>
<li>The request is processed according to the needs of the associated devic=
e.</li>
<li>The request ends. In this case, <code class=3D"xref c c-func docutils l=
iteral"><span class=3D"pre">blk_mq_end_request()</span></code> function is
called in order to complete the request.</li>
</ul>
</div></blockquote>
</div>
</div>
<div class=3D"section" id=3D"struct-bio-structure">
<h2><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">bio</span></code> structure<a class=3D"header=
link" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/labs/bl=
ock_device_drivers.html#struct-bio-structure" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p>Each <code class=3D"xref c c-type docutils literal"><span class=3D"pre">=
struct</span> <span class=3D"pre">request</span></code> structure is an I/O=
 block request, but may come
from combining more independent requests from a higher level. The sectors t=
o be
transferred for a request can be scattered into the main memory but they al=
ways
correspond to a set of consecutive sectors on the device. The request is
represented as a series of segments, each corresponding to a buffer in memo=
ry.
The kernel can combine requests that refer to adjacent sectors but will not
combine write requests with read requests into a single
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">request</span></code> structure.</p>
<p>A <code class=3D"xref c c-type docutils literal"><span class=3D"pre">str=
uct</span> <span class=3D"pre">request</span></code> structure is implement=
ed as a linked list of
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structures together with inform=
ation that allows the
driver to retain its current position while processing the request.</p>
<p>The <code class=3D"xref c c-type docutils literal"><span class=3D"pre">s=
truct</span> <span class=3D"pre">bio</span></code> structure is a low-level=
 description of a portion of
a block I/O request.</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">struct</span> <span class=3D"n">bio</span> <span class=3D"p">{=
</span>
    <span class=3D"c1">//...</span>
    <span class=3D"k">struct</span> <span class=3D"n">gendisk</span>       =
   <span class=3D"o">*</span><span class=3D"n">bi_disk</span><span class=3D=
"p">;</span>
    <span class=3D"kt">unsigned</span> <span class=3D"kt">int</span>       =
     <span class=3D"n">bi_opf</span><span class=3D"p">;</span>         <spa=
n class=3D"cm">/* bottom bits req flags, top bits REQ_OP. Use accessors. */=
</span>
    <span class=3D"c1">//...</span>
    <span class=3D"k">struct</span> <span class=3D"n">bio_vec</span>       =
   <span class=3D"o">*</span><span class=3D"n">bi_io_vec</span><span class=
=3D"p">;</span>     <span class=3D"cm">/* the actual vec list */</span>
    <span class=3D"c1">//...</span>
    <span class=3D"k">struct</span> <span class=3D"n">bvec_iter</span>     =
   <span class=3D"n">bi_iter</span><span class=3D"p">;</span>
    <span class=3D"o">/</span><span class=3D"p">...</span>
    <span class=3D"kt">void</span>                    <span class=3D"o">*</=
span><span class=3D"n">bi_private</span><span class=3D"p">;</span>
    <span class=3D"c1">//...</span>
<span class=3D"p">};</span>
</pre></div>
</div>
<p>In turn, the <code class=3D"xref c c-type docutils literal"><span class=
=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure cont=
ains a <code class=3D"xref c c-member docutils literal"><span class=3D"pre"=
>bi_io_vec</span></code>
vector of <code class=3D"xref c c-type docutils literal"><span class=3D"pre=
">struct</span> <span class=3D"pre">bio_vec</span></code> structures. It co=
nsists of the individual
pages in the physical memory to be transferred, the offset within the page =
and
the size of the buffer. To iterate through a <code class=3D"xref c c-type d=
ocutils literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio<=
/span></code> structure,
we need to iterate through the vector of <code class=3D"xref c c-type docut=
ils literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio_vec<=
/span></code> and transfer
the data from every physical page. To simplify vector iteration, the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bvec_iter</span></code> structure is used. This s=
tructure maintains
information about how many buffers and sectors were consumed during the
iteration. The request type is encoded in the <code class=3D"xref c c-membe=
r docutils literal"><span class=3D"pre">bi_opf</span></code> field; to
determine it, use the <code class=3D"xref c c-func docutils literal"><span =
class=3D"pre">bio_data_dir()</span></code> function.</p>
<div class=3D"section" id=3D"create-a-struct-bio-structure">
<h3>Create a <code class=3D"xref c c-type docutils literal"><span class=3D"=
pre">struct</span> <span class=3D"pre">bio</span></code> structure<a class=
=3D"headerlink" href=3D"https://linux-kernel-labs.github.io/refs/heads/mast=
er/labs/block_device_drivers.html#create-a-struct-bio-structure" title=3D"P=
ermalink to this headline">=C2=B6</a></h3>
<p>Two functions can be used to create a <code class=3D"xref c c-type docut=
ils literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio</spa=
n></code> structure:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"xref c c-func docutils literal"><span class=3D"pre">bio_=
alloc()</span></code>: allocates space for a new structure; the structure
must be initialized;</li>
<li><code class=3D"xref c c-func docutils literal"><span class=3D"pre">bio_=
clone()</span></code>: makes a copy of an existing <code class=3D"xref c c-=
type docutils literal"><span class=3D"pre">struct</span> <span class=3D"pre=
">bio</span></code>
structure; the newly obtained structure is initialized with the values of
the cloned structure fields; the buffers are shared with the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure that has been cloned =
so that access to the
buffers has to be done carefully to avoid access to the same memory area
from the two clones;</li>
</ul>
</div></blockquote>
<p>Both functions return a new <code class=3D"xref c c-type docutils litera=
l"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> =
structure.</p>
</div>
<div class=3D"section" id=3D"submit-a-struct-bio-structure">
<h3>Submit a <code class=3D"xref c c-type docutils literal"><span class=3D"=
pre">struct</span> <span class=3D"pre">bio</span></code> structure<a class=
=3D"headerlink" href=3D"https://linux-kernel-labs.github.io/refs/heads/mast=
er/labs/block_device_drivers.html#submit-a-struct-bio-structure" title=3D"P=
ermalink to this headline">=C2=B6</a></h3>
<p>Usually, a <code class=3D"xref c c-type docutils literal"><span class=3D=
"pre">struct</span> <span class=3D"pre">bio</span></code> structure is crea=
ted by the higher levels of
the kernel (usually the file system). A structure thus created is then
transmitted to the I/O subsystem that gathers more <code class=3D"xref c c-=
type docutils literal"><span class=3D"pre">struct</span> <span class=3D"pre=
">bio</span></code>
structures into a request.</p>
<p>For submitting a <code class=3D"xref c c-type docutils literal"><span cl=
ass=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure t=
o the associated I/O device
driver, the <code class=3D"xref c c-func docutils literal"><span class=3D"p=
re">submit_bio()</span></code> function is used. The function receives as
argument an initialized <code class=3D"xref c c-type docutils literal"><spa=
n class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structu=
re that will be added to
a request from the request queue of an I/O device. From that queue, it can =
be
processed by the I/O device driver using a specialized function.</p>
</div>
<div class=3D"section" id=3D"wait-for-the-completion-of-a-struct-bio-struct=
ure">
<span id=3D"bio-completion"></span><h3>Wait for the completion of a <code c=
lass=3D"xref c c-type docutils literal"><span class=3D"pre">struct</span> <=
span class=3D"pre">bio</span></code> structure<a class=3D"headerlink" href=
=3D"https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device=
_drivers.html#wait-for-the-completion-of-a-struct-bio-structure" title=3D"P=
ermalink to this headline">=C2=B6</a></h3>
<p>Submitting a <code class=3D"xref c c-type docutils literal"><span class=
=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure to a=
 driver has the effect of
adding it to a request from the request queue from where it will be further
processed. Thus, when the <code class=3D"xref c c-func docutils literal"><s=
pan class=3D"pre">submit_bio()</span></code> function returns, it is not
guaranteed that the processing of the structure has finished. If you want t=
o
wait for the processing of the request to be finished, use the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">submit_b=
io_wait()</span></code> function.</p>
<p>To be notified when the processing of a <code class=3D"xref c c-type doc=
utils literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio</s=
pan></code> structure ends
(when we do not use <code class=3D"xref c c-func docutils literal"><span cl=
ass=3D"pre">submit_bio_wait()</span></code> function), the
<code class=3D"xref c c-member docutils literal"><span class=3D"pre">bi_end=
_io</span></code> field of the structure should be used. This field
specifies the function that will be called at the end of the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure processing. You can u=
se the
<code class=3D"xref c c-member docutils literal"><span class=3D"pre">bi_pri=
vate</span></code> field of the structure to pass information to the
function.</p>
</div>
<div class=3D"section" id=3D"initialize-a-struct-bio-structure">
<h3>Initialize a <code class=3D"xref c c-type docutils literal"><span class=
=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure<a cl=
ass=3D"headerlink" href=3D"https://linux-kernel-labs.github.io/refs/heads/m=
aster/labs/block_device_drivers.html#initialize-a-struct-bio-structure" tit=
le=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Once a <code class=3D"xref c c-type docutils literal"><span class=3D"pre=
">struct</span> <span class=3D"pre">bio</span></code> structure has been al=
located and before being
transmitted, it must be initialized.</p>
<p>Initializing the structure involves filling in its important fields. As
mentioned above, the <code class=3D"xref c c-member docutils literal"><span=
 class=3D"pre">bi_end_io</span></code> field is used to specify the functio=
n
called when the processing of the structure is finished. The
<code class=3D"xref c c-member docutils literal"><span class=3D"pre">bi_pri=
vate</span></code> field is used to store useful data that can be accessed
in the function pointed by <code class=3D"xref c c-member docutils literal"=
><span class=3D"pre">bi_end_io</span></code>.</p>
<p>The <code class=3D"xref c c-member docutils literal"><span class=3D"pre"=
>bi_opf</span></code> field specifies the type of operation.</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">struct</span> <span class=3D"n">bio</span> <span class=3D"o">*=
</span><span class=3D"n">bio</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">bio_alloc</span><span class=3D"p">(</span><span class=3D"n">GFP_NOI=
O</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span class=
=3D"p">);</span>
<span class=3D"c1">//...</span>
<span class=3D"n">bio</span><span class=3D"o">-&gt;</span><span class=3D"n"=
>bi_disk</span> <span class=3D"o">=3D</span> <span class=3D"n">bdev</span><=
span class=3D"o">-&gt;</span><span class=3D"n">bd_disk</span><span class=3D=
"p">;</span>
<span class=3D"n">bio</span><span class=3D"o">-&gt;</span><span class=3D"n"=
>bi_iter</span><span class=3D"p">.</span><span class=3D"n">bi_sector</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">sector</span><span class=3D=
"p">;</span>
<span class=3D"n">bio</span><span class=3D"o">-&gt;</span><span class=3D"n"=
>bi_opf</span> <span class=3D"o">=3D</span> <span class=3D"n">REQ_OP_READ</=
span><span class=3D"p">;</span>
<span class=3D"n">bio_add_page</span><span class=3D"p">(</span><span class=
=3D"n">bio</span><span class=3D"p">,</span> <span class=3D"n">page</span><s=
pan class=3D"p">,</span> <span class=3D"n">size</span><span class=3D"p">,</=
span> <span class=3D"n">offset</span><span class=3D"p">);</span>
<span class=3D"c1">//...</span>
</pre></div>
</div>
<p>In the code snippet above we specified the block device to which we sent=
 the
following: <code class=3D"xref c c-type docutils literal"><span class=3D"pr=
e">struct</span> <span class=3D"pre">bio</span></code> structure, startup s=
ector, operation
(<code class=3D"xref c c-data docutils literal"><span class=3D"pre">REQ_OP_=
READ</span></code> or <code class=3D"xref c c-data docutils literal"><span =
class=3D"pre">REQ_OP_WRITE</span></code>) and content. The content of a
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure is a buffer described=
 by: a physical page,
the offset in the page and the size of the bufer. A page can be assigned us=
ing
the <code class=3D"xref c c-func docutils literal"><span class=3D"pre">allo=
c_page()</span></code> call.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code class=3D"xref c c-data docutils literal"><span =
class=3D"pre">size</span></code> field of the <code class=3D"xref c c-func =
docutils literal"><span class=3D"pre">bio_add_page()</span></code> call mus=
t be
a multiple of the device sector size.</p>
</div>
</div>
<div class=3D"section" id=3D"how-to-use-the-content-of-a-struct-bio-structu=
re">
<span id=3D"bio-content"></span><h3>How to use the content of a <code class=
=3D"xref c c-type docutils literal"><span class=3D"pre">struct</span> <span=
 class=3D"pre">bio</span></code> structure<a class=3D"headerlink" href=3D"h=
ttps://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_driv=
ers.html#how-to-use-the-content-of-a-struct-bio-structure" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p>To use the content of a <code class=3D"xref c c-type docutils literal"><=
span class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> stru=
cture, the structure's
support pages must be mapped to the kernel address space from where they ca=
n be
accessed. For mapping /unmapping, use the <code class=3D"xref c c-macro doc=
utils literal"><span class=3D"pre">kmap_atomic</span></code> and
the <code class=3D"xref c c-macro docutils literal"><span class=3D"pre">kun=
map_atomic</span></code> macros.</p>
<p>A typical example of use is:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">static</span> <span class=3D"kt">void</span> <span class=3D"nf=
">my_block_transfer</span><span class=3D"p">(</span><span class=3D"k">struc=
t</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*</span><s=
pan class=3D"n">dev</span><span class=3D"p">,</span> <span class=3D"kt">siz=
e_t</span> <span class=3D"n">start</span><span class=3D"p">,</span>
                              <span class=3D"kt">size_t</span> <span class=
=3D"n">len</span><span class=3D"p">,</span> <span class=3D"kt">char</span> =
<span class=3D"o">*</span><span class=3D"n">buffer</span><span class=3D"p">=
,</span> <span class=3D"kt">int</span> <span class=3D"n">dir</span><span cl=
ass=3D"p">);</span>


<span class=3D"k">static</span> <span class=3D"kt">int</span> <span class=
=3D"nf">my_xfer_bio</span><span class=3D"p">(</span><span class=3D"k">struc=
t</span> <span class=3D"n">my_block_dev</span> <span class=3D"o">*</span><s=
pan class=3D"n">dev</span><span class=3D"p">,</span> <span class=3D"k">stru=
ct</span> <span class=3D"n">bio</span> <span class=3D"o">*</span><span clas=
s=3D"n">bio</span><span class=3D"p">)</span>
<span class=3D"p">{</span>
    <span class=3D"k">struct</span> <span class=3D"n">bio_vec</span> <span =
class=3D"n">bvec</span><span class=3D"p">;</span>
    <span class=3D"k">struct</span> <span class=3D"n">bvec_iter</span> <spa=
n class=3D"n">i</span><span class=3D"p">;</span>
    <span class=3D"kt">int</span> <span class=3D"n">dir</span> <span class=
=3D"o">=3D</span> <span class=3D"n">bio_data_dir</span><span class=3D"p">(<=
/span><span class=3D"n">bio</span><span class=3D"p">);</span>

    <span class=3D"cm">/* Do each segment independently. */</span>
    <span class=3D"n">bio_for_each_segment</span><span class=3D"p">(</span>=
<span class=3D"n">bvec</span><span class=3D"p">,</span> <span class=3D"n">b=
io</span><span class=3D"p">,</span> <span class=3D"n">i</span><span class=
=3D"p">)</span> <span class=3D"p">{</span>
        <span class=3D"n">sector_t</span> <span class=3D"n">sector</span> <=
span class=3D"o">=3D</span> <span class=3D"n">i</span><span class=3D"p">.</=
span><span class=3D"n">bi_sector</span><span class=3D"p">;</span>
        <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">buffer</span> <span class=3D"o">=3D</span> <span class=3D"n">kmap_a=
tomic</span><span class=3D"p">(</span><span class=3D"n">bvec</span><span cl=
ass=3D"p">.</span><span class=3D"n">bv_page</span><span class=3D"p">);</spa=
n>
        <span class=3D"kt">unsigned</span> <span class=3D"kt">long</span> <=
span class=3D"n">offset</span> <span class=3D"o">=3D</span> <span class=3D"=
n">bvec</span><span class=3D"p">.</span><span class=3D"n">bv_offset</span><=
span class=3D"p">;</span>
        <span class=3D"kt">size_t</span> <span class=3D"n">len</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">bvec</span><span class=3D"p">.</s=
pan><span class=3D"n">bv_len</span><span class=3D"p">;</span>

        <span class=3D"cm">/* process mapped buffer */</span>
        <span class=3D"n">my_block_transfer</span><span class=3D"p">(</span=
><span class=3D"n">dev</span><span class=3D"p">,</span> <span class=3D"n">s=
ector</span><span class=3D"p">,</span> <span class=3D"n">len</span><span cl=
ass=3D"p">,</span> <span class=3D"n">buffer</span> <span class=3D"o">+</spa=
n> <span class=3D"n">offset</span><span class=3D"p">,</span> <span class=3D=
"n">dir</span><span class=3D"p">);</span>

        <span class=3D"n">kunmap_atomic</span><span class=3D"p">(</span><sp=
an class=3D"n">buffer</span><span class=3D"p">);</span>
    <span class=3D"p">}</span>

    <span class=3D"k">return</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span>
<span class=3D"p">}</span>
</pre></div>
</div>
<p>As it can be seen from the example above, iterating through a
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> requires iterating through all =
of its segments. A segment
(<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct<=
/span> <span class=3D"pre">bio_vec</span></code>) is defined by the physica=
l address page, the offset
in the page and its size.</p>
<p>To simplify the processing of a <code class=3D"xref c c-type docutils li=
teral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></co=
de>, use the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">bio_for=
_each_segment</span></code> macrodefinition. It will iterate through all
segments, and will also update global information stored in an iterator
(<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct<=
/span> <span class=3D"pre">bvec_iter</span></code>) such as the current sec=
tor as well as other
internal information (segment vector index, number of bytes left to be
processed, etc.) .</p>
<p>You can store information in the mapped buffer, or extract information.<=
/p>
<p>In case request queues are used and you needed to process the requests
at <code class=3D"xref c c-type docutils literal"><span class=3D"pre">struc=
t</span> <span class=3D"pre">bio</span></code> level, use the <code class=
=3D"xref c c-macro docutils literal"><span class=3D"pre">rq_for_each_segmen=
t</span></code>
macrodefinition instead of the <code class=3D"xref c c-macro docutils liter=
al"><span class=3D"pre">bio_for_each_segment</span></code> macrodefinition.
This macrodefinition iterates through each segment of each
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure of a <code class=3D"x=
ref c c-type docutils literal"><span class=3D"pre">struct</span> <span clas=
s=3D"pre">request</span></code> structure and
updates a <code class=3D"xref c c-type docutils literal"><span class=3D"pre=
">struct</span> <span class=3D"pre">req_iterator</span></code> structure. T=
he
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">req_iterator</span></code> contains the current <=
code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</s=
pan> <span class=3D"pre">bio</span></code>
structure and the iterator that traverses its segments.</p>
<p>A typical example of use is:</p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"k">struct</span> <span class=3D"n">bio_vec</span> <span class=3D"=
n">bvec</span><span class=3D"p">;</span>
<span class=3D"k">struct</span> <span class=3D"n">req_iterator</span> <span=
 class=3D"n">iter</span><span class=3D"p">;</span>

<span class=3D"n">rq_for_each_segment</span><span class=3D"p">(</span><span=
 class=3D"n">bvec</span><span class=3D"p">,</span> <span class=3D"n">req</s=
pan><span class=3D"p">,</span> <span class=3D"n">iter</span><span class=3D"=
p">)</span> <span class=3D"p">{</span>
    <span class=3D"n">sector_t</span> <span class=3D"n">sector</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">iter</span><span class=3D"p">.</s=
pan><span class=3D"n">iter</span><span class=3D"p">.</span><span class=3D"n=
">bi_sector</span><span class=3D"p">;</span>
    <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D=
"n">buffer</span> <span class=3D"o">=3D</span> <span class=3D"n">kmap_atomi=
c</span><span class=3D"p">(</span><span class=3D"n">bvec</span><span class=
=3D"p">.</span><span class=3D"n">bv_page</span><span class=3D"p">);</span>
    <span class=3D"kt">unsigned</span> <span class=3D"kt">long</span> <span=
 class=3D"n">offset</span> <span class=3D"o">=3D</span> <span class=3D"n">b=
vec</span><span class=3D"p">.</span><span class=3D"n">bv_offset</span><span=
 class=3D"p">;</span>
    <span class=3D"kt">size_t</span> <span class=3D"n">len</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"n">bvec</span><span class=3D"p">.</span>=
<span class=3D"n">bv_len</span><span class=3D"p">;</span>
    <span class=3D"kt">int</span> <span class=3D"n">dir</span> <span class=
=3D"o">=3D</span> <span class=3D"n">bio_data_dir</span><span class=3D"p">(<=
/span><span class=3D"n">iter</span><span class=3D"p">.</span><span class=3D=
"n">bio</span><span class=3D"p">);</span>

    <span class=3D"n">my_block_transfer</span><span class=3D"p">(</span><sp=
an class=3D"n">dev</span><span class=3D"p">,</span> <span class=3D"n">secto=
r</span><span class=3D"p">,</span> <span class=3D"n">len</span><span class=
=3D"p">,</span> <span class=3D"n">buffer</span> <span class=3D"o">+</span> =
<span class=3D"n">offset</span><span class=3D"p">,</span> <span class=3D"n"=
>dir</span><span class=3D"p">);</span>

    <span class=3D"n">kunmap_atomic</span><span class=3D"p">(</span><span c=
lass=3D"n">buffer</span><span class=3D"p">);</span>
<span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"free-a-struct-bio-structure">
<h3>Free a <code class=3D"xref c c-type docutils literal"><span class=3D"pr=
e">struct</span> <span class=3D"pre">bio</span></code> structure<a class=3D=
"headerlink" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/=
labs/block_device_drivers.html#free-a-struct-bio-structure" title=3D"Permal=
ink to this headline">=C2=B6</a></h3>
<p>Once a kernel subsystem uses a <code class=3D"xref c c-type docutils lit=
eral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></cod=
e> structure, it will have to
release the reference to it. This is done by calling <code class=3D"xref c =
c-func docutils literal"><span class=3D"pre">bio_put()</span></code> functi=
on.</p>
</div>
<div class=3D"section" id=3D"set-up-a-request-queue-at-struct-bio-level">
<h3>Set up a request queue at <code class=3D"xref c c-type docutils literal=
"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> l=
evel<a class=3D"headerlink" href=3D"https://linux-kernel-labs.github.io/ref=
s/heads/master/labs/block_device_drivers.html#set-up-a-request-queue-at-str=
uct-bio-level" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>We have previously seen how we can specify a function to be used to proc=
ess
requests sent to the driver. The function receives as argument the requests=
 and
carries out processing at <code class=3D"xref c c-type docutils literal"><s=
pan class=3D"pre">struct</span> <span class=3D"pre">request</span></code> l=
evel.</p>
<p>If, for flexibility reasons, we need to specify a function that carries
out processing at <code class=3D"xref c c-type docutils literal"><span clas=
s=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure lev=
el, we no longer
use request queues and we will need to fill the <code class=3D"docutils lit=
eral"><span class=3D"pre">submit_bio</span></code> field in the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">block_device_operations</span></code> associated =
to the driver.</p>
<p>Below is a typical example of initializing a function that carries out
processing at <code class=3D"xref c c-type docutils literal"><span class=3D=
"pre">struct</span> <span class=3D"pre">bio</span></code> structure level:<=
/p>
<div class=3D"highlight-c"><div class=3D"highlight"><pre><span></span><span=
 class=3D"c1">// the declaration of the function that carries out processin=
g</span>
<span class=3D"c1">// :c:type:`struct bio` structures</span>
<span class=3D"k">static</span> <span class=3D"n">blk_qc_t</span> <span cla=
ss=3D"nf">my_submit_bio</span><span class=3D"p">(</span><span class=3D"k">s=
truct</span> <span class=3D"n">bio</span> <span class=3D"o">*</span><span c=
lass=3D"n">bio</span><span class=3D"p">);</span>

<span class=3D"k">struct</span> <span class=3D"n">block_device_operations</=
span> <span class=3D"n">my_block_ops</span> <span class=3D"o">=3D</span> <s=
pan class=3D"p">{</span>
   <span class=3D"p">.</span><span class=3D"n">owner</span> <span class=3D"=
o">=3D</span> <span class=3D"n">THIS_MODULE</span><span class=3D"p">,</span=
>
   <span class=3D"p">.</span><span class=3D"n">submit_bio</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">my_submit_bio</span>
   <span class=3D"p">...</span>
<span class=3D"p">};</span>
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"further-reading">
<h2>Further reading<a class=3D"headerlink" href=3D"https://linux-kernel-lab=
s.github.io/refs/heads/master/labs/block_device_drivers.html#further-readin=
g" title=3D"Permalink to this headline">=C2=B6</a></h2>
<ul class=3D"simple">
<li><a class=3D"reference external" href=3D"http://static.lwn.net/images/pd=
f/LDD3/ch16.pdf">Linux Device Drivers 3rd Edition, Chapter 16. Block Driver=
s</a></li>
<li>Linux Kernel Development, Second Edition =E2=80=93 Chapter 13. The Bloc=
k I/O Layer</li>
<li><a class=3D"reference external" href=3D"https://lwn.net/Articles/58719/=
">A simple block driver</a></li>
<li><a class=3D"reference external" href=3D"https://lwn.net/Articles/25711/=
">The gendisk interface</a></li>
<li><a class=3D"reference external" href=3D"https://lwn.net/Articles/26404/=
">The bio structure</a></li>
<li><a class=3D"reference external" href=3D"https://lwn.net/Articles/27055/=
">Request queues</a></li>
<li><a class=3D"reference external" href=3D"https://elixir.bootlin.com/linu=
x/v4.15/source/Documentation/block/request.txt">Documentation/block/request=
.txt - Struct request documentation</a></li>
<li><a class=3D"reference external" href=3D"https://elixir.bootlin.com/linu=
x/v4.15/source/Documentation/block/biodoc.txt">Documentation/block/biodoc.t=
xt - Notes on the Generic Block Layer</a></li>
<li><a class=3D"reference external" href=3D"https://elixir.bootlin.com/linu=
x/v4.15/source/drivers/block/brd.c">drivers/block/brd/c - RAM backed block =
disk driver</a></li>
<li><a class=3D"reference external" href=3D"https://www.linuxjournal.com/ar=
ticle/6931">I/O Schedulers</a></li>
</ul>
</div>
<div class=3D"section" id=3D"exercises">
<h2>Exercises<a class=3D"headerlink" href=3D"https://linux-kernel-labs.gith=
ub.io/refs/heads/master/labs/block_device_drivers.html#exercises" title=3D"=
Permalink to this headline">=C2=B6</a></h2>
<div class=3D"admonition important">
<p class=3D"first admonition-title">Important</p>
<p>We strongly encourage you to use the setup from <a class=3D"reference ex=
ternal" href=3D"https://gitlab.cs.pub.ro/so2/so2-labs">this repository</a>.=
</p>
<dl class=3D"docutils">
<dt>To solve exercises, you need to perform these steps:</dt>
<dd><ul class=3D"first last simple">
<li>prepare skeletons from templates</li>
<li>build modules</li>
<li>start the VM and test the module in the VM.</li>
</ul>
</dd>
</dl>
<p>The current lab name is block_device_drivers. See the exercises for the =
task name.</p>
<p>The skeleton code is generated from full source examples located in
<code class=3D"file docutils literal"><span class=3D"pre">tools/labs/templa=
tes</span></code>. To solve the tasks, start by generating
the skeleton code for a complete lab:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>t=
ools/labs $ make clean
tools/labs $ <span class=3D"nv">LABS</span><span class=3D"o">=3D</span>&lt;=
lab name&gt; make skels
</pre></div>
</div>
<p>You can also generate the skeleton for a single task, using</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>t=
ools/labs $ <span class=3D"nv">LABS</span><span class=3D"o">=3D</span>&lt;l=
ab name&gt;/&lt;task name&gt; make skels
</pre></div>
</div>
<p>Once the skeleton drivers are generated, build the source:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>t=
ools/labs $ make build
</pre></div>
</div>
<p>Then, start the VM:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>t=
ools/labs $ make console
</pre></div>
</div>
<p>The modules are placed in /home/root/skels/block_device_drivers/&lt;task=
_name&gt;.</p>
<p>You DO NOT need to STOP the VM when rebuilding modules!
The local <cite>skels</cite> directory is shared with the VM.</p>
<p class=3D"last">Review the <a class=3D"reference internal" href=3D"https:=
//linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.h=
tml#exercises">Exercises</a> section for more detailed information.</p>
</div>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p>Before starting the exercises or generating the skeletons, please run <s=
trong>git pull</strong> inside the Linux repo,
to make sure you have the latest version of the exercises.</p>
<p>If you have local changes, the pull command will fail. Check for local c=
hanges using <code class=3D"docutils literal"><span class=3D"pre">git</span=
> <span class=3D"pre">status</span></code>.
If you want to keep them, run <code class=3D"docutils literal"><span class=
=3D"pre">git</span> <span class=3D"pre">stash</span></code> before <code cl=
ass=3D"docutils literal"><span class=3D"pre">pull</span></code> and <code c=
lass=3D"docutils literal"><span class=3D"pre">git</span> <span class=3D"pre=
">stash</span> <span class=3D"pre">pop</span></code> after.
To discard the changes, run <code class=3D"docutils literal"><span class=3D=
"pre">git</span> <span class=3D"pre">reset</span> <span class=3D"pre">--har=
d</span> <span class=3D"pre">master</span></code>.</p>
<p class=3D"last">If you already generated the skeleton before <code class=
=3D"docutils literal"><span class=3D"pre">git</span> <span class=3D"pre">pu=
ll</span></code> you will need to generate it again.</p>
</div>
<div class=3D"section" id=3D"intro">
<h3>0. Intro<a class=3D"headerlink" href=3D"https://linux-kernel-labs.githu=
b.io/refs/heads/master/labs/block_device_drivers.html#intro" title=3D"Perma=
link to this headline">=C2=B6</a></h3>
<p>Using <a class=3D"reference external" href=3D"http://elixir.free-electro=
ns.com/linux/latest/source">LXR</a> find the definitions of the following s=
ymbols in the Linux kernel:</p>
<blockquote>
<div><ul class=3D"simple">
<li><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">bio</span></code></li>
<li><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">bio_vec</span></code></li>
<li><code class=3D"xref c c-macro docutils literal"><span class=3D"pre">bio=
_for_each_segment</span></code></li>
<li><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">gendisk</span></code></li>
<li><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">block_device_operations</span></code></li>
<li><code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">request</span></code></li>
</ul>
</div></blockquote>
</div>
<div class=3D"section" id=3D"block-device">
<h3>1. Block device<a class=3D"headerlink" href=3D"https://linux-kernel-lab=
s.github.io/refs/heads/master/labs/block_device_drivers.html#block-device" =
title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Create a kernel module that allows you to register or deregister a block=
 device.
Start from the files in the <code class=3D"file docutils literal"><span cla=
ss=3D"pre">1-2-3-6-ram-disk/kernel</span></code> directory in the
lab skeleton.</p>
<p>Follow the comments marked with <strong>TODO 1</strong> in the laborator=
y skeleton. Use the
existing macrodefinitions (<code class=3D"xref c c-macro docutils literal">=
<span class=3D"pre">MY_BLOCK_MAJOR</span></code>,
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">MY_BLKD=
EV_NAME</span></code>). Check the value returned by the register function,
and in case of error, return the error code.</p>
<p>Compile the module, copy it to the virtual machine and insert it into th=
e
kernel. Verify that your device was successfully created inside the
<code class=3D"file docutils literal"><span class=3D"pre">/proc/devices</sp=
an></code>.
You will see a device with major 240.</p>
<p>Unload the kernel module and check that the device was unregistered.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Review the <a class=3D"reference internal" href=3D"https:=
//linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.h=
tml#register-a-block-i-o-device">Register a block I/O device</a> section.</=
p>
</div>
<p>Change the <code class=3D"xref c c-macro docutils literal"><span class=
=3D"pre">MY_BLOCK_MAJOR</span></code> value to 7. Compile the module, copy =
it to
the virtual machine, and insert it into the kernel. Notice that the inserti=
on
fails because there is already another driver/device registered in the kern=
el
with the major 7.</p>
<p>Restore the 240 value for the <code class=3D"xref c c-macro docutils lit=
eral"><span class=3D"pre">MY_BLOCK_MAJOR</span></code> macro.</p>
</div>
<div class=3D"section" id=3D"disk-registration">
<h3>2. Disk registration<a class=3D"headerlink" href=3D"https://linux-kerne=
l-labs.github.io/refs/heads/master/labs/block_device_drivers.html#disk-regi=
stration" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Modify the previous module to add a disk associated with the driver. Ana=
lyze the
macrodefinitions, <code class=3D"xref c c-type docutils literal"><span clas=
s=3D"pre">my_block_dev</span></code> structure and existing functions from
the <code class=3D"file docutils literal"><span class=3D"pre">ram-disk.c</s=
pan></code> file.</p>
<p>Follow the comments marked with <strong>TODO 2</strong>. Use the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">create_b=
lock_device()</span></code> and the <code class=3D"xref c c-func docutils l=
iteral"><span class=3D"pre">delete_block_device()</span></code> functions.<=
/p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Review the <a class=3D"reference internal" href=3D"https:=
//linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.h=
tml#register-a-disk">Register a disk</a> and <a class=3D"reference internal=
" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/labs/block_=
device_drivers.html#process-a-request">Process a request</a> sections.</p>
</div>
<p>Fill in the <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">my_block_request()</span></code> function to process the request
without actually processing your request: display the "request received" me=
ssage
and the following information: start sector, total size, data size from the
current <code class=3D"xref c c-type docutils literal"><span class=3D"pre">=
struct</span> <span class=3D"pre">bio</span></code> structure, direction. T=
o validate a request type,
use the <code class=3D"xref c c-func docutils literal"><span class=3D"pre">=
blk_rq_is_passthrough()</span></code> (the function returns 0 in the case i=
n
which we are interested, i.e. when the request is generated by the file sys=
tem).</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">To find the needed info, review the <a class=3D"reference=
 internal" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/la=
bs/block_device_drivers.html#requests-for-block-devices">Requests for block=
 devices</a>
section.</p>
</div>
<p>Use the <code class=3D"xref c c-func docutils literal"><span class=3D"pr=
e">blk_mq_end_request()</span></code> function to finish processing the
request.</p>
<p>Insert the module into the kernel and inspect the messages printed
by the module. When a device is added, a request is sent to the device. Che=
ck
the presence of <code class=3D"file docutils literal"><span class=3D"pre">/=
dev/myblock</span></code> and if it doesn't exist, create the device
using the command:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>m=
knod /dev/myblock b <span class=3D"m">240</span> <span class=3D"m">0</span>
</pre></div>
</div>
<p>To generate writing requests, use the command:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span><=
span class=3D"nb">echo</span> <span class=3D"s2">"abc"</span>&gt; /dev/mybl=
ock
</pre></div>
</div>
<p>Notice that a write request is preceded by a read request. The request
is done to read the block from the disk and "update" its content with the
data provided by the user, without overwriting the rest. After reading and
updating, writing takes place.</p>
</div>
<div class=3D"section" id=3D"ram-disk">
<h3>3. RAM disk<a class=3D"headerlink" href=3D"https://linux-kernel-labs.gi=
thub.io/refs/heads/master/labs/block_device_drivers.html#ram-disk" title=3D=
"Permalink to this headline">=C2=B6</a></h3>
<p>Modify the previous module to create a RAM disk: requests to the device =
will
result in reads/writes in a memory area.</p>
<p>The memory area <code class=3D"xref c c-data docutils literal"><span cla=
ss=3D"pre">dev-&gt;data</span></code> is already allocated in the source co=
de of
the module using <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">vmalloc()</span></code> and deallocated using <code class=3D"xref =
c c-func docutils literal"><span class=3D"pre">vfree()</span></code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Review the <a class=3D"reference internal" href=3D"https:=
//linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.h=
tml#process-a-request">Process a request</a> section.</p>
</div>
<p>Follow the comments marked with <strong>TODO 3</strong> to complete the
<code class=3D"xref c c-func docutils literal"><span class=3D"pre">my_block=
_transfer()</span></code> function to write/read the request information
in/from the memory area. The function will be called for each request withi=
n
the queue processing function: <code class=3D"xref c c-func docutils litera=
l"><span class=3D"pre">my_block_request()</span></code>. To write/read
to/from the memory area, use <code class=3D"xref c c-func docutils literal"=
><span class=3D"pre">memcpy()</span></code>. To determine the write/read
information, use the fields of the <code class=3D"xref c c-type docutils li=
teral"><span class=3D"pre">struct</span> <span class=3D"pre">request</span>=
</code> structure.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">To find out the size of the request data, use the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">blk_rq_=
cur_bytes</span></code> macro. Do not use the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">blk_rq_=
bytes</span></code> macro.</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">To find out the buffer associated to the request, use
<code class=3D"xref c c-data docutils literal"><span class=3D"pre">bio_data=
`(:c:data:`rq-&gt;bio</span></code>).</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">A description of useful macros is in the <a class=3D"refe=
rence internal" href=3D"https://linux-kernel-labs.github.io/refs/heads/mast=
er/labs/block_device_drivers.html#requests-for-block-devices">Requests for =
block devices</a>
section.</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">You can find useful information in the
<a class=3D"reference external" href=3D"https://github.com/martinezjavier/l=
dd3/blob/master/sbull/sbull.c">block device driver example</a>
from <a class=3D"reference external" href=3D"http://lwn.net/Kernel/LDD3/">L=
inux Device Driver</a>.</p>
</div>
<p>For testing, use the test file <code class=3D"file docutils literal"><sp=
an class=3D"pre">user/ram-disk-test.c</span></code>.
The test program is compiled automatically at <code class=3D"docutils liter=
al"><span class=3D"pre">make</span> <span class=3D"pre">build</span></code>=
, copied to the
virtual machine at <code class=3D"docutils literal"><span class=3D"pre">mak=
e</span> <span class=3D"pre">copy</span></code> and can be run on the QEMU =
virtual machine
using the command:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>.=
/ram-disk-test
</pre></div>
</div>
<p>There is no need to insert the module into the kernel, it will be insert=
ed by
the <code class=3D"docutils literal"><span class=3D"pre">ram-disk-test</spa=
n></code> command.</p>
<p>Some tests may fail because of lack of synchronization between the trans=
mitted
data (flush).</p>
</div>
<div class=3D"section" id=3D"read-data-from-the-disk">
<h3>4. Read data from the disk<a class=3D"headerlink" href=3D"https://linux=
-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#rea=
d-data-from-the-disk" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The purpose of this exercise is to read data from the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">PHYSICA=
L_DISK_NAME</span></code> disk (<code class=3D"file docutils literal"><span=
 class=3D"pre">/dev/vdb</span></code>) directly from the kernel.</p>
<div class=3D"admonition attention">
<p class=3D"first admonition-title">Attention</p>
<p>Before solving the exercise, we need to make sure the disk is
added to the virtual machine.</p>
<p>Check the variable <code class=3D"docutils literal"><span class=3D"pre">=
QEMU_OPTS</span></code> from <code class=3D"file docutils literal"><span cl=
ass=3D"pre">qemu/Makefile</span></code>.
There should already be two extra disks added using <code class=3D"docutils=
 literal"><span class=3D"pre">-drive</span> <span class=3D"pre">...</span><=
/code>.</p>
<p class=3D"last">If there are not, generate a file that we will use as
the disk image using the command:
<strong class=3D"command">dd if=3D/dev/zero of=3Dqemu/mydisk.img bs=3D1024 =
count=3D1</strong>
and add the following option:
<strong class=3D"command">-drive file=3Dqemu/mydisk.img,if=3Dvirtio,format=
=3Draw</strong>
to <code class=3D"file docutils literal"><span class=3D"pre">qemu/Makefile<=
/span></code> (in the <code class=3D"xref c c-data docutils literal"><span =
class=3D"pre">QEMU_OPTS</span></code> variable,
after the root disk).</p>
</div>
<p>Follow the comments marked with <strong>TODO 4</strong> in the directory=
 <code class=3D"file docutils literal"><span class=3D"pre">4-5-relay/</span=
></code>
and implement <code class=3D"xref c c-func docutils literal"><span class=3D=
"pre">open_disk()</span></code> and <code class=3D"xref c c-func docutils l=
iteral"><span class=3D"pre">close_disk()</span></code>.
Use the <code class=3D"xref c c-func docutils literal"><span class=3D"pre">=
blkdev_get_by_path()</span></code> and <code class=3D"xref c c-func docutil=
s literal"><span class=3D"pre">blkdev_put()</span></code> functions. The
device must be opened in read-write mode exclusively
(<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">FMODE_=
READ</span></code> | <code class=3D"xref c c-macro docutils literal"><span =
class=3D"pre">FMODE_WRITE</span></code> | <code class=3D"xref c c-macro doc=
utils literal"><span class=3D"pre">FMODE_EXCL</span></code>), and
as holder you must use the current module (<code class=3D"xref c c-macro do=
cutils literal"><span class=3D"pre">THIS_MODULE</span></code>).</p>
<p>Implement the <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">send_test_bio()</span></code> function. You will have to create a =
new
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure and fill it, submit i=
t and wait for it. Read the
first sector of the disk. To wait, call the <code class=3D"xref c c-func do=
cutils literal"><span class=3D"pre">submit_bio_wait()</span></code> functio=
n.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p>The first sector of the disk is the sector with the index 0.
This value must be used to initialize the field
<code class=3D"xref c c-member docutils literal"><span class=3D"pre">bi_ite=
r.bi_sector</span></code> of the <code class=3D"xref c c-type docutils lite=
ral"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></code=
>.</p>
<p class=3D"last">For the read operation, use the <code class=3D"xref c c-m=
acro docutils literal"><span class=3D"pre">REQ_OP_READ</span></code> macro =
to
initialize the <code class=3D"xref c c-member docutils literal"><span class=
=3D"pre">bi_opf</span></code> field of the <code class=3D"xref c c-type doc=
utils literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio</s=
pan></code>.</p>
</div>
<p>After finishing the operation, display the first 3 bytes of data read by
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure. Use the format <code=
 class=3D"docutils literal"><span class=3D"pre">"%</span> <span class=3D"pr=
e">02x"</span></code> for <code class=3D"xref c c-func docutils literal"><s=
pan class=3D"pre">printk()</span></code>
to display the data and the <code class=3D"xref c c-macro docutils literal"=
><span class=3D"pre">kmap_atomic</span></code> and <code class=3D"xref c c-=
macro docutils literal"><span class=3D"pre">kunmap_atomic</span></code>
macros respectively.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">As an argument for the <code class=3D"xref c c-func docut=
ils literal"><span class=3D"pre">kmap_atomic()</span></code> function, just=
 use the
page which is allocated above in the code, in the <code class=3D"xref c c-d=
ata docutils literal"><span class=3D"pre">page</span></code>
variable.</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Review the sections <a class=3D"reference internal" href=
=3D"https://linux-kernel-labs.github.io/refs/heads/master/so2/lab7-block-de=
vice-drivers.html#bio-content"><span class=3D"std std-ref">How to use the c=
ontent of a struct bio structure</span></a> and <a class=3D"reference inter=
nal" href=3D"https://linux-kernel-labs.github.io/refs/heads/master/so2/lab7=
-block-device-drivers.html#bio-completion"><span class=3D"std std-ref">Wait=
 for the completion of a struct bio structure</span></a>.</p>
</div>
<p>For testing, use the <code class=3D"file docutils literal"><span class=
=3D"pre">test-relay-disk</span></code> script, which is copied on the
virtual machine when running <strong class=3D"command">make copy</strong>. =
If it is not copied, make
sure it is executable:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>c=
hmod +x test-relay-disk
</pre></div>
</div>
<p>There is no need to load the module into the kernel, it will be loaded b=
y
<strong class=3D"command">test-relay-disk</strong>.</p>
<p>Use the command below to run the script:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>.=
/test-relay-disk
</pre></div>
</div>
<p>The script writes "abc" at the beginning of the disk indicated by
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">PHYSICA=
L_DISK_NAME</span></code>. After running, the module will display 61 62 63
(the corresponding hexadecimal values of letters "a", "b" and "c").</p>
</div>
<div class=3D"section" id=3D"write-data-to-the-disk">
<h3>5. Write data to the disk<a class=3D"headerlink" href=3D"https://linux-=
kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#writ=
e-data-to-the-disk" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>Follow the comments marked with <strong>TODO 5</strong> to write a messa=
ge
(<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">BIO_WR=
ITE_MESSAGE</span></code>) on the disk.</p>
<p>The <code class=3D"xref c c-func docutils literal"><span class=3D"pre">s=
end_test_bio()</span></code> function receives as argument the operation ty=
pe
(read or write). Call in the <code class=3D"xref c c-func docutils literal"=
><span class=3D"pre">relay_init()</span></code> function the function for
reading and in the <code class=3D"xref c c-func docutils literal"><span cla=
ss=3D"pre">relay_exit()</span></code> function the function for writing. We
recommend using the <code class=3D"xref c c-macro docutils literal"><span c=
lass=3D"pre">REQ_OP_READ</span></code> and the <code class=3D"xref c c-macr=
o docutils literal"><span class=3D"pre">REQ_OP_WRITE</span></code>
macros.</p>
<p>Inside the <code class=3D"xref c c-func docutils literal"><span class=3D=
"pre">send_test_bio()</span></code> function, if the operation is write, fi=
ll in
the buffer associated to the <code class=3D"xref c c-type docutils literal"=
><span class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> st=
ructure with the message
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">BIO_WRI=
TE_MESSAGE</span></code>. Use the <code class=3D"xref c c-macro docutils li=
teral"><span class=3D"pre">kmap_atomic</span></code> and the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">kunmap_=
atomic</span></code> macros to work with the buffer associated to the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">You need to update the type of the operation associated t=
o the
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structure by setting the <code =
class=3D"xref c c-member docutils literal"><span class=3D"pre">bi_opf</span=
></code> field
accordingly.</p>
</div>
<p>For testing, run the <code class=3D"file docutils literal"><span class=
=3D"pre">test-relay-disk</span></code> script using the command:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>.=
/test-relay-disk
</pre></div>
</div>
<p>The script will display the <code class=3D"docutils literal"><span class=
=3D"pre">"read</span> <span class=3D"pre">from</span> <span class=3D"pre">/=
dev/sdb:</span> <span class=3D"pre">64</span> <span class=3D"pre">65</span>=
 <span class=3D"pre">66"</span></code> message at the
standard output.</p>
</div>
<div class=3D"section" id=3D"processing-requests-from-the-request-queue-at-=
struct-bio-level">
<h3>6. Processing requests from the request queue at <code class=3D"xref c =
c-type docutils literal"><span class=3D"pre">struct</span> <span class=3D"p=
re">bio</span></code> level<a class=3D"headerlink" href=3D"https://linux-ke=
rnel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#proces=
sing-requests-from-the-request-queue-at-struct-bio-level" title=3D"Permalin=
k to this headline">=C2=B6</a></h3>
<p>In the implementation from Exercise 3, we have only processed a
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio_vec</span></code> of the current <code class=
=3D"xref c c-type docutils literal"><span class=3D"pre">struct</span> <span=
 class=3D"pre">bio</span></code> from the request.
We want to process all <code class=3D"xref c c-type docutils literal"><span=
 class=3D"pre">struct</span> <span class=3D"pre">bio_vec</span></code> stru=
ctures from all
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> structures.
For this, we will iterate through all <code class=3D"xref c c-type docutils=
 literal"><span class=3D"pre">struct</span> <span class=3D"pre">bio</span><=
/code> requests and through
all <code class=3D"xref c c-type docutils literal"><span class=3D"pre">stru=
ct</span> <span class=3D"pre">bio_vec</span></code> structures (also called=
 segments) of each
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code>.</p>
<p>Add, within the ramdisk implementation (<code class=3D"file docutils lit=
eral"><span class=3D"pre">1-2-3-6-ram-disk/</span></code> directory),
support for processing the requests from the request queue at
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> level. Follow the comments mark=
ed with <strong>TODO 6</strong>.</p>
<p>Set the <code class=3D"xref c c-macro docutils literal"><span class=3D"p=
re">USE_BIO_TRANSFER</span></code> macro to 1.</p>
<p>Implement the <code class=3D"xref c c-func docutils literal"><span class=
=3D"pre">my_xfer_request()</span></code> function. Use the
<code class=3D"xref c c-macro docutils literal"><span class=3D"pre">rq_for_=
each_segment</span></code> macro to iterate through the <code class=3D"xref=
 c c-type docutils literal"><span class=3D"pre">bio_vec</span></code>
structures of each <code class=3D"xref c c-type docutils literal"><span cla=
ss=3D"pre">struct</span> <span class=3D"pre">bio</span></code> from the req=
uest.</p>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Review the indications and the code snippets from the
<a class=3D"reference internal" href=3D"https://linux-kernel-labs.github.io=
/refs/heads/master/so2/lab7-block-device-drivers.html#bio-content"><span cl=
ass=3D"std std-ref">How to use the content of a struct bio structure</span>=
</a> section.</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Use the <code class=3D"xref c c-type docutils literal"><s=
pan class=3D"pre">struct</span> <span class=3D"pre">bio</span></code> segme=
nt iterator to get the current
sector (<code class=3D"xref c c-member docutils literal"><span class=3D"pre=
">iter.iter.bi_sector</span></code>).</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Use the request iterator to get the reference to the curr=
ent
<code class=3D"xref c c-type docutils literal"><span class=3D"pre">struct</=
span> <span class=3D"pre">bio</span></code> (<code class=3D"xref c c-member=
 docutils literal"><span class=3D"pre">iter.bio</span></code>).</p>
</div>
<div class=3D"admonition hint">
<p class=3D"first admonition-title">Hint</p>
<p class=3D"last">Use the <code class=3D"xref c c-macro docutils literal"><=
span class=3D"pre">bio_data_dir</span></code> macro to find the reading or =
writing
direction for a <code class=3D"xref c c-type docutils literal"><span class=
=3D"pre">struct</span> <span class=3D"pre">bio</span></code>.</p>
</div>
<p>Use the <code class=3D"xref c c-macro docutils literal"><span class=3D"p=
re">kmap_atomic</span></code> or the <code class=3D"xref c c-macro docutils=
 literal"><span class=3D"pre">kunmap_atomic</span></code> macros to map
the pages of each <code class=3D"xref c c-type docutils literal"><span clas=
s=3D"pre">struct</span> <span class=3D"pre">bio</span></code> structure and=
 access its associated
buffers. For the actual transfer, call the <code class=3D"xref c c-func doc=
utils literal"><span class=3D"pre">my_block_transfer()</span></code> functi=
on
implemented in the previous exercise.</p>
<p>For testing, use the <code class=3D"file docutils literal"><span class=
=3D"pre">ram-disk-test.c</span></code> test file:</p>
<div class=3D"highlight-shell"><div class=3D"highlight"><pre><span></span>.=
/ram-disk-test
</pre></div>
</div>
<p>There is no need to insert the module into the kernel, it will be insert=
ed by
the <strong class=3D"command">ram-disk-test</strong> executable.</p>
<p>Some tests may crash because of lack of synchronization between the tran=
smitted
data (flush).</p>
</div>
</div>
</div>


           </div>
          </div>
          <footer><div class=3D"rst-footer-buttons" role=3D"navigation" ari=
a-label=3D"Footer">
        <a href=3D"https://linux-kernel-labs.github.io/refs/heads/master/la=
bs/deferred_work.html" class=3D"btn btn-neutral float-left" title=3D"Deferr=
ed work" accesskey=3D"p" rel=3D"prev"><span class=3D"fa fa-arrow-circle-lef=
t" aria-hidden=3D"true"></span> Previous</a>
        <a href=3D"https://linux-kernel-labs.github.io/refs/heads/master/la=
bs/filesystems_part1.html" class=3D"btn btn-neutral float-right" title=3D"F=
ile system drivers (Part 1)" accesskey=3D"n" rel=3D"next">Next <span class=
=3D"fa fa-arrow-circle-right" aria-hidden=3D"true"></span></a>
    </div>

  <hr>

  <div role=3D"contentinfo">
    <p>=C2=A9 Copyright The kernel development community.</p>
  </div>

  Built with <a href=3D"https://www.sphinx-doc.org/">Sphinx</a> using a
    <a href=3D"https://github.com/readthedocs/sphinx_rtd_theme">theme</a>
    provided by <a href=3D"https://readthedocs.org/">Read the Docs</a>.
  =20

</footer>
        </div>
      </div>
    </section>
  </div>
  =20


</body><grammarly-desktop-integration data-grammarly-shadow-root=3D"true"><=
template shadowmode=3D"open"><div aria-label=3D"grammarly-integration" role=
=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-integration" data-con=
tent=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;=
isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integrati=
on></html>
------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/_static/css/theme.css

@charset "utf-8";

html { box-sizing: border-box; }

*, ::after, ::before { box-sizing: inherit; }

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

[hidden], audio:not([controls]) { display: none; }

* { box-sizing: border-box; }

html { font-size: 100%; text-size-adjust: 100%; }

body { margin: 0px; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom: 1px dotted; }

b, strong { font-weight: 700; }

blockquote { margin: 0px; }

dfn { font-style: italic; }

ins { background: rgb(255, 255, 153); text-decoration: none; }

ins, mark { color: rgb(0, 0, 0); }

mark { background: rgb(255, 255, 0); font-style: italic; font-weight: 700; =
}

.rst-content code, .rst-content tt, code, kbd, pre, samp { font-family: mon=
ospace, serif; font-size: 1em; }

pre { white-space: pre; }

q { quotes: none; }

q::after, q::before { content: none; }

small { font-size: 85%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

dl, ol, ul { margin: 0px; padding: 0px; list-style: none none; }

li { list-style: none; }

dd { margin: 0px; }

img { border: 0px; vertical-align: middle; max-width: 100%; }

svg:not(:root) { overflow: hidden; }

figure, form { margin: 0px; }

label { cursor: pointer; }

button, input, select, textarea { font-size: 100%; margin: 0px; vertical-al=
ign: baseline; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; appearance: button; }

button[disabled], input[disabled] { cursor: default; }

input[type=3D"search"] { appearance: textfield; box-sizing: content-box; }

textarea { resize: vertical; }

table { border-collapse: collapse; border-spacing: 0px; }

td { vertical-align: top; }

.chromeframe { margin: 0.2em 0px; background: rgb(204, 204, 204); color: rg=
b(0, 0, 0); padding: 0.2em 0px; }

.ir { display: block; border: 0px; text-indent: -999em; overflow: hidden; b=
ackground-color: transparent; background-repeat: no-repeat; text-align: lef=
t; direction: ltr; }

.ir br { display: none; }

.hidden { display: none !important; visibility: hidden; }

.visuallyhidden { border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px;=
 margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1=
px; }

.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: a=
uto; height: auto; margin: 0px; overflow: visible; position: static; width:=
 auto; }

.invisible { visibility: hidden; }

.relative { position: relative; }

big, small { font-size: 100%; }

@media print {
  body, html, section { background: none !important; }
  * { box-shadow: none !important; text-shadow: none !important; filter: no=
ne !important; }
  a, a:visited { text-decoration: underline; }
  .ir a::after, a[href^=3D"#"]::after, a[href^=3D"javascript:"]::after { co=
ntent: ""; }
  blockquote, pre { break-inside: avoid; }
  thead { display: table-header-group; }
  img, tr { break-inside: avoid; }
  img { max-width: 100% !important; }
  @page { margin: 0.5cm; }
  .rst-content .toctree-wrapper > p.caption, h2, h3, p { orphans: 3; widows=
: 3; }
  .rst-content .toctree-wrapper > p.caption, h2, h3 { break-after: avoid; }
}

.btn, .fa::before, .icon::before, .rst-content .admonition, .rst-content .a=
dmonition-title::before, .rst-content .admonition-todo, .rst-content .atten=
tion, .rst-content .caution, .rst-content .code-block-caption .headerlink::=
before, .rst-content .danger, .rst-content .eqno .headerlink::before, .rst-=
content .error, .rst-content .hint, .rst-content .important, .rst-content .=
note, .rst-content .seealso, .rst-content .tip, .rst-content .warning, .rst=
-content code.download span:first-child::before, .rst-content dl dt .header=
link::before, .rst-content h1 .headerlink::before, .rst-content h2 .headerl=
ink::before, .rst-content h3 .headerlink::before, .rst-content h4 .headerli=
nk::before, .rst-content h5 .headerlink::before, .rst-content h6 .headerlin=
k::before, .rst-content p.caption .headerlink::before, .rst-content p .head=
erlink::before, .rst-content table > caption .headerlink::before, .rst-cont=
ent tt.download span:first-child::before, .wy-alert, .wy-dropdown .caret::b=
efore, .wy-inline-validate.wy-inline-validate-danger .wy-input-context::bef=
ore, .wy-inline-validate.wy-inline-validate-info .wy-input-context::before,=
 .wy-inline-validate.wy-inline-validate-success .wy-input-context::before, =
.wy-inline-validate.wy-inline-validate-warning .wy-input-context::before, .=
wy-menu-vertical li.current > a button.toctree-expand::before, .wy-menu-ver=
tical li.on a button.toctree-expand::before, .wy-menu-vertical li button.to=
ctree-expand::before, input[type=3D"color"], input[type=3D"date"], input[ty=
pe=3D"datetime-local"], input[type=3D"datetime"], input[type=3D"email"], in=
put[type=3D"month"], input[type=3D"number"], input[type=3D"password"], inpu=
t[type=3D"search"], input[type=3D"tel"], input[type=3D"text"], input[type=
=3D"time"], input[type=3D"url"], input[type=3D"week"], select, textarea { -=
webkit-font-smoothing: antialiased; }

.clearfix { }

.clearfix::after, .clearfix::before { display: table; content: ""; }

.clearfix::after { clear: both; }

@font-face { font-family: FontAwesome; src: url("fonts/fontawesome-webfont.=
woff2?af7ae505a9eed503f8b8e6982036873e") format("woff2"), url("fonts/fontaw=
esome-webfont.woff?fee66e712a8a08eef5805a46892932ad") format("woff"), url("=
fonts/fontawesome-webfont.ttf?b06871f281fee6b241d60582ae9369b9") format("tr=
uetype"); font-weight: 400; font-style: normal; }

.fa, .icon, .rst-content .admonition-title, .rst-content .code-block-captio=
n .headerlink, .rst-content .eqno .headerlink, .rst-content code.download s=
pan:first-child, .rst-content dl dt .headerlink, .rst-content h1 .headerlin=
k, .rst-content h2 .headerlink, .rst-content h3 .headerlink, .rst-content h=
4 .headerlink, .rst-content h5 .headerlink, .rst-content h6 .headerlink, .r=
st-content p.caption .headerlink, .rst-content p .headerlink, .rst-content =
table > caption .headerlink, .rst-content tt.download span:first-child, .wy=
-menu-vertical li.current > a button.toctree-expand, .wy-menu-vertical li.o=
n a button.toctree-expand, .wy-menu-vertical li button.toctree-expand { dis=
play: inline-block; font-style: normal; font-variant: normal; font-kerning:=
 auto; font-optical-sizing: auto; font-feature-settings: normal; font-varia=
tion-settings: normal; font-weight: normal; font-stretch: normal; line-heig=
ht: 1; font-family: FontAwesome; font-size: inherit; text-rendering: auto; =
-webkit-font-smoothing: antialiased; }

.fa-lg { font-size: 1.33333em; line-height: 0.75em; vertical-align: -15%; }

.fa-2x { font-size: 2em; }

.fa-3x { font-size: 3em; }

.fa-4x { font-size: 4em; }

.fa-5x { font-size: 5em; }

.fa-fw { width: 1.28571em; text-align: center; }

.fa-ul { padding-left: 0px; margin-left: 2.14286em; list-style-type: none; =
}

.fa-ul > li { position: relative; }

.fa-li { position: absolute; left: -2.14286em; width: 2.14286em; top: 0.142=
86em; text-align: center; }

.fa-li.fa-lg { left: -1.85714em; }

.fa-border { padding: 0.2em 0.25em 0.15em; border: 0.08em solid rgb(238, 23=
8, 238); border-radius: 0.1em; }

.fa-pull-left { float: left; }

.fa-pull-right { float: right; }

.fa-pull-left.icon, .fa.fa-pull-left, .rst-content .code-block-caption .fa-=
pull-left.headerlink, .rst-content .eqno .fa-pull-left.headerlink, .rst-con=
tent .fa-pull-left.admonition-title, .rst-content code.download span.fa-pul=
l-left:first-child, .rst-content dl dt .fa-pull-left.headerlink, .rst-conte=
nt h1 .fa-pull-left.headerlink, .rst-content h2 .fa-pull-left.headerlink, .=
rst-content h3 .fa-pull-left.headerlink, .rst-content h4 .fa-pull-left.head=
erlink, .rst-content h5 .fa-pull-left.headerlink, .rst-content h6 .fa-pull-=
left.headerlink, .rst-content p .fa-pull-left.headerlink, .rst-content tabl=
e > caption .fa-pull-left.headerlink, .rst-content tt.download span.fa-pull=
-left:first-child, .wy-menu-vertical li.current > a button.fa-pull-left.toc=
tree-expand, .wy-menu-vertical li.on a button.fa-pull-left.toctree-expand, =
.wy-menu-vertical li button.fa-pull-left.toctree-expand { margin-right: 0.3=
em; }

.fa-pull-right.icon, .fa.fa-pull-right, .rst-content .code-block-caption .f=
a-pull-right.headerlink, .rst-content .eqno .fa-pull-right.headerlink, .rst=
-content .fa-pull-right.admonition-title, .rst-content code.download span.f=
a-pull-right:first-child, .rst-content dl dt .fa-pull-right.headerlink, .rs=
t-content h1 .fa-pull-right.headerlink, .rst-content h2 .fa-pull-right.head=
erlink, .rst-content h3 .fa-pull-right.headerlink, .rst-content h4 .fa-pull=
-right.headerlink, .rst-content h5 .fa-pull-right.headerlink, .rst-content =
h6 .fa-pull-right.headerlink, .rst-content p .fa-pull-right.headerlink, .rs=
t-content table > caption .fa-pull-right.headerlink, .rst-content tt.downlo=
ad span.fa-pull-right:first-child, .wy-menu-vertical li.current > a button.=
fa-pull-right.toctree-expand, .wy-menu-vertical li.on a button.fa-pull-righ=
t.toctree-expand, .wy-menu-vertical li button.fa-pull-right.toctree-expand =
{ margin-left: 0.3em; }

.pull-right { float: right; }

.pull-left { float: left; }

.fa.pull-left, .pull-left.icon, .rst-content .code-block-caption .pull-left=
.headerlink, .rst-content .eqno .pull-left.headerlink, .rst-content .pull-l=
eft.admonition-title, .rst-content code.download span.pull-left:first-child=
, .rst-content dl dt .pull-left.headerlink, .rst-content h1 .pull-left.head=
erlink, .rst-content h2 .pull-left.headerlink, .rst-content h3 .pull-left.h=
eaderlink, .rst-content h4 .pull-left.headerlink, .rst-content h5 .pull-lef=
t.headerlink, .rst-content h6 .pull-left.headerlink, .rst-content p .pull-l=
eft.headerlink, .rst-content table > caption .pull-left.headerlink, .rst-co=
ntent tt.download span.pull-left:first-child, .wy-menu-vertical li.current =
> a button.pull-left.toctree-expand, .wy-menu-vertical li.on a button.pull-=
left.toctree-expand, .wy-menu-vertical li button.pull-left.toctree-expand {=
 margin-right: 0.3em; }

.fa.pull-right, .pull-right.icon, .rst-content .code-block-caption .pull-ri=
ght.headerlink, .rst-content .eqno .pull-right.headerlink, .rst-content .pu=
ll-right.admonition-title, .rst-content code.download span.pull-right:first=
-child, .rst-content dl dt .pull-right.headerlink, .rst-content h1 .pull-ri=
ght.headerlink, .rst-content h2 .pull-right.headerlink, .rst-content h3 .pu=
ll-right.headerlink, .rst-content h4 .pull-right.headerlink, .rst-content h=
5 .pull-right.headerlink, .rst-content h6 .pull-right.headerlink, .rst-cont=
ent p .pull-right.headerlink, .rst-content table > caption .pull-right.head=
erlink, .rst-content tt.download span.pull-right:first-child, .wy-menu-vert=
ical li.current > a button.pull-right.toctree-expand, .wy-menu-vertical li.=
on a button.pull-right.toctree-expand, .wy-menu-vertical li button.pull-rig=
ht.toctree-expand { margin-left: 0.3em; }

.fa-spin { animation: 2s linear 0s infinite normal none running fa-spin; }

.fa-pulse { animation: 1s steps(8) 0s infinite normal none running fa-spin;=
 }

@-webkit-keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

@keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

.fa-rotate-90 { transform: rotate(90deg); }

.fa-rotate-180 { transform: rotate(180deg); }

.fa-rotate-270 { transform: rotate(270deg); }

.fa-flip-horizontal { transform: scaleX(-1); }

.fa-flip-vertical { transform: scaleY(-1); }

:root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-rotate-90, :r=
oot .fa-rotate-180, :root .fa-rotate-270 { filter: none; }

.fa-stack { position: relative; display: inline-block; width: 2em; height: =
2em; line-height: 2em; vertical-align: middle; }

.fa-stack-1x, .fa-stack-2x { position: absolute; left: 0px; width: 100%; te=
xt-align: center; }

.fa-stack-1x { line-height: inherit; }

.fa-stack-2x { font-size: 2em; }

.fa-inverse { color: rgb(255, 255, 255); }

.fa-glass::before { content: "=EF=80=80"; }

.fa-music::before { content: "=EF=80=81"; }

.fa-search::before, .icon-search::before { content: "=EF=80=82"; }

.fa-envelope-o::before { content: "=EF=80=83"; }

.fa-heart::before { content: "=EF=80=84"; }

.fa-star::before { content: "=EF=80=85"; }

.fa-star-o::before { content: "=EF=80=86"; }

.fa-user::before { content: "=EF=80=87"; }

.fa-film::before { content: "=EF=80=88"; }

.fa-th-large::before { content: "=EF=80=89"; }

.fa-th::before { content: "=EF=80=8A"; }

.fa-th-list::before { content: "=EF=80=8B"; }

.fa-check::before { content: "=EF=80=8C"; }

.fa-close::before, .fa-remove::before, .fa-times::before { content: "=EF=80=
=8D"; }

.fa-search-plus::before { content: "=EF=80=8E"; }

.fa-search-minus::before { content: "=EF=80=90"; }

.fa-power-off::before { content: "=EF=80=91"; }

.fa-signal::before { content: "=EF=80=92"; }

.fa-cog::before, .fa-gear::before { content: "=EF=80=93"; }

.fa-trash-o::before { content: "=EF=80=94"; }

.fa-home::before, .icon-home::before { content: "=EF=80=95"; }

.fa-file-o::before { content: "=EF=80=96"; }

.fa-clock-o::before { content: "=EF=80=97"; }

.fa-road::before { content: "=EF=80=98"; }

.fa-download::before, .rst-content code.download span:first-child::before, =
.rst-content tt.download span:first-child::before { content: "=EF=80=99"; }

.fa-arrow-circle-o-down::before { content: "=EF=80=9A"; }

.fa-arrow-circle-o-up::before { content: "=EF=80=9B"; }

.fa-inbox::before { content: "=EF=80=9C"; }

.fa-play-circle-o::before { content: "=EF=80=9D"; }

.fa-repeat::before, .fa-rotate-right::before { content: "=EF=80=9E"; }

.fa-refresh::before { content: "=EF=80=A1"; }

.fa-list-alt::before { content: "=EF=80=A2"; }

.fa-lock::before { content: "=EF=80=A3"; }

.fa-flag::before { content: "=EF=80=A4"; }

.fa-headphones::before { content: "=EF=80=A5"; }

.fa-volume-off::before { content: "=EF=80=A6"; }

.fa-volume-down::before { content: "=EF=80=A7"; }

.fa-volume-up::before { content: "=EF=80=A8"; }

.fa-qrcode::before { content: "=EF=80=A9"; }

.fa-barcode::before { content: "=EF=80=AA"; }

.fa-tag::before { content: "=EF=80=AB"; }

.fa-tags::before { content: "=EF=80=AC"; }

.fa-book::before, .icon-book::before { content: "=EF=80=AD"; }

.fa-bookmark::before { content: "=EF=80=AE"; }

.fa-print::before { content: "=EF=80=AF"; }

.fa-camera::before { content: "=EF=80=B0"; }

.fa-font::before { content: "=EF=80=B1"; }

.fa-bold::before { content: "=EF=80=B2"; }

.fa-italic::before { content: "=EF=80=B3"; }

.fa-text-height::before { content: "=EF=80=B4"; }

.fa-text-width::before { content: "=EF=80=B5"; }

.fa-align-left::before { content: "=EF=80=B6"; }

.fa-align-center::before { content: "=EF=80=B7"; }

.fa-align-right::before { content: "=EF=80=B8"; }

.fa-align-justify::before { content: "=EF=80=B9"; }

.fa-list::before { content: "=EF=80=BA"; }

.fa-dedent::before, .fa-outdent::before { content: "=EF=80=BB"; }

.fa-indent::before { content: "=EF=80=BC"; }

.fa-video-camera::before { content: "=EF=80=BD"; }

.fa-image::before, .fa-photo::before, .fa-picture-o::before { content: "=EF=
=80=BE"; }

.fa-pencil::before { content: "=EF=81=80"; }

.fa-map-marker::before { content: "=EF=81=81"; }

.fa-adjust::before { content: "=EF=81=82"; }

.fa-tint::before { content: "=EF=81=83"; }

.fa-edit::before, .fa-pencil-square-o::before { content: "=EF=81=84"; }

.fa-share-square-o::before { content: "=EF=81=85"; }

.fa-check-square-o::before { content: "=EF=81=86"; }

.fa-arrows::before { content: "=EF=81=87"; }

.fa-step-backward::before { content: "=EF=81=88"; }

.fa-fast-backward::before { content: "=EF=81=89"; }

.fa-backward::before { content: "=EF=81=8A"; }

.fa-play::before { content: "=EF=81=8B"; }

.fa-pause::before { content: "=EF=81=8C"; }

.fa-stop::before { content: "=EF=81=8D"; }

.fa-forward::before { content: "=EF=81=8E"; }

.fa-fast-forward::before { content: "=EF=81=90"; }

.fa-step-forward::before { content: "=EF=81=91"; }

.fa-eject::before { content: "=EF=81=92"; }

.fa-chevron-left::before { content: "=EF=81=93"; }

.fa-chevron-right::before { content: "=EF=81=94"; }

.fa-plus-circle::before { content: "=EF=81=95"; }

.fa-minus-circle::before { content: "=EF=81=96"; }

.fa-times-circle::before, .wy-inline-validate.wy-inline-validate-danger .wy=
-input-context::before { content: "=EF=81=97"; }

.fa-check-circle::before, .wy-inline-validate.wy-inline-validate-success .w=
y-input-context::before { content: "=EF=81=98"; }

.fa-question-circle::before { content: "=EF=81=99"; }

.fa-info-circle::before { content: "=EF=81=9A"; }

.fa-crosshairs::before { content: "=EF=81=9B"; }

.fa-times-circle-o::before { content: "=EF=81=9C"; }

.fa-check-circle-o::before { content: "=EF=81=9D"; }

.fa-ban::before { content: "=EF=81=9E"; }

.fa-arrow-left::before { content: "=EF=81=A0"; }

.fa-arrow-right::before { content: "=EF=81=A1"; }

.fa-arrow-up::before { content: "=EF=81=A2"; }

.fa-arrow-down::before { content: "=EF=81=A3"; }

.fa-mail-forward::before, .fa-share::before { content: "=EF=81=A4"; }

.fa-expand::before { content: "=EF=81=A5"; }

.fa-compress::before { content: "=EF=81=A6"; }

.fa-plus::before { content: "=EF=81=A7"; }

.fa-minus::before { content: "=EF=81=A8"; }

.fa-asterisk::before { content: "=EF=81=A9"; }

.fa-exclamation-circle::before, .rst-content .admonition-title::before, .wy=
-inline-validate.wy-inline-validate-info .wy-input-context::before, .wy-inl=
ine-validate.wy-inline-validate-warning .wy-input-context::before { content=
: "=EF=81=AA"; }

.fa-gift::before { content: "=EF=81=AB"; }

.fa-leaf::before { content: "=EF=81=AC"; }

.fa-fire::before, .icon-fire::before { content: "=EF=81=AD"; }

.fa-eye::before { content: "=EF=81=AE"; }

.fa-eye-slash::before { content: "=EF=81=B0"; }

.fa-exclamation-triangle::before, .fa-warning::before { content: "=EF=81=B1=
"; }

.fa-plane::before { content: "=EF=81=B2"; }

.fa-calendar::before { content: "=EF=81=B3"; }

.fa-random::before { content: "=EF=81=B4"; }

.fa-comment::before { content: "=EF=81=B5"; }

.fa-magnet::before { content: "=EF=81=B6"; }

.fa-chevron-up::before { content: "=EF=81=B7"; }

.fa-chevron-down::before { content: "=EF=81=B8"; }

.fa-retweet::before { content: "=EF=81=B9"; }

.fa-shopping-cart::before { content: "=EF=81=BA"; }

.fa-folder::before { content: "=EF=81=BB"; }

.fa-folder-open::before { content: "=EF=81=BC"; }

.fa-arrows-v::before { content: "=EF=81=BD"; }

.fa-arrows-h::before { content: "=EF=81=BE"; }

.fa-bar-chart-o::before, .fa-bar-chart::before { content: "=EF=82=80"; }

.fa-twitter-square::before { content: "=EF=82=81"; }

.fa-facebook-square::before { content: "=EF=82=82"; }

.fa-camera-retro::before { content: "=EF=82=83"; }

.fa-key::before { content: "=EF=82=84"; }

.fa-cogs::before, .fa-gears::before { content: "=EF=82=85"; }

.fa-comments::before { content: "=EF=82=86"; }

.fa-thumbs-o-up::before { content: "=EF=82=87"; }

.fa-thumbs-o-down::before { content: "=EF=82=88"; }

.fa-star-half::before { content: "=EF=82=89"; }

.fa-heart-o::before { content: "=EF=82=8A"; }

.fa-sign-out::before { content: "=EF=82=8B"; }

.fa-linkedin-square::before { content: "=EF=82=8C"; }

.fa-thumb-tack::before { content: "=EF=82=8D"; }

.fa-external-link::before { content: "=EF=82=8E"; }

.fa-sign-in::before { content: "=EF=82=90"; }

.fa-trophy::before { content: "=EF=82=91"; }

.fa-github-square::before { content: "=EF=82=92"; }

.fa-upload::before { content: "=EF=82=93"; }

.fa-lemon-o::before { content: "=EF=82=94"; }

.fa-phone::before { content: "=EF=82=95"; }

.fa-square-o::before { content: "=EF=82=96"; }

.fa-bookmark-o::before { content: "=EF=82=97"; }

.fa-phone-square::before { content: "=EF=82=98"; }

.fa-twitter::before { content: "=EF=82=99"; }

.fa-facebook-f::before, .fa-facebook::before { content: "=EF=82=9A"; }

.fa-github::before, .icon-github::before { content: "=EF=82=9B"; }

.fa-unlock::before { content: "=EF=82=9C"; }

.fa-credit-card::before { content: "=EF=82=9D"; }

.fa-feed::before, .fa-rss::before { content: "=EF=82=9E"; }

.fa-hdd-o::before { content: "=EF=82=A0"; }

.fa-bullhorn::before { content: "=EF=82=A1"; }

.fa-bell::before { content: "=EF=83=B3"; }

.fa-certificate::before { content: "=EF=82=A3"; }

.fa-hand-o-right::before { content: "=EF=82=A4"; }

.fa-hand-o-left::before { content: "=EF=82=A5"; }

.fa-hand-o-up::before { content: "=EF=82=A6"; }

.fa-hand-o-down::before { content: "=EF=82=A7"; }

.fa-arrow-circle-left::before, .icon-circle-arrow-left::before { content: "=
=EF=82=A8"; }

.fa-arrow-circle-right::before, .icon-circle-arrow-right::before { content:=
 "=EF=82=A9"; }

.fa-arrow-circle-up::before { content: "=EF=82=AA"; }

.fa-arrow-circle-down::before { content: "=EF=82=AB"; }

.fa-globe::before { content: "=EF=82=AC"; }

.fa-wrench::before { content: "=EF=82=AD"; }

.fa-tasks::before { content: "=EF=82=AE"; }

.fa-filter::before { content: "=EF=82=B0"; }

.fa-briefcase::before { content: "=EF=82=B1"; }

.fa-arrows-alt::before { content: "=EF=82=B2"; }

.fa-group::before, .fa-users::before { content: "=EF=83=80"; }

.fa-chain::before, .fa-link::before, .icon-link::before { content: "=EF=83=
=81"; }

.fa-cloud::before { content: "=EF=83=82"; }

.fa-flask::before { content: "=EF=83=83"; }

.fa-cut::before, .fa-scissors::before { content: "=EF=83=84"; }

.fa-copy::before, .fa-files-o::before { content: "=EF=83=85"; }

.fa-paperclip::before { content: "=EF=83=86"; }

.fa-floppy-o::before, .fa-save::before { content: "=EF=83=87"; }

.fa-square::before { content: "=EF=83=88"; }

.fa-bars::before, .fa-navicon::before, .fa-reorder::before { content: "=EF=
=83=89"; }

.fa-list-ul::before { content: "=EF=83=8A"; }

.fa-list-ol::before { content: "=EF=83=8B"; }

.fa-strikethrough::before { content: "=EF=83=8C"; }

.fa-underline::before { content: "=EF=83=8D"; }

.fa-table::before { content: "=EF=83=8E"; }

.fa-magic::before { content: "=EF=83=90"; }

.fa-truck::before { content: "=EF=83=91"; }

.fa-pinterest::before { content: "=EF=83=92"; }

.fa-pinterest-square::before { content: "=EF=83=93"; }

.fa-google-plus-square::before { content: "=EF=83=94"; }

.fa-google-plus::before { content: "=EF=83=95"; }

.fa-money::before { content: "=EF=83=96"; }

.fa-caret-down::before, .icon-caret-down::before, .wy-dropdown .caret::befo=
re { content: "=EF=83=97"; }

.fa-caret-up::before { content: "=EF=83=98"; }

.fa-caret-left::before { content: "=EF=83=99"; }

.fa-caret-right::before { content: "=EF=83=9A"; }

.fa-columns::before { content: "=EF=83=9B"; }

.fa-sort::before, .fa-unsorted::before { content: "=EF=83=9C"; }

.fa-sort-desc::before, .fa-sort-down::before { content: "=EF=83=9D"; }

.fa-sort-asc::before, .fa-sort-up::before { content: "=EF=83=9E"; }

.fa-envelope::before { content: "=EF=83=A0"; }

.fa-linkedin::before { content: "=EF=83=A1"; }

.fa-rotate-left::before, .fa-undo::before { content: "=EF=83=A2"; }

.fa-gavel::before, .fa-legal::before { content: "=EF=83=A3"; }

.fa-dashboard::before, .fa-tachometer::before { content: "=EF=83=A4"; }

.fa-comment-o::before { content: "=EF=83=A5"; }

.fa-comments-o::before { content: "=EF=83=A6"; }

.fa-bolt::before, .fa-flash::before { content: "=EF=83=A7"; }

.fa-sitemap::before { content: "=EF=83=A8"; }

.fa-umbrella::before { content: "=EF=83=A9"; }

.fa-clipboard::before, .fa-paste::before { content: "=EF=83=AA"; }

.fa-lightbulb-o::before { content: "=EF=83=AB"; }

.fa-exchange::before { content: "=EF=83=AC"; }

.fa-cloud-download::before { content: "=EF=83=AD"; }

.fa-cloud-upload::before { content: "=EF=83=AE"; }

.fa-user-md::before { content: "=EF=83=B0"; }

.fa-stethoscope::before { content: "=EF=83=B1"; }

.fa-suitcase::before { content: "=EF=83=B2"; }

.fa-bell-o::before { content: "=EF=82=A2"; }

.fa-coffee::before { content: "=EF=83=B4"; }

.fa-cutlery::before { content: "=EF=83=B5"; }

.fa-file-text-o::before { content: "=EF=83=B6"; }

.fa-building-o::before { content: "=EF=83=B7"; }

.fa-hospital-o::before { content: "=EF=83=B8"; }

.fa-ambulance::before { content: "=EF=83=B9"; }

.fa-medkit::before { content: "=EF=83=BA"; }

.fa-fighter-jet::before { content: "=EF=83=BB"; }

.fa-beer::before { content: "=EF=83=BC"; }

.fa-h-square::before { content: "=EF=83=BD"; }

.fa-plus-square::before { content: "=EF=83=BE"; }

.fa-angle-double-left::before { content: "=EF=84=80"; }

.fa-angle-double-right::before { content: "=EF=84=81"; }

.fa-angle-double-up::before { content: "=EF=84=82"; }

.fa-angle-double-down::before { content: "=EF=84=83"; }

.fa-angle-left::before { content: "=EF=84=84"; }

.fa-angle-right::before { content: "=EF=84=85"; }

.fa-angle-up::before { content: "=EF=84=86"; }

.fa-angle-down::before { content: "=EF=84=87"; }

.fa-desktop::before { content: "=EF=84=88"; }

.fa-laptop::before { content: "=EF=84=89"; }

.fa-tablet::before { content: "=EF=84=8A"; }

.fa-mobile-phone::before, .fa-mobile::before { content: "=EF=84=8B"; }

.fa-circle-o::before { content: "=EF=84=8C"; }

.fa-quote-left::before { content: "=EF=84=8D"; }

.fa-quote-right::before { content: "=EF=84=8E"; }

.fa-spinner::before { content: "=EF=84=90"; }

.fa-circle::before { content: "=EF=84=91"; }

.fa-mail-reply::before, .fa-reply::before { content: "=EF=84=92"; }

.fa-github-alt::before { content: "=EF=84=93"; }

.fa-folder-o::before { content: "=EF=84=94"; }

.fa-folder-open-o::before { content: "=EF=84=95"; }

.fa-smile-o::before { content: "=EF=84=98"; }

.fa-frown-o::before { content: "=EF=84=99"; }

.fa-meh-o::before { content: "=EF=84=9A"; }

.fa-gamepad::before { content: "=EF=84=9B"; }

.fa-keyboard-o::before { content: "=EF=84=9C"; }

.fa-flag-o::before { content: "=EF=84=9D"; }

.fa-flag-checkered::before { content: "=EF=84=9E"; }

.fa-terminal::before { content: "=EF=84=A0"; }

.fa-code::before { content: "=EF=84=A1"; }

.fa-mail-reply-all::before, .fa-reply-all::before { content: "=EF=84=A2"; }

.fa-star-half-empty::before, .fa-star-half-full::before, .fa-star-half-o::b=
efore { content: "=EF=84=A3"; }

.fa-location-arrow::before { content: "=EF=84=A4"; }

.fa-crop::before { content: "=EF=84=A5"; }

.fa-code-fork::before { content: "=EF=84=A6"; }

.fa-chain-broken::before, .fa-unlink::before { content: "=EF=84=A7"; }

.fa-question::before { content: "=EF=84=A8"; }

.fa-info::before { content: "=EF=84=A9"; }

.fa-exclamation::before { content: "=EF=84=AA"; }

.fa-superscript::before { content: "=EF=84=AB"; }

.fa-subscript::before { content: "=EF=84=AC"; }

.fa-eraser::before { content: "=EF=84=AD"; }

.fa-puzzle-piece::before { content: "=EF=84=AE"; }

.fa-microphone::before { content: "=EF=84=B0"; }

.fa-microphone-slash::before { content: "=EF=84=B1"; }

.fa-shield::before { content: "=EF=84=B2"; }

.fa-calendar-o::before { content: "=EF=84=B3"; }

.fa-fire-extinguisher::before { content: "=EF=84=B4"; }

.fa-rocket::before { content: "=EF=84=B5"; }

.fa-maxcdn::before { content: "=EF=84=B6"; }

.fa-chevron-circle-left::before { content: "=EF=84=B7"; }

.fa-chevron-circle-right::before { content: "=EF=84=B8"; }

.fa-chevron-circle-up::before { content: "=EF=84=B9"; }

.fa-chevron-circle-down::before { content: "=EF=84=BA"; }

.fa-html5::before { content: "=EF=84=BB"; }

.fa-css3::before { content: "=EF=84=BC"; }

.fa-anchor::before { content: "=EF=84=BD"; }

.fa-unlock-alt::before { content: "=EF=84=BE"; }

.fa-bullseye::before { content: "=EF=85=80"; }

.fa-ellipsis-h::before { content: "=EF=85=81"; }

.fa-ellipsis-v::before { content: "=EF=85=82"; }

.fa-rss-square::before { content: "=EF=85=83"; }

.fa-play-circle::before { content: "=EF=85=84"; }

.fa-ticket::before { content: "=EF=85=85"; }

.fa-minus-square::before { content: "=EF=85=86"; }

.fa-minus-square-o::before, .wy-menu-vertical li.current > a button.toctree=
-expand::before, .wy-menu-vertical li.on a button.toctree-expand::before { =
content: "=EF=85=87"; }

.fa-level-up::before { content: "=EF=85=88"; }

.fa-level-down::before { content: "=EF=85=89"; }

.fa-check-square::before { content: "=EF=85=8A"; }

.fa-pencil-square::before { content: "=EF=85=8B"; }

.fa-external-link-square::before { content: "=EF=85=8C"; }

.fa-share-square::before { content: "=EF=85=8D"; }

.fa-compass::before { content: "=EF=85=8E"; }

.fa-caret-square-o-down::before, .fa-toggle-down::before { content: "=EF=85=
=90"; }

.fa-caret-square-o-up::before, .fa-toggle-up::before { content: "=EF=85=91"=
; }

.fa-caret-square-o-right::before, .fa-toggle-right::before { content: "=EF=
=85=92"; }

.fa-eur::before, .fa-euro::before { content: "=EF=85=93"; }

.fa-gbp::before { content: "=EF=85=94"; }

.fa-dollar::before, .fa-usd::before { content: "=EF=85=95"; }

.fa-inr::before, .fa-rupee::before { content: "=EF=85=96"; }

.fa-cny::before, .fa-jpy::before, .fa-rmb::before, .fa-yen::before { conten=
t: "=EF=85=97"; }

.fa-rouble::before, .fa-rub::before, .fa-ruble::before { content: "=EF=85=
=98"; }

.fa-krw::before, .fa-won::before { content: "=EF=85=99"; }

.fa-bitcoin::before, .fa-btc::before { content: "=EF=85=9A"; }

.fa-file::before { content: "=EF=85=9B"; }

.fa-file-text::before { content: "=EF=85=9C"; }

.fa-sort-alpha-asc::before { content: "=EF=85=9D"; }

.fa-sort-alpha-desc::before { content: "=EF=85=9E"; }

.fa-sort-amount-asc::before { content: "=EF=85=A0"; }

.fa-sort-amount-desc::before { content: "=EF=85=A1"; }

.fa-sort-numeric-asc::before { content: "=EF=85=A2"; }

.fa-sort-numeric-desc::before { content: "=EF=85=A3"; }

.fa-thumbs-up::before { content: "=EF=85=A4"; }

.fa-thumbs-down::before { content: "=EF=85=A5"; }

.fa-youtube-square::before { content: "=EF=85=A6"; }

.fa-youtube::before { content: "=EF=85=A7"; }

.fa-xing::before { content: "=EF=85=A8"; }

.fa-xing-square::before { content: "=EF=85=A9"; }

.fa-youtube-play::before { content: "=EF=85=AA"; }

.fa-dropbox::before { content: "=EF=85=AB"; }

.fa-stack-overflow::before { content: "=EF=85=AC"; }

.fa-instagram::before { content: "=EF=85=AD"; }

.fa-flickr::before { content: "=EF=85=AE"; }

.fa-adn::before { content: "=EF=85=B0"; }

.fa-bitbucket::before, .icon-bitbucket::before { content: "=EF=85=B1"; }

.fa-bitbucket-square::before { content: "=EF=85=B2"; }

.fa-tumblr::before { content: "=EF=85=B3"; }

.fa-tumblr-square::before { content: "=EF=85=B4"; }

.fa-long-arrow-down::before { content: "=EF=85=B5"; }

.fa-long-arrow-up::before { content: "=EF=85=B6"; }

.fa-long-arrow-left::before { content: "=EF=85=B7"; }

.fa-long-arrow-right::before { content: "=EF=85=B8"; }

.fa-apple::before { content: "=EF=85=B9"; }

.fa-windows::before { content: "=EF=85=BA"; }

.fa-android::before { content: "=EF=85=BB"; }

.fa-linux::before { content: "=EF=85=BC"; }

.fa-dribbble::before { content: "=EF=85=BD"; }

.fa-skype::before { content: "=EF=85=BE"; }

.fa-foursquare::before { content: "=EF=86=80"; }

.fa-trello::before { content: "=EF=86=81"; }

.fa-female::before { content: "=EF=86=82"; }

.fa-male::before { content: "=EF=86=83"; }

.fa-gittip::before, .fa-gratipay::before { content: "=EF=86=84"; }

.fa-sun-o::before { content: "=EF=86=85"; }

.fa-moon-o::before { content: "=EF=86=86"; }

.fa-archive::before { content: "=EF=86=87"; }

.fa-bug::before { content: "=EF=86=88"; }

.fa-vk::before { content: "=EF=86=89"; }

.fa-weibo::before { content: "=EF=86=8A"; }

.fa-renren::before { content: "=EF=86=8B"; }

.fa-pagelines::before { content: "=EF=86=8C"; }

.fa-stack-exchange::before { content: "=EF=86=8D"; }

.fa-arrow-circle-o-right::before { content: "=EF=86=8E"; }

.fa-arrow-circle-o-left::before { content: "=EF=86=90"; }

.fa-caret-square-o-left::before, .fa-toggle-left::before { content: "=EF=86=
=91"; }

.fa-dot-circle-o::before { content: "=EF=86=92"; }

.fa-wheelchair::before { content: "=EF=86=93"; }

.fa-vimeo-square::before { content: "=EF=86=94"; }

.fa-try::before, .fa-turkish-lira::before { content: "=EF=86=95"; }

.fa-plus-square-o::before, .wy-menu-vertical li button.toctree-expand::befo=
re { content: "=EF=86=96"; }

.fa-space-shuttle::before { content: "=EF=86=97"; }

.fa-slack::before { content: "=EF=86=98"; }

.fa-envelope-square::before { content: "=EF=86=99"; }

.fa-wordpress::before { content: "=EF=86=9A"; }

.fa-openid::before { content: "=EF=86=9B"; }

.fa-bank::before, .fa-institution::before, .fa-university::before { content=
: "=EF=86=9C"; }

.fa-graduation-cap::before, .fa-mortar-board::before { content: "=EF=86=9D"=
; }

.fa-yahoo::before { content: "=EF=86=9E"; }

.fa-google::before { content: "=EF=86=A0"; }

.fa-reddit::before { content: "=EF=86=A1"; }

.fa-reddit-square::before { content: "=EF=86=A2"; }

.fa-stumbleupon-circle::before { content: "=EF=86=A3"; }

.fa-stumbleupon::before { content: "=EF=86=A4"; }

.fa-delicious::before { content: "=EF=86=A5"; }

.fa-digg::before { content: "=EF=86=A6"; }

.fa-pied-piper-pp::before { content: "=EF=86=A7"; }

.fa-pied-piper-alt::before { content: "=EF=86=A8"; }

.fa-drupal::before { content: "=EF=86=A9"; }

.fa-joomla::before { content: "=EF=86=AA"; }

.fa-language::before { content: "=EF=86=AB"; }

.fa-fax::before { content: "=EF=86=AC"; }

.fa-building::before { content: "=EF=86=AD"; }

.fa-child::before { content: "=EF=86=AE"; }

.fa-paw::before { content: "=EF=86=B0"; }

.fa-spoon::before { content: "=EF=86=B1"; }

.fa-cube::before { content: "=EF=86=B2"; }

.fa-cubes::before { content: "=EF=86=B3"; }

.fa-behance::before { content: "=EF=86=B4"; }

.fa-behance-square::before { content: "=EF=86=B5"; }

.fa-steam::before { content: "=EF=86=B6"; }

.fa-steam-square::before { content: "=EF=86=B7"; }

.fa-recycle::before { content: "=EF=86=B8"; }

.fa-automobile::before, .fa-car::before { content: "=EF=86=B9"; }

.fa-cab::before, .fa-taxi::before { content: "=EF=86=BA"; }

.fa-tree::before { content: "=EF=86=BB"; }

.fa-spotify::before { content: "=EF=86=BC"; }

.fa-deviantart::before { content: "=EF=86=BD"; }

.fa-soundcloud::before { content: "=EF=86=BE"; }

.fa-database::before { content: "=EF=87=80"; }

.fa-file-pdf-o::before { content: "=EF=87=81"; }

.fa-file-word-o::before { content: "=EF=87=82"; }

.fa-file-excel-o::before { content: "=EF=87=83"; }

.fa-file-powerpoint-o::before { content: "=EF=87=84"; }

.fa-file-image-o::before, .fa-file-photo-o::before, .fa-file-picture-o::bef=
ore { content: "=EF=87=85"; }

.fa-file-archive-o::before, .fa-file-zip-o::before { content: "=EF=87=86"; =
}

.fa-file-audio-o::before, .fa-file-sound-o::before { content: "=EF=87=87"; =
}

.fa-file-movie-o::before, .fa-file-video-o::before { content: "=EF=87=88"; =
}

.fa-file-code-o::before { content: "=EF=87=89"; }

.fa-vine::before { content: "=EF=87=8A"; }

.fa-codepen::before { content: "=EF=87=8B"; }

.fa-jsfiddle::before { content: "=EF=87=8C"; }

.fa-life-bouy::before, .fa-life-buoy::before, .fa-life-ring::before, .fa-li=
fe-saver::before, .fa-support::before { content: "=EF=87=8D"; }

.fa-circle-o-notch::before { content: "=EF=87=8E"; }

.fa-ra::before, .fa-rebel::before, .fa-resistance::before { content: "=EF=
=87=90"; }

.fa-empire::before, .fa-ge::before { content: "=EF=87=91"; }

.fa-git-square::before { content: "=EF=87=92"; }

.fa-git::before { content: "=EF=87=93"; }

.fa-hacker-news::before, .fa-y-combinator-square::before, .fa-yc-square::be=
fore { content: "=EF=87=94"; }

.fa-tencent-weibo::before { content: "=EF=87=95"; }

.fa-qq::before { content: "=EF=87=96"; }

.fa-wechat::before, .fa-weixin::before { content: "=EF=87=97"; }

.fa-paper-plane::before, .fa-send::before { content: "=EF=87=98"; }

.fa-paper-plane-o::before, .fa-send-o::before { content: "=EF=87=99"; }

.fa-history::before { content: "=EF=87=9A"; }

.fa-circle-thin::before { content: "=EF=87=9B"; }

.fa-header::before { content: "=EF=87=9C"; }

.fa-paragraph::before { content: "=EF=87=9D"; }

.fa-sliders::before { content: "=EF=87=9E"; }

.fa-share-alt::before { content: "=EF=87=A0"; }

.fa-share-alt-square::before { content: "=EF=87=A1"; }

.fa-bomb::before { content: "=EF=87=A2"; }

.fa-futbol-o::before, .fa-soccer-ball-o::before { content: "=EF=87=A3"; }

.fa-tty::before { content: "=EF=87=A4"; }

.fa-binoculars::before { content: "=EF=87=A5"; }

.fa-plug::before { content: "=EF=87=A6"; }

.fa-slideshare::before { content: "=EF=87=A7"; }

.fa-twitch::before { content: "=EF=87=A8"; }

.fa-yelp::before { content: "=EF=87=A9"; }

.fa-newspaper-o::before { content: "=EF=87=AA"; }

.fa-wifi::before { content: "=EF=87=AB"; }

.fa-calculator::before { content: "=EF=87=AC"; }

.fa-paypal::before { content: "=EF=87=AD"; }

.fa-google-wallet::before { content: "=EF=87=AE"; }

.fa-cc-visa::before { content: "=EF=87=B0"; }

.fa-cc-mastercard::before { content: "=EF=87=B1"; }

.fa-cc-discover::before { content: "=EF=87=B2"; }

.fa-cc-amex::before { content: "=EF=87=B3"; }

.fa-cc-paypal::before { content: "=EF=87=B4"; }

.fa-cc-stripe::before { content: "=EF=87=B5"; }

.fa-bell-slash::before { content: "=EF=87=B6"; }

.fa-bell-slash-o::before { content: "=EF=87=B7"; }

.fa-trash::before { content: "=EF=87=B8"; }

.fa-copyright::before { content: "=EF=87=B9"; }

.fa-at::before { content: "=EF=87=BA"; }

.fa-eyedropper::before { content: "=EF=87=BB"; }

.fa-paint-brush::before { content: "=EF=87=BC"; }

.fa-birthday-cake::before { content: "=EF=87=BD"; }

.fa-area-chart::before { content: "=EF=87=BE"; }

.fa-pie-chart::before { content: "=EF=88=80"; }

.fa-line-chart::before { content: "=EF=88=81"; }

.fa-lastfm::before { content: "=EF=88=82"; }

.fa-lastfm-square::before { content: "=EF=88=83"; }

.fa-toggle-off::before { content: "=EF=88=84"; }

.fa-toggle-on::before { content: "=EF=88=85"; }

.fa-bicycle::before { content: "=EF=88=86"; }

.fa-bus::before { content: "=EF=88=87"; }

.fa-ioxhost::before { content: "=EF=88=88"; }

.fa-angellist::before { content: "=EF=88=89"; }

.fa-cc::before { content: "=EF=88=8A"; }

.fa-ils::before, .fa-shekel::before, .fa-sheqel::before { content: "=EF=88=
=8B"; }

.fa-meanpath::before { content: "=EF=88=8C"; }

.fa-buysellads::before { content: "=EF=88=8D"; }

.fa-connectdevelop::before { content: "=EF=88=8E"; }

.fa-dashcube::before { content: "=EF=88=90"; }

.fa-forumbee::before { content: "=EF=88=91"; }

.fa-leanpub::before { content: "=EF=88=92"; }

.fa-sellsy::before { content: "=EF=88=93"; }

.fa-shirtsinbulk::before { content: "=EF=88=94"; }

.fa-simplybuilt::before { content: "=EF=88=95"; }

.fa-skyatlas::before { content: "=EF=88=96"; }

.fa-cart-plus::before { content: "=EF=88=97"; }

.fa-cart-arrow-down::before { content: "=EF=88=98"; }

.fa-diamond::before { content: "=EF=88=99"; }

.fa-ship::before { content: "=EF=88=9A"; }

.fa-user-secret::before { content: "=EF=88=9B"; }

.fa-motorcycle::before { content: "=EF=88=9C"; }

.fa-street-view::before { content: "=EF=88=9D"; }

.fa-heartbeat::before { content: "=EF=88=9E"; }

.fa-venus::before { content: "=EF=88=A1"; }

.fa-mars::before { content: "=EF=88=A2"; }

.fa-mercury::before { content: "=EF=88=A3"; }

.fa-intersex::before, .fa-transgender::before { content: "=EF=88=A4"; }

.fa-transgender-alt::before { content: "=EF=88=A5"; }

.fa-venus-double::before { content: "=EF=88=A6"; }

.fa-mars-double::before { content: "=EF=88=A7"; }

.fa-venus-mars::before { content: "=EF=88=A8"; }

.fa-mars-stroke::before { content: "=EF=88=A9"; }

.fa-mars-stroke-v::before { content: "=EF=88=AA"; }

.fa-mars-stroke-h::before { content: "=EF=88=AB"; }

.fa-neuter::before { content: "=EF=88=AC"; }

.fa-genderless::before { content: "=EF=88=AD"; }

.fa-facebook-official::before { content: "=EF=88=B0"; }

.fa-pinterest-p::before { content: "=EF=88=B1"; }

.fa-whatsapp::before { content: "=EF=88=B2"; }

.fa-server::before { content: "=EF=88=B3"; }

.fa-user-plus::before { content: "=EF=88=B4"; }

.fa-user-times::before { content: "=EF=88=B5"; }

.fa-bed::before, .fa-hotel::before { content: "=EF=88=B6"; }

.fa-viacoin::before { content: "=EF=88=B7"; }

.fa-train::before { content: "=EF=88=B8"; }

.fa-subway::before { content: "=EF=88=B9"; }

.fa-medium::before { content: "=EF=88=BA"; }

.fa-y-combinator::before, .fa-yc::before { content: "=EF=88=BB"; }

.fa-optin-monster::before { content: "=EF=88=BC"; }

.fa-opencart::before { content: "=EF=88=BD"; }

.fa-expeditedssl::before { content: "=EF=88=BE"; }

.fa-battery-4::before, .fa-battery-full::before, .fa-battery::before { cont=
ent: "=EF=89=80"; }

.fa-battery-3::before, .fa-battery-three-quarters::before { content: "=EF=
=89=81"; }

.fa-battery-2::before, .fa-battery-half::before { content: "=EF=89=82"; }

.fa-battery-1::before, .fa-battery-quarter::before { content: "=EF=89=83"; =
}

.fa-battery-0::before, .fa-battery-empty::before { content: "=EF=89=84"; }

.fa-mouse-pointer::before { content: "=EF=89=85"; }

.fa-i-cursor::before { content: "=EF=89=86"; }

.fa-object-group::before { content: "=EF=89=87"; }

.fa-object-ungroup::before { content: "=EF=89=88"; }

.fa-sticky-note::before { content: "=EF=89=89"; }

.fa-sticky-note-o::before { content: "=EF=89=8A"; }

.fa-cc-jcb::before { content: "=EF=89=8B"; }

.fa-cc-diners-club::before { content: "=EF=89=8C"; }

.fa-clone::before { content: "=EF=89=8D"; }

.fa-balance-scale::before { content: "=EF=89=8E"; }

.fa-hourglass-o::before { content: "=EF=89=90"; }

.fa-hourglass-1::before, .fa-hourglass-start::before { content: "=EF=89=91"=
; }

.fa-hourglass-2::before, .fa-hourglass-half::before { content: "=EF=89=92";=
 }

.fa-hourglass-3::before, .fa-hourglass-end::before { content: "=EF=89=93"; =
}

.fa-hourglass::before { content: "=EF=89=94"; }

.fa-hand-grab-o::before, .fa-hand-rock-o::before { content: "=EF=89=95"; }

.fa-hand-paper-o::before, .fa-hand-stop-o::before { content: "=EF=89=96"; }

.fa-hand-scissors-o::before { content: "=EF=89=97"; }

.fa-hand-lizard-o::before { content: "=EF=89=98"; }

.fa-hand-spock-o::before { content: "=EF=89=99"; }

.fa-hand-pointer-o::before { content: "=EF=89=9A"; }

.fa-hand-peace-o::before { content: "=EF=89=9B"; }

.fa-trademark::before { content: "=EF=89=9C"; }

.fa-registered::before { content: "=EF=89=9D"; }

.fa-creative-commons::before { content: "=EF=89=9E"; }

.fa-gg::before { content: "=EF=89=A0"; }

.fa-gg-circle::before { content: "=EF=89=A1"; }

.fa-tripadvisor::before { content: "=EF=89=A2"; }

.fa-odnoklassniki::before { content: "=EF=89=A3"; }

.fa-odnoklassniki-square::before { content: "=EF=89=A4"; }

.fa-get-pocket::before { content: "=EF=89=A5"; }

.fa-wikipedia-w::before { content: "=EF=89=A6"; }

.fa-safari::before { content: "=EF=89=A7"; }

.fa-chrome::before { content: "=EF=89=A8"; }

.fa-firefox::before { content: "=EF=89=A9"; }

.fa-opera::before { content: "=EF=89=AA"; }

.fa-internet-explorer::before { content: "=EF=89=AB"; }

.fa-television::before, .fa-tv::before { content: "=EF=89=AC"; }

.fa-contao::before { content: "=EF=89=AD"; }

.fa-500px::before { content: "=EF=89=AE"; }

.fa-amazon::before { content: "=EF=89=B0"; }

.fa-calendar-plus-o::before { content: "=EF=89=B1"; }

.fa-calendar-minus-o::before { content: "=EF=89=B2"; }

.fa-calendar-times-o::before { content: "=EF=89=B3"; }

.fa-calendar-check-o::before { content: "=EF=89=B4"; }

.fa-industry::before { content: "=EF=89=B5"; }

.fa-map-pin::before { content: "=EF=89=B6"; }

.fa-map-signs::before { content: "=EF=89=B7"; }

.fa-map-o::before { content: "=EF=89=B8"; }

.fa-map::before { content: "=EF=89=B9"; }

.fa-commenting::before { content: "=EF=89=BA"; }

.fa-commenting-o::before { content: "=EF=89=BB"; }

.fa-houzz::before { content: "=EF=89=BC"; }

.fa-vimeo::before { content: "=EF=89=BD"; }

.fa-black-tie::before { content: "=EF=89=BE"; }

.fa-fonticons::before { content: "=EF=8A=80"; }

.fa-reddit-alien::before { content: "=EF=8A=81"; }

.fa-edge::before { content: "=EF=8A=82"; }

.fa-credit-card-alt::before { content: "=EF=8A=83"; }

.fa-codiepie::before { content: "=EF=8A=84"; }

.fa-modx::before { content: "=EF=8A=85"; }

.fa-fort-awesome::before { content: "=EF=8A=86"; }

.fa-usb::before { content: "=EF=8A=87"; }

.fa-product-hunt::before { content: "=EF=8A=88"; }

.fa-mixcloud::before { content: "=EF=8A=89"; }

.fa-scribd::before { content: "=EF=8A=8A"; }

.fa-pause-circle::before { content: "=EF=8A=8B"; }

.fa-pause-circle-o::before { content: "=EF=8A=8C"; }

.fa-stop-circle::before { content: "=EF=8A=8D"; }

.fa-stop-circle-o::before { content: "=EF=8A=8E"; }

.fa-shopping-bag::before { content: "=EF=8A=90"; }

.fa-shopping-basket::before { content: "=EF=8A=91"; }

.fa-hashtag::before { content: "=EF=8A=92"; }

.fa-bluetooth::before { content: "=EF=8A=93"; }

.fa-bluetooth-b::before { content: "=EF=8A=94"; }

.fa-percent::before { content: "=EF=8A=95"; }

.fa-gitlab::before, .icon-gitlab::before { content: "=EF=8A=96"; }

.fa-wpbeginner::before { content: "=EF=8A=97"; }

.fa-wpforms::before { content: "=EF=8A=98"; }

.fa-envira::before { content: "=EF=8A=99"; }

.fa-universal-access::before { content: "=EF=8A=9A"; }

.fa-wheelchair-alt::before { content: "=EF=8A=9B"; }

.fa-question-circle-o::before { content: "=EF=8A=9C"; }

.fa-blind::before { content: "=EF=8A=9D"; }

.fa-audio-description::before { content: "=EF=8A=9E"; }

.fa-volume-control-phone::before { content: "=EF=8A=A0"; }

.fa-braille::before { content: "=EF=8A=A1"; }

.fa-assistive-listening-systems::before { content: "=EF=8A=A2"; }

.fa-american-sign-language-interpreting::before, .fa-asl-interpreting::befo=
re { content: "=EF=8A=A3"; }

.fa-deaf::before, .fa-deafness::before, .fa-hard-of-hearing::before { conte=
nt: "=EF=8A=A4"; }

.fa-glide::before { content: "=EF=8A=A5"; }

.fa-glide-g::before { content: "=EF=8A=A6"; }

.fa-sign-language::before, .fa-signing::before { content: "=EF=8A=A7"; }

.fa-low-vision::before { content: "=EF=8A=A8"; }

.fa-viadeo::before { content: "=EF=8A=A9"; }

.fa-viadeo-square::before { content: "=EF=8A=AA"; }

.fa-snapchat::before { content: "=EF=8A=AB"; }

.fa-snapchat-ghost::before { content: "=EF=8A=AC"; }

.fa-snapchat-square::before { content: "=EF=8A=AD"; }

.fa-pied-piper::before { content: "=EF=8A=AE"; }

.fa-first-order::before { content: "=EF=8A=B0"; }

.fa-yoast::before { content: "=EF=8A=B1"; }

.fa-themeisle::before { content: "=EF=8A=B2"; }

.fa-google-plus-circle::before, .fa-google-plus-official::before { content:=
 "=EF=8A=B3"; }

.fa-fa::before, .fa-font-awesome::before { content: "=EF=8A=B4"; }

.fa-handshake-o::before { content: "=EF=8A=B5"; }

.fa-envelope-open::before { content: "=EF=8A=B6"; }

.fa-envelope-open-o::before { content: "=EF=8A=B7"; }

.fa-linode::before { content: "=EF=8A=B8"; }

.fa-address-book::before { content: "=EF=8A=B9"; }

.fa-address-book-o::before { content: "=EF=8A=BA"; }

.fa-address-card::before, .fa-vcard::before { content: "=EF=8A=BB"; }

.fa-address-card-o::before, .fa-vcard-o::before { content: "=EF=8A=BC"; }

.fa-user-circle::before { content: "=EF=8A=BD"; }

.fa-user-circle-o::before { content: "=EF=8A=BE"; }

.fa-user-o::before { content: "=EF=8B=80"; }

.fa-id-badge::before { content: "=EF=8B=81"; }

.fa-drivers-license::before, .fa-id-card::before { content: "=EF=8B=82"; }

.fa-drivers-license-o::before, .fa-id-card-o::before { content: "=EF=8B=83"=
; }

.fa-quora::before { content: "=EF=8B=84"; }

.fa-free-code-camp::before { content: "=EF=8B=85"; }

.fa-telegram::before { content: "=EF=8B=86"; }

.fa-thermometer-4::before, .fa-thermometer-full::before, .fa-thermometer::b=
efore { content: "=EF=8B=87"; }

.fa-thermometer-3::before, .fa-thermometer-three-quarters::before { content=
: "=EF=8B=88"; }

.fa-thermometer-2::before, .fa-thermometer-half::before { content: "=EF=8B=
=89"; }

.fa-thermometer-1::before, .fa-thermometer-quarter::before { content: "=EF=
=8B=8A"; }

.fa-thermometer-0::before, .fa-thermometer-empty::before { content: "=EF=8B=
=8B"; }

.fa-shower::before { content: "=EF=8B=8C"; }

.fa-bath::before, .fa-bathtub::before, .fa-s15::before { content: "=EF=8B=
=8D"; }

.fa-podcast::before { content: "=EF=8B=8E"; }

.fa-window-maximize::before { content: "=EF=8B=90"; }

.fa-window-minimize::before { content: "=EF=8B=91"; }

.fa-window-restore::before { content: "=EF=8B=92"; }

.fa-times-rectangle::before, .fa-window-close::before { content: "=EF=8B=93=
"; }

.fa-times-rectangle-o::before, .fa-window-close-o::before { content: "=EF=
=8B=94"; }

.fa-bandcamp::before { content: "=EF=8B=95"; }

.fa-grav::before { content: "=EF=8B=96"; }

.fa-etsy::before { content: "=EF=8B=97"; }

.fa-imdb::before { content: "=EF=8B=98"; }

.fa-ravelry::before { content: "=EF=8B=99"; }

.fa-eercast::before { content: "=EF=8B=9A"; }

.fa-microchip::before { content: "=EF=8B=9B"; }

.fa-snowflake-o::before { content: "=EF=8B=9C"; }

.fa-superpowers::before { content: "=EF=8B=9D"; }

.fa-wpexplorer::before { content: "=EF=8B=9E"; }

.fa-meetup::before { content: "=EF=8B=A0"; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }

.fa, .icon, .rst-content .admonition-title, .rst-content .code-block-captio=
n .headerlink, .rst-content .eqno .headerlink, .rst-content code.download s=
pan:first-child, .rst-content dl dt .headerlink, .rst-content h1 .headerlin=
k, .rst-content h2 .headerlink, .rst-content h3 .headerlink, .rst-content h=
4 .headerlink, .rst-content h5 .headerlink, .rst-content h6 .headerlink, .r=
st-content p.caption .headerlink, .rst-content p .headerlink, .rst-content =
table > caption .headerlink, .rst-content tt.download span:first-child, .wy=
-dropdown .caret, .wy-inline-validate.wy-inline-validate-danger .wy-input-c=
ontext, .wy-inline-validate.wy-inline-validate-info .wy-input-context, .wy-=
inline-validate.wy-inline-validate-success .wy-input-context, .wy-inline-va=
lidate.wy-inline-validate-warning .wy-input-context, .wy-menu-vertical li.c=
urrent > a button.toctree-expand, .wy-menu-vertical li.on a button.toctree-=
expand, .wy-menu-vertical li button.toctree-expand { font-family: inherit; =
}

.fa::before, .icon::before, .rst-content .admonition-title::before, .rst-co=
ntent .code-block-caption .headerlink::before, .rst-content .eqno .headerli=
nk::before, .rst-content code.download span:first-child::before, .rst-conte=
nt dl dt .headerlink::before, .rst-content h1 .headerlink::before, .rst-con=
tent h2 .headerlink::before, .rst-content h3 .headerlink::before, .rst-cont=
ent h4 .headerlink::before, .rst-content h5 .headerlink::before, .rst-conte=
nt h6 .headerlink::before, .rst-content p.caption .headerlink::before, .rst=
-content p .headerlink::before, .rst-content table > caption .headerlink::b=
efore, .rst-content tt.download span:first-child::before, .wy-dropdown .car=
et::before, .wy-inline-validate.wy-inline-validate-danger .wy-input-context=
::before, .wy-inline-validate.wy-inline-validate-info .wy-input-context::be=
fore, .wy-inline-validate.wy-inline-validate-success .wy-input-context::bef=
ore, .wy-inline-validate.wy-inline-validate-warning .wy-input-context::befo=
re, .wy-menu-vertical li.current > a button.toctree-expand::before, .wy-men=
u-vertical li.on a button.toctree-expand::before, .wy-menu-vertical li butt=
on.toctree-expand::before { font-family: FontAwesome; display: inline-block=
; font-style: normal; font-weight: 400; line-height: 1; text-decoration: in=
herit; }

.rst-content .code-block-caption a .headerlink, .rst-content .eqno a .heade=
rlink, .rst-content a .admonition-title, .rst-content code.download a span:=
first-child, .rst-content dl dt a .headerlink, .rst-content h1 a .headerlin=
k, .rst-content h2 a .headerlink, .rst-content h3 a .headerlink, .rst-conte=
nt h4 a .headerlink, .rst-content h5 a .headerlink, .rst-content h6 a .head=
erlink, .rst-content p.caption a .headerlink, .rst-content p a .headerlink,=
 .rst-content table > caption a .headerlink, .rst-content tt.download a spa=
n:first-child, .wy-menu-vertical li.current > a button.toctree-expand, .wy-=
menu-vertical li.on a button.toctree-expand, .wy-menu-vertical li a button.=
toctree-expand, a .fa, a .icon, a .rst-content .admonition-title, a .rst-co=
ntent .code-block-caption .headerlink, a .rst-content .eqno .headerlink, a =
.rst-content code.download span:first-child, a .rst-content dl dt .headerli=
nk, a .rst-content h1 .headerlink, a .rst-content h2 .headerlink, a .rst-co=
ntent h3 .headerlink, a .rst-content h4 .headerlink, a .rst-content h5 .hea=
derlink, a .rst-content h6 .headerlink, a .rst-content p.caption .headerlin=
k, a .rst-content p .headerlink, a .rst-content table > caption .headerlink=
, a .rst-content tt.download span:first-child, a .wy-menu-vertical li butto=
n.toctree-expand { display: inline-block; text-decoration: inherit; }

.btn .fa, .btn .icon, .btn .rst-content .admonition-title, .btn .rst-conten=
t .code-block-caption .headerlink, .btn .rst-content .eqno .headerlink, .bt=
n .rst-content code.download span:first-child, .btn .rst-content dl dt .hea=
derlink, .btn .rst-content h1 .headerlink, .btn .rst-content h2 .headerlink=
, .btn .rst-content h3 .headerlink, .btn .rst-content h4 .headerlink, .btn =
.rst-content h5 .headerlink, .btn .rst-content h6 .headerlink, .btn .rst-co=
ntent p .headerlink, .btn .rst-content table > caption .headerlink, .btn .r=
st-content tt.download span:first-child, .btn .wy-menu-vertical li.current =
> a button.toctree-expand, .btn .wy-menu-vertical li.on a button.toctree-ex=
pand, .btn .wy-menu-vertical li button.toctree-expand, .nav .fa, .nav .icon=
, .nav .rst-content .admonition-title, .nav .rst-content .code-block-captio=
n .headerlink, .nav .rst-content .eqno .headerlink, .nav .rst-content code.=
download span:first-child, .nav .rst-content dl dt .headerlink, .nav .rst-c=
ontent h1 .headerlink, .nav .rst-content h2 .headerlink, .nav .rst-content =
h3 .headerlink, .nav .rst-content h4 .headerlink, .nav .rst-content h5 .hea=
derlink, .nav .rst-content h6 .headerlink, .nav .rst-content p .headerlink,=
 .nav .rst-content table > caption .headerlink, .nav .rst-content tt.downlo=
ad span:first-child, .nav .wy-menu-vertical li.current > a button.toctree-e=
xpand, .nav .wy-menu-vertical li.on a button.toctree-expand, .nav .wy-menu-=
vertical li button.toctree-expand, .rst-content .btn .admonition-title, .rs=
t-content .code-block-caption .btn .headerlink, .rst-content .code-block-ca=
ption .nav .headerlink, .rst-content .eqno .btn .headerlink, .rst-content .=
eqno .nav .headerlink, .rst-content .nav .admonition-title, .rst-content co=
de.download .btn span:first-child, .rst-content code.download .nav span:fir=
st-child, .rst-content dl dt .btn .headerlink, .rst-content dl dt .nav .hea=
derlink, .rst-content h1 .btn .headerlink, .rst-content h1 .nav .headerlink=
, .rst-content h2 .btn .headerlink, .rst-content h2 .nav .headerlink, .rst-=
content h3 .btn .headerlink, .rst-content h3 .nav .headerlink, .rst-content=
 h4 .btn .headerlink, .rst-content h4 .nav .headerlink, .rst-content h5 .bt=
n .headerlink, .rst-content h5 .nav .headerlink, .rst-content h6 .btn .head=
erlink, .rst-content h6 .nav .headerlink, .rst-content p .btn .headerlink, =
.rst-content p .nav .headerlink, .rst-content table > caption .btn .headerl=
ink, .rst-content table > caption .nav .headerlink, .rst-content tt.downloa=
d .btn span:first-child, .rst-content tt.download .nav span:first-child, .w=
y-menu-vertical li .btn button.toctree-expand, .wy-menu-vertical li.current=
 > a .btn button.toctree-expand, .wy-menu-vertical li.current > a .nav butt=
on.toctree-expand, .wy-menu-vertical li .nav button.toctree-expand, .wy-men=
u-vertical li.on a .btn button.toctree-expand, .wy-menu-vertical li.on a .n=
av button.toctree-expand { display: inline; }

.btn .fa-large.icon, .btn .fa.fa-large, .btn .rst-content .code-block-capti=
on .fa-large.headerlink, .btn .rst-content .eqno .fa-large.headerlink, .btn=
 .rst-content .fa-large.admonition-title, .btn .rst-content code.download s=
pan.fa-large:first-child, .btn .rst-content dl dt .fa-large.headerlink, .bt=
n .rst-content h1 .fa-large.headerlink, .btn .rst-content h2 .fa-large.head=
erlink, .btn .rst-content h3 .fa-large.headerlink, .btn .rst-content h4 .fa=
-large.headerlink, .btn .rst-content h5 .fa-large.headerlink, .btn .rst-con=
tent h6 .fa-large.headerlink, .btn .rst-content p .fa-large.headerlink, .bt=
n .rst-content table > caption .fa-large.headerlink, .btn .rst-content tt.d=
ownload span.fa-large:first-child, .btn .wy-menu-vertical li button.fa-larg=
e.toctree-expand, .nav .fa-large.icon, .nav .fa.fa-large, .nav .rst-content=
 .code-block-caption .fa-large.headerlink, .nav .rst-content .eqno .fa-larg=
e.headerlink, .nav .rst-content .fa-large.admonition-title, .nav .rst-conte=
nt code.download span.fa-large:first-child, .nav .rst-content dl dt .fa-lar=
ge.headerlink, .nav .rst-content h1 .fa-large.headerlink, .nav .rst-content=
 h2 .fa-large.headerlink, .nav .rst-content h3 .fa-large.headerlink, .nav .=
rst-content h4 .fa-large.headerlink, .nav .rst-content h5 .fa-large.headerl=
ink, .nav .rst-content h6 .fa-large.headerlink, .nav .rst-content p .fa-lar=
ge.headerlink, .nav .rst-content table > caption .fa-large.headerlink, .nav=
 .rst-content tt.download span.fa-large:first-child, .nav .wy-menu-vertical=
 li button.fa-large.toctree-expand, .rst-content .btn .fa-large.admonition-=
title, .rst-content .code-block-caption .btn .fa-large.headerlink, .rst-con=
tent .code-block-caption .nav .fa-large.headerlink, .rst-content .eqno .btn=
 .fa-large.headerlink, .rst-content .eqno .nav .fa-large.headerlink, .rst-c=
ontent .nav .fa-large.admonition-title, .rst-content code.download .btn spa=
n.fa-large:first-child, .rst-content code.download .nav span.fa-large:first=
-child, .rst-content dl dt .btn .fa-large.headerlink, .rst-content dl dt .n=
av .fa-large.headerlink, .rst-content h1 .btn .fa-large.headerlink, .rst-co=
ntent h1 .nav .fa-large.headerlink, .rst-content h2 .btn .fa-large.headerli=
nk, .rst-content h2 .nav .fa-large.headerlink, .rst-content h3 .btn .fa-lar=
ge.headerlink, .rst-content h3 .nav .fa-large.headerlink, .rst-content h4 .=
btn .fa-large.headerlink, .rst-content h4 .nav .fa-large.headerlink, .rst-c=
ontent h5 .btn .fa-large.headerlink, .rst-content h5 .nav .fa-large.headerl=
ink, .rst-content h6 .btn .fa-large.headerlink, .rst-content h6 .nav .fa-la=
rge.headerlink, .rst-content p .btn .fa-large.headerlink, .rst-content p .n=
av .fa-large.headerlink, .rst-content table > caption .btn .fa-large.header=
link, .rst-content table > caption .nav .fa-large.headerlink, .rst-content =
tt.download .btn span.fa-large:first-child, .rst-content tt.download .nav s=
pan.fa-large:first-child, .wy-menu-vertical li .btn button.fa-large.toctree=
-expand, .wy-menu-vertical li .nav button.fa-large.toctree-expand { line-he=
ight: 0.9em; }

.btn .fa-spin.icon, .btn .fa.fa-spin, .btn .rst-content .code-block-caption=
 .fa-spin.headerlink, .btn .rst-content .eqno .fa-spin.headerlink, .btn .rs=
t-content .fa-spin.admonition-title, .btn .rst-content code.download span.f=
a-spin:first-child, .btn .rst-content dl dt .fa-spin.headerlink, .btn .rst-=
content h1 .fa-spin.headerlink, .btn .rst-content h2 .fa-spin.headerlink, .=
btn .rst-content h3 .fa-spin.headerlink, .btn .rst-content h4 .fa-spin.head=
erlink, .btn .rst-content h5 .fa-spin.headerlink, .btn .rst-content h6 .fa-=
spin.headerlink, .btn .rst-content p .fa-spin.headerlink, .btn .rst-content=
 table > caption .fa-spin.headerlink, .btn .rst-content tt.download span.fa=
-spin:first-child, .btn .wy-menu-vertical li button.fa-spin.toctree-expand,=
 .nav .fa-spin.icon, .nav .fa.fa-spin, .nav .rst-content .code-block-captio=
n .fa-spin.headerlink, .nav .rst-content .eqno .fa-spin.headerlink, .nav .r=
st-content .fa-spin.admonition-title, .nav .rst-content code.download span.=
fa-spin:first-child, .nav .rst-content dl dt .fa-spin.headerlink, .nav .rst=
-content h1 .fa-spin.headerlink, .nav .rst-content h2 .fa-spin.headerlink, =
.nav .rst-content h3 .fa-spin.headerlink, .nav .rst-content h4 .fa-spin.hea=
derlink, .nav .rst-content h5 .fa-spin.headerlink, .nav .rst-content h6 .fa=
-spin.headerlink, .nav .rst-content p .fa-spin.headerlink, .nav .rst-conten=
t table > caption .fa-spin.headerlink, .nav .rst-content tt.download span.f=
a-spin:first-child, .nav .wy-menu-vertical li button.fa-spin.toctree-expand=
, .rst-content .btn .fa-spin.admonition-title, .rst-content .code-block-cap=
tion .btn .fa-spin.headerlink, .rst-content .code-block-caption .nav .fa-sp=
in.headerlink, .rst-content .eqno .btn .fa-spin.headerlink, .rst-content .e=
qno .nav .fa-spin.headerlink, .rst-content .nav .fa-spin.admonition-title, =
.rst-content code.download .btn span.fa-spin:first-child, .rst-content code=
.download .nav span.fa-spin:first-child, .rst-content dl dt .btn .fa-spin.h=
eaderlink, .rst-content dl dt .nav .fa-spin.headerlink, .rst-content h1 .bt=
n .fa-spin.headerlink, .rst-content h1 .nav .fa-spin.headerlink, .rst-conte=
nt h2 .btn .fa-spin.headerlink, .rst-content h2 .nav .fa-spin.headerlink, .=
rst-content h3 .btn .fa-spin.headerlink, .rst-content h3 .nav .fa-spin.head=
erlink, .rst-content h4 .btn .fa-spin.headerlink, .rst-content h4 .nav .fa-=
spin.headerlink, .rst-content h5 .btn .fa-spin.headerlink, .rst-content h5 =
.nav .fa-spin.headerlink, .rst-content h6 .btn .fa-spin.headerlink, .rst-co=
ntent h6 .nav .fa-spin.headerlink, .rst-content p .btn .fa-spin.headerlink,=
 .rst-content p .nav .fa-spin.headerlink, .rst-content table > caption .btn=
 .fa-spin.headerlink, .rst-content table > caption .nav .fa-spin.headerlink=
, .rst-content tt.download .btn span.fa-spin:first-child, .rst-content tt.d=
ownload .nav span.fa-spin:first-child, .wy-menu-vertical li .btn button.fa-=
spin.toctree-expand, .wy-menu-vertical li .nav button.fa-spin.toctree-expan=
d { display: inline-block; }

.btn.fa::before, .btn.icon::before, .rst-content .btn.admonition-title::bef=
ore, .rst-content .code-block-caption .btn.headerlink::before, .rst-content=
 .eqno .btn.headerlink::before, .rst-content code.download span.btn:first-c=
hild::before, .rst-content dl dt .btn.headerlink::before, .rst-content h1 .=
btn.headerlink::before, .rst-content h2 .btn.headerlink::before, .rst-conte=
nt h3 .btn.headerlink::before, .rst-content h4 .btn.headerlink::before, .rs=
t-content h5 .btn.headerlink::before, .rst-content h6 .btn.headerlink::befo=
re, .rst-content p .btn.headerlink::before, .rst-content table > caption .b=
tn.headerlink::before, .rst-content tt.download span.btn:first-child::befor=
e, .wy-menu-vertical li button.btn.toctree-expand::before { opacity: 0.5; t=
ransition: opacity 0.05s ease-in 0s; }

.btn.fa:hover::before, .btn.icon:hover::before, .rst-content .btn.admonitio=
n-title:hover::before, .rst-content .code-block-caption .btn.headerlink:hov=
er::before, .rst-content .eqno .btn.headerlink:hover::before, .rst-content =
code.download span.btn:first-child:hover::before, .rst-content dl dt .btn.h=
eaderlink:hover::before, .rst-content h1 .btn.headerlink:hover::before, .rs=
t-content h2 .btn.headerlink:hover::before, .rst-content h3 .btn.headerlink=
:hover::before, .rst-content h4 .btn.headerlink:hover::before, .rst-content=
 h5 .btn.headerlink:hover::before, .rst-content h6 .btn.headerlink:hover::b=
efore, .rst-content p .btn.headerlink:hover::before, .rst-content table > c=
aption .btn.headerlink:hover::before, .rst-content tt.download span.btn:fir=
st-child:hover::before, .wy-menu-vertical li button.btn.toctree-expand:hove=
r::before { opacity: 1; }

.btn-mini .fa::before, .btn-mini .icon::before, .btn-mini .rst-content .adm=
onition-title::before, .btn-mini .rst-content .code-block-caption .headerli=
nk::before, .btn-mini .rst-content .eqno .headerlink::before, .btn-mini .rs=
t-content code.download span:first-child::before, .btn-mini .rst-content dl=
 dt .headerlink::before, .btn-mini .rst-content h1 .headerlink::before, .bt=
n-mini .rst-content h2 .headerlink::before, .btn-mini .rst-content h3 .head=
erlink::before, .btn-mini .rst-content h4 .headerlink::before, .btn-mini .r=
st-content h5 .headerlink::before, .btn-mini .rst-content h6 .headerlink::b=
efore, .btn-mini .rst-content p .headerlink::before, .btn-mini .rst-content=
 table > caption .headerlink::before, .btn-mini .rst-content tt.download sp=
an:first-child::before, .btn-mini .wy-menu-vertical li button.toctree-expan=
d::before, .rst-content .btn-mini .admonition-title::before, .rst-content .=
code-block-caption .btn-mini .headerlink::before, .rst-content .eqno .btn-m=
ini .headerlink::before, .rst-content code.download .btn-mini span:first-ch=
ild::before, .rst-content dl dt .btn-mini .headerlink::before, .rst-content=
 h1 .btn-mini .headerlink::before, .rst-content h2 .btn-mini .headerlink::b=
efore, .rst-content h3 .btn-mini .headerlink::before, .rst-content h4 .btn-=
mini .headerlink::before, .rst-content h5 .btn-mini .headerlink::before, .r=
st-content h6 .btn-mini .headerlink::before, .rst-content p .btn-mini .head=
erlink::before, .rst-content table > caption .btn-mini .headerlink::before,=
 .rst-content tt.download .btn-mini span:first-child::before, .wy-menu-vert=
ical li .btn-mini button.toctree-expand::before { font-size: 14px; vertical=
-align: -15%; }

.rst-content .admonition, .rst-content .admonition-todo, .rst-content .atte=
ntion, .rst-content .caution, .rst-content .danger, .rst-content .error, .r=
st-content .hint, .rst-content .important, .rst-content .note, .rst-content=
 .seealso, .rst-content .tip, .rst-content .warning, .wy-alert { padding: 1=
2px; line-height: 24px; margin-bottom: 24px; background: rgb(231, 242, 250)=
; }

.rst-content .admonition-title, .wy-alert-title { font-weight: 700; display=
: block; color: rgb(255, 255, 255); background: rgb(106, 176, 222); padding=
: 6px 12px; margin: -12px -12px 12px; }

.rst-content .danger, .rst-content .error, .rst-content .wy-alert-danger.ad=
monition, .rst-content .wy-alert-danger.admonition-todo, .rst-content .wy-a=
lert-danger.attention, .rst-content .wy-alert-danger.caution, .rst-content =
.wy-alert-danger.hint, .rst-content .wy-alert-danger.important, .rst-conten=
t .wy-alert-danger.note, .rst-content .wy-alert-danger.seealso, .rst-conten=
t .wy-alert-danger.tip, .rst-content .wy-alert-danger.warning, .wy-alert.wy=
-alert-danger { background: rgb(253, 243, 242); }

.rst-content .danger .admonition-title, .rst-content .danger .wy-alert-titl=
e, .rst-content .error .admonition-title, .rst-content .error .wy-alert-tit=
le, .rst-content .wy-alert-danger.admonition-todo .admonition-title, .rst-c=
ontent .wy-alert-danger.admonition-todo .wy-alert-title, .rst-content .wy-a=
lert-danger.admonition .admonition-title, .rst-content .wy-alert-danger.adm=
onition .wy-alert-title, .rst-content .wy-alert-danger.attention .admonitio=
n-title, .rst-content .wy-alert-danger.attention .wy-alert-title, .rst-cont=
ent .wy-alert-danger.caution .admonition-title, .rst-content .wy-alert-dang=
er.caution .wy-alert-title, .rst-content .wy-alert-danger.hint .admonition-=
title, .rst-content .wy-alert-danger.hint .wy-alert-title, .rst-content .wy=
-alert-danger.important .admonition-title, .rst-content .wy-alert-danger.im=
portant .wy-alert-title, .rst-content .wy-alert-danger.note .admonition-tit=
le, .rst-content .wy-alert-danger.note .wy-alert-title, .rst-content .wy-al=
ert-danger.seealso .admonition-title, .rst-content .wy-alert-danger.seealso=
 .wy-alert-title, .rst-content .wy-alert-danger.tip .admonition-title, .rst=
-content .wy-alert-danger.tip .wy-alert-title, .rst-content .wy-alert-dange=
r.warning .admonition-title, .rst-content .wy-alert-danger.warning .wy-aler=
t-title, .rst-content .wy-alert.wy-alert-danger .admonition-title, .wy-aler=
t.wy-alert-danger .rst-content .admonition-title, .wy-alert.wy-alert-danger=
 .wy-alert-title { background: rgb(242, 159, 151); }

.rst-content .admonition-todo, .rst-content .attention, .rst-content .cauti=
on, .rst-content .warning, .rst-content .wy-alert-warning.admonition, .rst-=
content .wy-alert-warning.danger, .rst-content .wy-alert-warning.error, .rs=
t-content .wy-alert-warning.hint, .rst-content .wy-alert-warning.important,=
 .rst-content .wy-alert-warning.note, .rst-content .wy-alert-warning.seeals=
o, .rst-content .wy-alert-warning.tip, .wy-alert.wy-alert-warning { backgro=
und: rgb(255, 237, 204); }

.rst-content .admonition-todo .admonition-title, .rst-content .admonition-t=
odo .wy-alert-title, .rst-content .attention .admonition-title, .rst-conten=
t .attention .wy-alert-title, .rst-content .caution .admonition-title, .rst=
-content .caution .wy-alert-title, .rst-content .warning .admonition-title,=
 .rst-content .warning .wy-alert-title, .rst-content .wy-alert-warning.admo=
nition .admonition-title, .rst-content .wy-alert-warning.admonition .wy-ale=
rt-title, .rst-content .wy-alert-warning.danger .admonition-title, .rst-con=
tent .wy-alert-warning.danger .wy-alert-title, .rst-content .wy-alert-warni=
ng.error .admonition-title, .rst-content .wy-alert-warning.error .wy-alert-=
title, .rst-content .wy-alert-warning.hint .admonition-title, .rst-content =
.wy-alert-warning.hint .wy-alert-title, .rst-content .wy-alert-warning.impo=
rtant .admonition-title, .rst-content .wy-alert-warning.important .wy-alert=
-title, .rst-content .wy-alert-warning.note .admonition-title, .rst-content=
 .wy-alert-warning.note .wy-alert-title, .rst-content .wy-alert-warning.see=
also .admonition-title, .rst-content .wy-alert-warning.seealso .wy-alert-ti=
tle, .rst-content .wy-alert-warning.tip .admonition-title, .rst-content .wy=
-alert-warning.tip .wy-alert-title, .rst-content .wy-alert.wy-alert-warning=
 .admonition-title, .wy-alert.wy-alert-warning .rst-content .admonition-tit=
le, .wy-alert.wy-alert-warning .wy-alert-title { background: rgb(240, 179, =
126); }

.rst-content .note, .rst-content .seealso, .rst-content .wy-alert-info.admo=
nition, .rst-content .wy-alert-info.admonition-todo, .rst-content .wy-alert=
-info.attention, .rst-content .wy-alert-info.caution, .rst-content .wy-aler=
t-info.danger, .rst-content .wy-alert-info.error, .rst-content .wy-alert-in=
fo.hint, .rst-content .wy-alert-info.important, .rst-content .wy-alert-info=
.tip, .rst-content .wy-alert-info.warning, .wy-alert.wy-alert-info { backgr=
ound: rgb(231, 242, 250); }

.rst-content .note .admonition-title, .rst-content .note .wy-alert-title, .=
rst-content .seealso .admonition-title, .rst-content .seealso .wy-alert-tit=
le, .rst-content .wy-alert-info.admonition-todo .admonition-title, .rst-con=
tent .wy-alert-info.admonition-todo .wy-alert-title, .rst-content .wy-alert=
-info.admonition .admonition-title, .rst-content .wy-alert-info.admonition =
.wy-alert-title, .rst-content .wy-alert-info.attention .admonition-title, .=
rst-content .wy-alert-info.attention .wy-alert-title, .rst-content .wy-aler=
t-info.caution .admonition-title, .rst-content .wy-alert-info.caution .wy-a=
lert-title, .rst-content .wy-alert-info.danger .admonition-title, .rst-cont=
ent .wy-alert-info.danger .wy-alert-title, .rst-content .wy-alert-info.erro=
r .admonition-title, .rst-content .wy-alert-info.error .wy-alert-title, .rs=
t-content .wy-alert-info.hint .admonition-title, .rst-content .wy-alert-inf=
o.hint .wy-alert-title, .rst-content .wy-alert-info.important .admonition-t=
itle, .rst-content .wy-alert-info.important .wy-alert-title, .rst-content .=
wy-alert-info.tip .admonition-title, .rst-content .wy-alert-info.tip .wy-al=
ert-title, .rst-content .wy-alert-info.warning .admonition-title, .rst-cont=
ent .wy-alert-info.warning .wy-alert-title, .rst-content .wy-alert.wy-alert=
-info .admonition-title, .wy-alert.wy-alert-info .rst-content .admonition-t=
itle, .wy-alert.wy-alert-info .wy-alert-title { background: rgb(106, 176, 2=
22); }

.rst-content .hint, .rst-content .important, .rst-content .tip, .rst-conten=
t .wy-alert-success.admonition, .rst-content .wy-alert-success.admonition-t=
odo, .rst-content .wy-alert-success.attention, .rst-content .wy-alert-succe=
ss.caution, .rst-content .wy-alert-success.danger, .rst-content .wy-alert-s=
uccess.error, .rst-content .wy-alert-success.note, .rst-content .wy-alert-s=
uccess.seealso, .rst-content .wy-alert-success.warning, .wy-alert.wy-alert-=
success { background: rgb(219, 250, 244); }

.rst-content .hint .admonition-title, .rst-content .hint .wy-alert-title, .=
rst-content .important .admonition-title, .rst-content .important .wy-alert=
-title, .rst-content .tip .admonition-title, .rst-content .tip .wy-alert-ti=
tle, .rst-content .wy-alert-success.admonition-todo .admonition-title, .rst=
-content .wy-alert-success.admonition-todo .wy-alert-title, .rst-content .w=
y-alert-success.admonition .admonition-title, .rst-content .wy-alert-succes=
s.admonition .wy-alert-title, .rst-content .wy-alert-success.attention .adm=
onition-title, .rst-content .wy-alert-success.attention .wy-alert-title, .r=
st-content .wy-alert-success.caution .admonition-title, .rst-content .wy-al=
ert-success.caution .wy-alert-title, .rst-content .wy-alert-success.danger =
.admonition-title, .rst-content .wy-alert-success.danger .wy-alert-title, .=
rst-content .wy-alert-success.error .admonition-title, .rst-content .wy-ale=
rt-success.error .wy-alert-title, .rst-content .wy-alert-success.note .admo=
nition-title, .rst-content .wy-alert-success.note .wy-alert-title, .rst-con=
tent .wy-alert-success.seealso .admonition-title, .rst-content .wy-alert-su=
ccess.seealso .wy-alert-title, .rst-content .wy-alert-success.warning .admo=
nition-title, .rst-content .wy-alert-success.warning .wy-alert-title, .rst-=
content .wy-alert.wy-alert-success .admonition-title, .wy-alert.wy-alert-su=
ccess .rst-content .admonition-title, .wy-alert.wy-alert-success .wy-alert-=
title { background: rgb(26, 188, 156); }

.rst-content .wy-alert-neutral.admonition, .rst-content .wy-alert-neutral.a=
dmonition-todo, .rst-content .wy-alert-neutral.attention, .rst-content .wy-=
alert-neutral.caution, .rst-content .wy-alert-neutral.danger, .rst-content =
.wy-alert-neutral.error, .rst-content .wy-alert-neutral.hint, .rst-content =
.wy-alert-neutral.important, .rst-content .wy-alert-neutral.note, .rst-cont=
ent .wy-alert-neutral.seealso, .rst-content .wy-alert-neutral.tip, .rst-con=
tent .wy-alert-neutral.warning, .wy-alert.wy-alert-neutral { background: rg=
b(243, 246, 246); }

.rst-content .wy-alert-neutral.admonition-todo .admonition-title, .rst-cont=
ent .wy-alert-neutral.admonition-todo .wy-alert-title, .rst-content .wy-ale=
rt-neutral.admonition .admonition-title, .rst-content .wy-alert-neutral.adm=
onition .wy-alert-title, .rst-content .wy-alert-neutral.attention .admoniti=
on-title, .rst-content .wy-alert-neutral.attention .wy-alert-title, .rst-co=
ntent .wy-alert-neutral.caution .admonition-title, .rst-content .wy-alert-n=
eutral.caution .wy-alert-title, .rst-content .wy-alert-neutral.danger .admo=
nition-title, .rst-content .wy-alert-neutral.danger .wy-alert-title, .rst-c=
ontent .wy-alert-neutral.error .admonition-title, .rst-content .wy-alert-ne=
utral.error .wy-alert-title, .rst-content .wy-alert-neutral.hint .admonitio=
n-title, .rst-content .wy-alert-neutral.hint .wy-alert-title, .rst-content =
.wy-alert-neutral.important .admonition-title, .rst-content .wy-alert-neutr=
al.important .wy-alert-title, .rst-content .wy-alert-neutral.note .admoniti=
on-title, .rst-content .wy-alert-neutral.note .wy-alert-title, .rst-content=
 .wy-alert-neutral.seealso .admonition-title, .rst-content .wy-alert-neutra=
l.seealso .wy-alert-title, .rst-content .wy-alert-neutral.tip .admonition-t=
itle, .rst-content .wy-alert-neutral.tip .wy-alert-title, .rst-content .wy-=
alert-neutral.warning .admonition-title, .rst-content .wy-alert-neutral.war=
ning .wy-alert-title, .rst-content .wy-alert.wy-alert-neutral .admonition-t=
itle, .wy-alert.wy-alert-neutral .rst-content .admonition-title, .wy-alert.=
wy-alert-neutral .wy-alert-title { color: rgb(64, 64, 64); background: rgb(=
225, 228, 229); }

.rst-content .wy-alert-neutral.admonition-todo a, .rst-content .wy-alert-ne=
utral.admonition a, .rst-content .wy-alert-neutral.attention a, .rst-conten=
t .wy-alert-neutral.caution a, .rst-content .wy-alert-neutral.danger a, .rs=
t-content .wy-alert-neutral.error a, .rst-content .wy-alert-neutral.hint a,=
 .rst-content .wy-alert-neutral.important a, .rst-content .wy-alert-neutral=
.note a, .rst-content .wy-alert-neutral.seealso a, .rst-content .wy-alert-n=
eutral.tip a, .rst-content .wy-alert-neutral.warning a, .wy-alert.wy-alert-=
neutral a { color: rgb(41, 128, 185); }

.rst-content .admonition-todo p:last-child, .rst-content .admonition p:last=
-child, .rst-content .attention p:last-child, .rst-content .caution p:last-=
child, .rst-content .danger p:last-child, .rst-content .error p:last-child,=
 .rst-content .hint p:last-child, .rst-content .important p:last-child, .rs=
t-content .note p:last-child, .rst-content .seealso p:last-child, .rst-cont=
ent .tip p:last-child, .rst-content .warning p:last-child, .wy-alert p:last=
-child { margin-bottom: 0px; }

.wy-tray-container { position: fixed; bottom: 0px; left: 0px; z-index: 600;=
 }

.wy-tray-container li { display: block; width: 300px; background: transpare=
nt; color: rgb(255, 255, 255); text-align: center; box-shadow: rgba(0, 0, 0=
, 0.1) 0px 5px 5px 0px; padding: 0px 24px; min-width: 20%; opacity: 0; heig=
ht: 0px; line-height: 56px; overflow: hidden; transition: all 0.3s ease-in =
0s; }

.wy-tray-container li.wy-tray-item-success { background: rgb(39, 174, 96); =
}

.wy-tray-container li.wy-tray-item-info { background: rgb(41, 128, 185); }

.wy-tray-container li.wy-tray-item-warning { background: rgb(230, 126, 34);=
 }

.wy-tray-container li.wy-tray-item-danger { background: rgb(231, 76, 60); }

.wy-tray-container li.on { opacity: 1; height: 56px; }

@media screen and (max-width: 768px) {
  .wy-tray-container { bottom: auto; top: 0px; width: 100%; }
  .wy-tray-container li { width: 100%; }
}

button { font-size: 100%; margin: 0px; vertical-align: baseline; cursor: po=
inter; line-height: normal; appearance: button; }

button[disabled] { cursor: default; }

.btn { display: inline-block; border-radius: 2px; line-height: normal; whit=
e-space: nowrap; text-align: center; cursor: pointer; font-size: 100%; padd=
ing: 6px 12px 8px; color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, =
0, 0.1); background-color: rgb(39, 174, 96); text-decoration: none; font-we=
ight: 400; font-family: Lato, proxima-nova, "Helvetica Neue", Arial, sans-s=
erif; box-shadow: rgba(255, 255, 255, 0.5) 0px 1px 2px -1px inset, rgba(0, =
0, 0, 0.1) 0px -2px 0px 0px inset; vertical-align: middle; zoom: 1; -webkit=
-user-drag: none; user-select: none; transition: all 0.1s linear 0s; }

.btn-hover { background: rgb(46, 142, 206); color: rgb(255, 255, 255); }

.btn:hover { background: rgb(44, 195, 107); color: rgb(255, 255, 255); }

.btn:focus { background: rgb(44, 195, 107); outline: 0px; }

.btn:active { box-shadow: rgba(0, 0, 0, 0.05) 0px -1px 0px 0px inset, rgba(=
0, 0, 0, 0.1) 0px 2px 0px 0px inset; padding: 8px 12px 6px; }

.btn:visited { color: rgb(255, 255, 255); }

.btn-disabled, .btn-disabled:active, .btn-disabled:focus, .btn-disabled:hov=
er, .btn:disabled { background-image: none; opacity: 0.4; cursor: not-allow=
ed; box-shadow: none; }

.btn-small { font-size: 80%; }

.btn-info { background-color: rgb(41, 128, 185) !important; }

.btn-info:hover { background-color: rgb(46, 142, 206) !important; }

.btn-neutral { background-color: rgb(243, 246, 246) !important; color: rgb(=
64, 64, 64) !important; }

.btn-neutral:hover { background-color: rgb(229, 235, 235) !important; color=
: rgb(64, 64, 64); }

.btn-neutral:visited { color: rgb(64, 64, 64) !important; }

.btn-success { background-color: rgb(39, 174, 96) !important; }

.btn-success:hover { background-color: rgb(34, 153, 85) !important; }

.btn-danger { background-color: rgb(231, 76, 60) !important; }

.btn-danger:hover { background-color: rgb(234, 97, 83) !important; }

.btn-warning { background-color: rgb(230, 126, 34) !important; }

.btn-warning:hover { background-color: rgb(233, 139, 57) !important; }

.btn-invert { background-color: rgb(34, 34, 34); }

.btn-invert:hover { background-color: rgb(47, 47, 47) !important; }

.btn-link { color: rgb(41, 128, 185); box-shadow: none; background-color: t=
ransparent !important; border-color: transparent !important; }

.btn-link:active, .btn-link:hover { box-shadow: none; background-color: tra=
nsparent !important; color: rgb(64, 154, 213) !important; }

.btn-link:visited { color: rgb(155, 89, 182); }

.wy-btn-group .btn, .wy-control .btn { vertical-align: middle; }

.wy-btn-group { margin-bottom: 24px; }

.wy-btn-group::after, .wy-btn-group::before { display: table; content: ""; =
}

.wy-btn-group::after { clear: both; }

.wy-dropdown { position: relative; display: inline-block; }

.wy-dropdown-active .wy-dropdown-menu { display: block; }

.wy-dropdown-menu { position: absolute; left: 0px; display: none; float: le=
ft; top: 100%; min-width: 100%; background: rgb(252, 252, 252); z-index: 10=
0; border: 1px solid rgb(207, 215, 221); box-shadow: rgba(0, 0, 0, 0.1) 0px=
 2px 2px 0px; padding: 12px; }

.wy-dropdown-menu > dd > a { display: block; clear: both; color: rgb(64, 64=
, 64); white-space: nowrap; font-size: 90%; padding: 0px 12px; cursor: poin=
ter; }

.wy-dropdown-menu > dd > a:hover { background: rgb(41, 128, 185); color: rg=
b(255, 255, 255); }

.wy-dropdown-menu > dd.divider { border-top: 1px solid rgb(207, 215, 221); =
margin: 6px 0px; }

.wy-dropdown-menu > dd.search { padding-bottom: 12px; }

.wy-dropdown-menu > dd.search input[type=3D"search"] { width: 100%; }

.wy-dropdown-menu > dd.call-to-action { background: rgb(227, 227, 227); tex=
t-transform: uppercase; font-weight: 500; font-size: 80%; }

.wy-dropdown-menu > dd.call-to-action:hover { background: rgb(227, 227, 227=
); }

.wy-dropdown-menu > dd.call-to-action .btn { color: rgb(255, 255, 255); }

.wy-dropdown.wy-dropdown-up .wy-dropdown-menu { inset: auto 0px 100% auto; =
}

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu { background: rgb(252, 25=
2, 252); margin-top: 2px; }

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu a { padding: 6px 12px; }

.wy-dropdown.wy-dropdown-bubble .wy-dropdown-menu a:hover { background: rgb=
(41, 128, 185); color: rgb(255, 255, 255); }

.wy-dropdown.wy-dropdown-left .wy-dropdown-menu { right: 0px; left: auto; t=
ext-align: right; }

.wy-dropdown-arrow::before { content: " "; border-bottom: 5px solid rgb(245=
, 245, 245); border-left: 5px solid transparent; border-right: 5px solid tr=
ansparent; position: absolute; display: block; top: -4px; left: 50%; margin=
-left: -3px; }

.wy-dropdown-arrow.wy-dropdown-arrow-left::before { left: 11px; }

.wy-form-stacked select { display: block; }

.wy-form-aligned .wy-help-inline, .wy-form-aligned input, .wy-form-aligned =
label, .wy-form-aligned select, .wy-form-aligned textarea { display: inline=
-block; vertical-align: middle; }

.wy-form-aligned .wy-control-group > label { display: inline-block; vertica=
l-align: middle; width: 10em; margin: 6px 12px 0px 0px; float: left; }

.wy-form-aligned .wy-control { float: left; }

.wy-form-aligned .wy-control label { display: block; }

.wy-form-aligned .wy-control select { margin-top: 6px; }

fieldset { margin: 0px; }

fieldset, legend { border: 0px; padding: 0px; }

legend { width: 100%; white-space: normal; margin-bottom: 24px; font-size: =
150%; }

label, legend { display: block; }

label { margin: 0px 0px 0.3125em; color: rgb(51, 51, 51); font-size: 90%; }

input, select, textarea { font-size: 100%; margin: 0px; vertical-align: bas=
eline; }

.wy-control-group { margin-bottom: 24px; max-width: 1200px; margin-left: au=
to; margin-right: auto; }

.wy-control-group::after, .wy-control-group::before { display: table; conte=
nt: ""; }

.wy-control-group::after { clear: both; }

.wy-control-group.wy-control-group-required > label::after { content: " *";=
 color: rgb(231, 76, 60); }

.wy-control-group .wy-form-full, .wy-control-group .wy-form-halves, .wy-con=
trol-group .wy-form-thirds { padding-bottom: 12px; }

.wy-control-group .wy-form-full input[type=3D"color"], .wy-control-group .w=
y-form-full input[type=3D"date"], .wy-control-group .wy-form-full input[typ=
e=3D"datetime-local"], .wy-control-group .wy-form-full input[type=3D"dateti=
me"], .wy-control-group .wy-form-full input[type=3D"email"], .wy-control-gr=
oup .wy-form-full input[type=3D"month"], .wy-control-group .wy-form-full in=
put[type=3D"number"], .wy-control-group .wy-form-full input[type=3D"passwor=
d"], .wy-control-group .wy-form-full input[type=3D"search"], .wy-control-gr=
oup .wy-form-full input[type=3D"tel"], .wy-control-group .wy-form-full inpu=
t[type=3D"text"], .wy-control-group .wy-form-full input[type=3D"time"], .wy=
-control-group .wy-form-full input[type=3D"url"], .wy-control-group .wy-for=
m-full input[type=3D"week"], .wy-control-group .wy-form-full select, .wy-co=
ntrol-group .wy-form-halves input[type=3D"color"], .wy-control-group .wy-fo=
rm-halves input[type=3D"date"], .wy-control-group .wy-form-halves input[typ=
e=3D"datetime-local"], .wy-control-group .wy-form-halves input[type=3D"date=
time"], .wy-control-group .wy-form-halves input[type=3D"email"], .wy-contro=
l-group .wy-form-halves input[type=3D"month"], .wy-control-group .wy-form-h=
alves input[type=3D"number"], .wy-control-group .wy-form-halves input[type=
=3D"password"], .wy-control-group .wy-form-halves input[type=3D"search"], .=
wy-control-group .wy-form-halves input[type=3D"tel"], .wy-control-group .wy=
-form-halves input[type=3D"text"], .wy-control-group .wy-form-halves input[=
type=3D"time"], .wy-control-group .wy-form-halves input[type=3D"url"], .wy-=
control-group .wy-form-halves input[type=3D"week"], .wy-control-group .wy-f=
orm-halves select, .wy-control-group .wy-form-thirds input[type=3D"color"],=
 .wy-control-group .wy-form-thirds input[type=3D"date"], .wy-control-group =
.wy-form-thirds input[type=3D"datetime-local"], .wy-control-group .wy-form-=
thirds input[type=3D"datetime"], .wy-control-group .wy-form-thirds input[ty=
pe=3D"email"], .wy-control-group .wy-form-thirds input[type=3D"month"], .wy=
-control-group .wy-form-thirds input[type=3D"number"], .wy-control-group .w=
y-form-thirds input[type=3D"password"], .wy-control-group .wy-form-thirds i=
nput[type=3D"search"], .wy-control-group .wy-form-thirds input[type=3D"tel"=
], .wy-control-group .wy-form-thirds input[type=3D"text"], .wy-control-grou=
p .wy-form-thirds input[type=3D"time"], .wy-control-group .wy-form-thirds i=
nput[type=3D"url"], .wy-control-group .wy-form-thirds input[type=3D"week"],=
 .wy-control-group .wy-form-thirds select { width: 100%; }

.wy-control-group .wy-form-full { float: left; display: block; width: 100%;=
 margin-right: 0px; }

.wy-control-group .wy-form-full:last-child { margin-right: 0px; }

.wy-control-group .wy-form-halves { float: left; display: block; margin-rig=
ht: 2.35765%; width: 48.8212%; }

.wy-control-group .wy-form-halves:last-child, .wy-control-group .wy-form-ha=
lves:nth-of-type(2n) { margin-right: 0px; }

.wy-control-group .wy-form-halves:nth-of-type(2n+1) { clear: left; }

.wy-control-group .wy-form-thirds { float: left; display: block; margin-rig=
ht: 2.35765%; width: 31.7616%; }

.wy-control-group .wy-form-thirds:last-child, .wy-control-group .wy-form-th=
irds:nth-of-type(3n) { margin-right: 0px; }

.wy-control-group .wy-form-thirds:nth-of-type(3n+1) { clear: left; }

.wy-control-group.wy-control-group-no-input .wy-control, .wy-control-no-inp=
ut { margin: 6px 0px 0px; font-size: 90%; }

.wy-control-no-input { display: inline-block; }

.wy-control-group.fluid-input input[type=3D"color"], .wy-control-group.flui=
d-input input[type=3D"date"], .wy-control-group.fluid-input input[type=3D"d=
atetime-local"], .wy-control-group.fluid-input input[type=3D"datetime"], .w=
y-control-group.fluid-input input[type=3D"email"], .wy-control-group.fluid-=
input input[type=3D"month"], .wy-control-group.fluid-input input[type=3D"nu=
mber"], .wy-control-group.fluid-input input[type=3D"password"], .wy-control=
-group.fluid-input input[type=3D"search"], .wy-control-group.fluid-input in=
put[type=3D"tel"], .wy-control-group.fluid-input input[type=3D"text"], .wy-=
control-group.fluid-input input[type=3D"time"], .wy-control-group.fluid-inp=
ut input[type=3D"url"], .wy-control-group.fluid-input input[type=3D"week"] =
{ width: 100%; }

.wy-form-message-inline { padding-left: 0.3em; color: rgb(102, 102, 102); f=
ont-size: 90%; }

.wy-form-message { display: block; color: rgb(153, 153, 153); font-size: 70=
%; margin-top: 0.3125em; font-style: italic; }

.wy-form-message p { font-size: inherit; font-style: italic; margin-bottom:=
 6px; }

.wy-form-message p:last-child { margin-bottom: 0px; }

input { line-height: normal; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { app=
earance: button; cursor: pointer; font-family: Lato, proxima-nova, "Helveti=
ca Neue", Arial, sans-serif; }

input[type=3D"color"], input[type=3D"date"], input[type=3D"datetime-local"]=
, input[type=3D"datetime"], input[type=3D"email"], input[type=3D"month"], i=
nput[type=3D"number"], input[type=3D"password"], input[type=3D"search"], in=
put[type=3D"tel"], input[type=3D"text"], input[type=3D"time"], input[type=
=3D"url"], input[type=3D"week"] { appearance: none; padding: 6px; display: =
inline-block; border: 1px solid rgb(204, 204, 204); font-size: 80%; font-fa=
mily: Lato, proxima-nova, "Helvetica Neue", Arial, sans-serif; box-shadow: =
rgb(221, 221, 221) 0px 1px 3px inset; border-radius: 0px; transition: borde=
r 0.3s linear 0s; }

input[type=3D"datetime-local"] { padding: 0.34375em 0.625em; }

input[disabled] { cursor: default; }

input[type=3D"checkbox"], input[type=3D"radio"] { padding: 0px; margin-righ=
t: 0.3125em; }

input[type=3D"checkbox"], input[type=3D"radio"], input[type=3D"search"] { b=
ox-sizing: border-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { appearance: none; }

input[type=3D"color"]:focus, input[type=3D"date"]:focus, input[type=3D"date=
time-local"]:focus, input[type=3D"datetime"]:focus, input[type=3D"email"]:f=
ocus, input[type=3D"month"]:focus, input[type=3D"number"]:focus, input[type=
=3D"password"]:focus, input[type=3D"search"]:focus, input[type=3D"tel"]:foc=
us, input[type=3D"text"]:focus, input[type=3D"time"]:focus, input[type=3D"u=
rl"]:focus, input[type=3D"week"]:focus { outline: 0px; border-color: rgb(51=
, 51, 51); }

input.no-focus:focus { border-color: rgb(204, 204, 204) !important; }

input[type=3D"checkbox"]:focus, input[type=3D"file"]:focus, input[type=3D"r=
adio"]:focus { outline: rgb(18, 159, 234) auto 1px; }

input[type=3D"color"][disabled], input[type=3D"date"][disabled], input[type=
=3D"datetime-local"][disabled], input[type=3D"datetime"][disabled], input[t=
ype=3D"email"][disabled], input[type=3D"month"][disabled], input[type=3D"nu=
mber"][disabled], input[type=3D"password"][disabled], input[type=3D"search"=
][disabled], input[type=3D"tel"][disabled], input[type=3D"text"][disabled],=
 input[type=3D"time"][disabled], input[type=3D"url"][disabled], input[type=
=3D"week"][disabled] { cursor: not-allowed; background-color: rgb(250, 250,=
 250); }

input:focus:invalid, select:focus:invalid, textarea:focus:invalid { color: =
rgb(231, 76, 60); border: 1px solid rgb(231, 76, 60); }

input:focus:invalid:focus, select:focus:invalid:focus, textarea:focus:inval=
id:focus { border-color: rgb(231, 76, 60); }

input[type=3D"checkbox"]:focus:invalid:focus, input[type=3D"file"]:focus:in=
valid:focus, input[type=3D"radio"]:focus:invalid:focus { outline-color: rgb=
(231, 76, 60); }

input.wy-input-large { padding: 12px; font-size: 100%; }

textarea { overflow: auto; vertical-align: top; width: 100%; font-family: L=
ato, proxima-nova, "Helvetica Neue", Arial, sans-serif; }

select, textarea { padding: 0.5em 0.625em; display: inline-block; border: 1=
px solid rgb(204, 204, 204); font-size: 80%; box-shadow: rgb(221, 221, 221)=
 0px 1px 3px inset; transition: border 0.3s linear 0s; }

select { border: 1px solid rgb(204, 204, 204); background-color: rgb(255, 2=
55, 255); }

select[multiple] { height: auto; }

select:focus, textarea:focus { outline: 0px; }

input[readonly], select[disabled], select[readonly], textarea[disabled], te=
xtarea[readonly] { cursor: not-allowed; background-color: rgb(250, 250, 250=
); }

input[type=3D"checkbox"][disabled], input[type=3D"radio"][disabled] { curso=
r: not-allowed; }

.wy-checkbox, .wy-radio { margin: 6px 0px; color: rgb(64, 64, 64); display:=
 block; }

.wy-checkbox input, .wy-radio input { vertical-align: baseline; }

.wy-form-message-inline { display: inline-block; vertical-align: middle; }

.wy-input-prefix, .wy-input-suffix { white-space: nowrap; padding: 6px; }

.wy-input-prefix .wy-input-context, .wy-input-suffix .wy-input-context { li=
ne-height: 27px; padding: 0px 8px; display: inline-block; font-size: 80%; b=
ackground-color: rgb(243, 246, 246); border: 1px solid rgb(204, 204, 204); =
color: rgb(153, 153, 153); }

.wy-input-suffix .wy-input-context { border-left: 0px; }

.wy-input-prefix .wy-input-context { border-right: 0px; }

.wy-switch { position: relative; display: block; height: 24px; margin-top: =
12px; cursor: pointer; }

.wy-switch::before { left: 0px; top: 0px; width: 36px; height: 12px; backgr=
ound: rgb(204, 204, 204); }

.wy-switch::after, .wy-switch::before { position: absolute; content: ""; di=
splay: block; border-radius: 4px; transition: all 0.2s ease-in-out 0s; }

.wy-switch::after { width: 18px; height: 18px; background: rgb(153, 153, 15=
3); left: -3px; top: -3px; }

.wy-switch span { position: absolute; left: 48px; display: block; font-size=
: 12px; color: rgb(204, 204, 204); line-height: 1; }

.wy-switch.active::before { background: rgb(30, 132, 73); }

.wy-switch.active::after { left: 24px; background: rgb(39, 174, 96); }

.wy-switch.disabled { cursor: not-allowed; opacity: 0.8; }

.wy-control-group.wy-control-group-error .wy-form-message, .wy-control-grou=
p.wy-control-group-error > label { color: rgb(231, 76, 60); }

.wy-control-group.wy-control-group-error input[type=3D"color"], .wy-control=
-group.wy-control-group-error input[type=3D"date"], .wy-control-group.wy-co=
ntrol-group-error input[type=3D"datetime-local"], .wy-control-group.wy-cont=
rol-group-error input[type=3D"datetime"], .wy-control-group.wy-control-grou=
p-error input[type=3D"email"], .wy-control-group.wy-control-group-error inp=
ut[type=3D"month"], .wy-control-group.wy-control-group-error input[type=3D"=
number"], .wy-control-group.wy-control-group-error input[type=3D"password"]=
, .wy-control-group.wy-control-group-error input[type=3D"search"], .wy-cont=
rol-group.wy-control-group-error input[type=3D"tel"], .wy-control-group.wy-=
control-group-error input[type=3D"text"], .wy-control-group.wy-control-grou=
p-error input[type=3D"time"], .wy-control-group.wy-control-group-error inpu=
t[type=3D"url"], .wy-control-group.wy-control-group-error input[type=3D"wee=
k"], .wy-control-group.wy-control-group-error textarea { border: 1px solid =
rgb(231, 76, 60); }

.wy-inline-validate { white-space: nowrap; }

.wy-inline-validate .wy-input-context { padding: 0.5em 0.625em; display: in=
line-block; font-size: 80%; }

.wy-inline-validate.wy-inline-validate-success .wy-input-context { color: r=
gb(39, 174, 96); }

.wy-inline-validate.wy-inline-validate-danger .wy-input-context { color: rg=
b(231, 76, 60); }

.wy-inline-validate.wy-inline-validate-warning .wy-input-context { color: r=
gb(230, 126, 34); }

.wy-inline-validate.wy-inline-validate-info .wy-input-context { color: rgb(=
41, 128, 185); }

.rotate-90 { transform: rotate(90deg); }

.rotate-180 { transform: rotate(180deg); }

.rotate-270 { transform: rotate(270deg); }

.mirror { transform: scaleX(-1); }

.mirror.rotate-90 { transform: scaleX(-1) rotate(90deg); }

.mirror.rotate-180 { transform: scaleX(-1) rotate(180deg); }

.mirror.rotate-270 { transform: scaleX(-1) rotate(270deg); }

@media only screen and (max-width: 480px) {
  .wy-form button[type=3D"submit"] { margin: 0.7em 0px 0px; }
  .wy-form input[type=3D"color"], .wy-form input[type=3D"date"], .wy-form i=
nput[type=3D"datetime-local"], .wy-form input[type=3D"datetime"], .wy-form =
input[type=3D"email"], .wy-form input[type=3D"month"], .wy-form input[type=
=3D"number"], .wy-form input[type=3D"password"], .wy-form input[type=3D"sea=
rch"], .wy-form input[type=3D"tel"], .wy-form input[type=3D"text"], .wy-for=
m input[type=3D"time"], .wy-form input[type=3D"url"], .wy-form input[type=
=3D"week"], .wy-form label { margin-bottom: 0.3em; display: block; }
  .wy-form input[type=3D"color"], .wy-form input[type=3D"date"], .wy-form i=
nput[type=3D"datetime-local"], .wy-form input[type=3D"datetime"], .wy-form =
input[type=3D"email"], .wy-form input[type=3D"month"], .wy-form input[type=
=3D"number"], .wy-form input[type=3D"password"], .wy-form input[type=3D"sea=
rch"], .wy-form input[type=3D"tel"], .wy-form input[type=3D"time"], .wy-for=
m input[type=3D"url"], .wy-form input[type=3D"week"] { margin-bottom: 0px; =
}
  .wy-form-aligned .wy-control-group label { margin-bottom: 0.3em; text-ali=
gn: left; display: block; width: 100%; }
  .wy-form-aligned .wy-control { margin: 1.5em 0px 0px; }
  .wy-form-message, .wy-form-message-inline, .wy-form .wy-help-inline { dis=
play: block; font-size: 80%; padding: 6px 0px; }
}

@media screen and (max-width: 768px) {
  .tablet-hide { display: none; }
}

@media screen and (max-width: 480px) {
  .mobile-hide { display: none; }
}

.float-left { float: left; }

.float-right { float: right; }

.full-width { width: 100%; }

.rst-content table.docutils, .rst-content table.field-list, .wy-table { bor=
der-collapse: collapse; border-spacing: 0px; empty-cells: show; margin-bott=
om: 24px; }

.rst-content table.docutils caption, .rst-content table.field-list caption,=
 .wy-table caption { color: rgb(0, 0, 0); font: italic 85% / 1 arial, sans-=
serif; padding: 1em 0px; text-align: center; }

.rst-content table.docutils td, .rst-content table.docutils th, .rst-conten=
t table.field-list td, .rst-content table.field-list th, .wy-table td, .wy-=
table th { font-size: 90%; margin: 0px; overflow: visible; padding: 8px 16p=
x; }

.rst-content table.docutils td:first-child, .rst-content table.docutils th:=
first-child, .rst-content table.field-list td:first-child, .rst-content tab=
le.field-list th:first-child, .wy-table td:first-child, .wy-table th:first-=
child { border-left-width: 0px; }

.rst-content table.docutils thead, .rst-content table.field-list thead, .wy=
-table thead { color: rgb(0, 0, 0); text-align: left; vertical-align: botto=
m; white-space: nowrap; }

.rst-content table.docutils thead th, .rst-content table.field-list thead t=
h, .wy-table thead th { font-weight: 700; border-bottom: 2px solid rgb(225,=
 228, 229); }

.rst-content table.docutils td, .rst-content table.field-list td, .wy-table=
 td { background-color: transparent; vertical-align: middle; }

.rst-content table.docutils td p, .rst-content table.field-list td p, .wy-t=
able td p { line-height: 18px; }

.rst-content table.docutils td p:last-child, .rst-content table.field-list =
td p:last-child, .wy-table td p:last-child { margin-bottom: 0px; }

.rst-content table.docutils .wy-table-cell-min, .rst-content table.field-li=
st .wy-table-cell-min, .wy-table .wy-table-cell-min { width: 1%; padding-ri=
ght: 0px; }

.rst-content table.docutils .wy-table-cell-min input[type=3D"checkbox"], .r=
st-content table.field-list .wy-table-cell-min input[type=3D"checkbox"], .w=
y-table .wy-table-cell-min input[type=3D"checkbox"] { margin: 0px; }

.wy-table-secondary { color: grey; font-size: 90%; }

.wy-table-tertiary { color: grey; font-size: 80%; }

.rst-content table.docutils:not(.field-list) tr:nth-child(2n-1) td, .wy-tab=
le-backed, .wy-table-odd td, .wy-table-striped tr:nth-child(2n-1) td { back=
ground-color: rgb(243, 246, 246); }

.rst-content table.docutils, .wy-table-bordered-all { border: 1px solid rgb=
(225, 228, 229); }

.rst-content table.docutils td, .wy-table-bordered-all td { border-bottom: =
1px solid rgb(225, 228, 229); border-left: 1px solid rgb(225, 228, 229); }

.rst-content table.docutils tbody > tr:last-child td, .wy-table-bordered-al=
l tbody > tr:last-child td { border-bottom-width: 0px; }

.wy-table-bordered { border: 1px solid rgb(225, 228, 229); }

.wy-table-bordered-rows td { border-bottom: 1px solid rgb(225, 228, 229); }

.wy-table-bordered-rows tbody > tr:last-child td { border-bottom-width: 0px=
; }

.wy-table-horizontal td, .wy-table-horizontal th { border-width: 0px 0px 1p=
x; border-bottom-style: solid; border-bottom-color: rgb(225, 228, 229); }

.wy-table-horizontal tbody > tr:last-child td { border-bottom-width: 0px; }

.wy-table-responsive { margin-bottom: 24px; max-width: 100%; overflow: auto=
; }

.wy-table-responsive table { margin-bottom: 0px !important; }

.wy-table-responsive table td, .wy-table-responsive table th { white-space:=
 nowrap; }

a { color: rgb(41, 128, 185); text-decoration: none; cursor: pointer; }

a:hover { color: rgb(48, 145, 209); }

a:visited { color: rgb(155, 89, 182); }

html { height: 100%; }

body, html { overflow-x: hidden; }

body { font-family: Lato, proxima-nova, "Helvetica Neue", Arial, sans-serif=
; font-weight: 400; color: rgb(64, 64, 64); min-height: 100%; background: r=
gb(237, 240, 242); }

.wy-text-left { text-align: left; }

.wy-text-center { text-align: center; }

.wy-text-right { text-align: right; }

.wy-text-large { font-size: 120%; }

.wy-text-normal { font-size: 100%; }

.wy-text-small, small { font-size: 80%; }

.wy-text-strike { text-decoration: line-through; }

.wy-text-warning { color: rgb(230, 126, 34) !important; }

a.wy-text-warning:hover { color: rgb(235, 153, 80) !important; }

.wy-text-info { color: rgb(41, 128, 185) !important; }

a.wy-text-info:hover { color: rgb(64, 154, 213) !important; }

.wy-text-success { color: rgb(39, 174, 96) !important; }

a.wy-text-success:hover { color: rgb(54, 210, 120) !important; }

.wy-text-danger { color: rgb(231, 76, 60) !important; }

a.wy-text-danger:hover { color: rgb(237, 118, 105) !important; }

.wy-text-neutral { color: rgb(64, 64, 64) !important; }

a.wy-text-neutral:hover { color: rgb(89, 89, 89) !important; }

.rst-content .toctree-wrapper > p.caption, h1, h2, h3, h4, h5, h6, legend {=
 margin-top: 0px; font-weight: 700; font-family: "Roboto Slab", ff-tisa-web=
-pro, Georgia, Arial, sans-serif; }

p { line-height: 24px; font-size: 16px; margin: 0px 0px 24px; }

h1 { font-size: 175%; }

.rst-content .toctree-wrapper > p.caption, h2 { font-size: 150%; }

h3 { font-size: 125%; }

h4 { font-size: 115%; }

h5 { font-size: 110%; }

h6 { font-size: 100%; }

hr { display: block; height: 1px; border-width: 1px 0px 0px; border-right-s=
tyle: initial; border-bottom-style: initial; border-left-style: initial; bo=
rder-right-color: initial; border-bottom-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(225, 228, 229); margin: 24px 0px; padding: 0px; }

.rst-content code, .rst-content tt, code { white-space: nowrap; max-width: =
100%; background: rgb(255, 255, 255); border: 1px solid rgb(225, 228, 229);=
 font-size: 75%; padding: 0px 5px; font-family: SFMono-Regular, Menlo, Mona=
co, Consolas, "Liberation Mono", "Courier New", Courier, monospace; color: =
rgb(231, 76, 60); overflow-x: auto; }

.rst-content tt.code-large, code.code-large { font-size: 90%; }

.rst-content .section ul, .rst-content .toctree-wrapper ul, .rst-content se=
ction ul, .wy-plain-list-disc, article ul { list-style: disc; line-height: =
24px; margin-bottom: 24px; }

.rst-content .section ul li, .rst-content .toctree-wrapper ul li, .rst-cont=
ent section ul li, .wy-plain-list-disc li, article ul li { list-style: disc=
; margin-left: 24px; }

.rst-content .section ul li p:last-child, .rst-content .section ul li ul, .=
rst-content .toctree-wrapper ul li p:last-child, .rst-content .toctree-wrap=
per ul li ul, .rst-content section ul li p:last-child, .rst-content section=
 ul li ul, .wy-plain-list-disc li p:last-child, .wy-plain-list-disc li ul, =
article ul li p:last-child, article ul li ul { margin-bottom: 0px; }

.rst-content .section ul li li, .rst-content .toctree-wrapper ul li li, .rs=
t-content section ul li li, .wy-plain-list-disc li li, article ul li li { l=
ist-style: circle; }

.rst-content .section ul li li li, .rst-content .toctree-wrapper ul li li l=
i, .rst-content section ul li li li, .wy-plain-list-disc li li li, article =
ul li li li { list-style: square; }

.rst-content .section ul li ol li, .rst-content .toctree-wrapper ul li ol l=
i, .rst-content section ul li ol li, .wy-plain-list-disc li ol li, article =
ul li ol li { list-style: decimal; }

.rst-content .section ol, .rst-content .section ol.arabic, .rst-content .to=
ctree-wrapper ol, .rst-content .toctree-wrapper ol.arabic, .rst-content sec=
tion ol, .rst-content section ol.arabic, .wy-plain-list-decimal, article ol=
 { list-style: decimal; line-height: 24px; margin-bottom: 24px; }

.rst-content .section ol.arabic li, .rst-content .section ol li, .rst-conte=
nt .toctree-wrapper ol.arabic li, .rst-content .toctree-wrapper ol li, .rst=
-content section ol.arabic li, .rst-content section ol li, .wy-plain-list-d=
ecimal li, article ol li { list-style: decimal; margin-left: 24px; }

.rst-content .section ol.arabic li ul, .rst-content .section ol li p:last-c=
hild, .rst-content .section ol li ul, .rst-content .toctree-wrapper ol.arab=
ic li ul, .rst-content .toctree-wrapper ol li p:last-child, .rst-content .t=
octree-wrapper ol li ul, .rst-content section ol.arabic li ul, .rst-content=
 section ol li p:last-child, .rst-content section ol li ul, .wy-plain-list-=
decimal li p:last-child, .wy-plain-list-decimal li ul, article ol li p:last=
-child, article ol li ul { margin-bottom: 0px; }

.rst-content .section ol.arabic li ul li, .rst-content .section ol li ul li=
, .rst-content .toctree-wrapper ol.arabic li ul li, .rst-content .toctree-w=
rapper ol li ul li, .rst-content section ol.arabic li ul li, .rst-content s=
ection ol li ul li, .wy-plain-list-decimal li ul li, article ol li ul li { =
list-style: disc; }

.wy-breadcrumbs { }

.wy-breadcrumbs::after, .wy-breadcrumbs::before { display: table; content: =
""; }

.wy-breadcrumbs::after { clear: both; }

.wy-breadcrumbs > li { display: inline-block; padding-top: 5px; }

.wy-breadcrumbs > li.wy-breadcrumbs-aside { float: right; }

.rst-content .wy-breadcrumbs > li code, .rst-content .wy-breadcrumbs > li t=
t, .wy-breadcrumbs > li .rst-content tt, .wy-breadcrumbs > li code { all: i=
nherit; }

.breadcrumb-item::before { content: "/"; color: rgb(187, 187, 187); font-si=
ze: 13px; padding: 0px 6px 0px 3px; }

.wy-breadcrumbs-extra { margin-bottom: 0px; color: rgb(179, 179, 179); font=
-size: 80%; display: inline-block; }

@media screen and (max-width: 480px) {
  .wy-breadcrumbs-extra, .wy-breadcrumbs li.wy-breadcrumbs-aside { display:=
 none; }
}

@media print {
  .wy-breadcrumbs li.wy-breadcrumbs-aside { display: none; }
}

html { font-size: 16px; }

.wy-affix { position: fixed; top: 1.618em; }

.wy-menu a:hover { text-decoration: none; }

.wy-menu-horiz { }

.wy-menu-horiz::after, .wy-menu-horiz::before { display: table; content: ""=
; }

.wy-menu-horiz::after { clear: both; }

.wy-menu-horiz li, .wy-menu-horiz ul { display: inline-block; }

.wy-menu-horiz li:hover { background: rgba(255, 255, 255, 0.1); }

.wy-menu-horiz li.divide-left { border-left: 1px solid rgb(64, 64, 64); }

.wy-menu-horiz li.divide-right { border-right: 1px solid rgb(64, 64, 64); }

.wy-menu-horiz a { height: 32px; display: inline-block; line-height: 32px; =
padding: 0px 16px; }

.wy-menu-vertical { width: 300px; }

.wy-menu-vertical header, .wy-menu-vertical p.caption { color: rgb(85, 165,=
 217); height: 32px; line-height: 32px; padding: 0px 1.618em; margin: 12px =
0px 0px; display: block; font-weight: 700; text-transform: uppercase; font-=
size: 85%; white-space: nowrap; }

.wy-menu-vertical ul { margin-bottom: 0px; }

.wy-menu-vertical li.divide-top { border-top: 1px solid rgb(64, 64, 64); }

.wy-menu-vertical li.divide-bottom { border-bottom: 1px solid rgb(64, 64, 6=
4); }

.wy-menu-vertical li.current { background: rgb(227, 227, 227); }

.wy-menu-vertical li.current a { color: grey; border-right: 1px solid rgb(2=
01, 201, 201); padding: 0.4045em 2.427em; }

.wy-menu-vertical li.current a:hover { background: rgb(214, 214, 214); }

.rst-content .wy-menu-vertical li tt, .wy-menu-vertical li .rst-content tt,=
 .wy-menu-vertical li code { border: none; background: inherit; color: inhe=
rit; padding-left: 0px; padding-right: 0px; }

.wy-menu-vertical li button.toctree-expand { display: block; float: left; m=
argin-left: -1.2em; line-height: 18px; color: rgb(77, 77, 77); border: none=
; background: none; padding: 0px; }

.wy-menu-vertical li.current > a, .wy-menu-vertical li.on a { color: rgb(64=
, 64, 64); font-weight: 700; position: relative; background: rgb(252, 252, =
252); border: none; padding: 0.4045em 1.618em; }

.wy-menu-vertical li.current > a:hover, .wy-menu-vertical li.on a:hover { b=
ackground: rgb(252, 252, 252); }

.wy-menu-vertical li.current > a:hover button.toctree-expand, .wy-menu-vert=
ical li.on a:hover button.toctree-expand { color: grey; }

.wy-menu-vertical li.current > a button.toctree-expand, .wy-menu-vertical l=
i.on a button.toctree-expand { display: block; line-height: 18px; color: rg=
b(51, 51, 51); }

.wy-menu-vertical li.toctree-l1.current > a { border-bottom: 1px solid rgb(=
201, 201, 201); border-top: 1px solid rgb(201, 201, 201); }

.wy-menu-vertical .toctree-l1.current .toctree-l2 > ul, .wy-menu-vertical .=
toctree-l2.current .toctree-l3 > ul, .wy-menu-vertical .toctree-l3.current =
.toctree-l4 > ul, .wy-menu-vertical .toctree-l4.current .toctree-l5 > ul, .=
wy-menu-vertical .toctree-l5.current .toctree-l6 > ul, .wy-menu-vertical .t=
octree-l6.current .toctree-l7 > ul, .wy-menu-vertical .toctree-l7.current .=
toctree-l8 > ul, .wy-menu-vertical .toctree-l8.current .toctree-l9 > ul, .w=
y-menu-vertical .toctree-l9.current .toctree-l10 > ul, .wy-menu-vertical .t=
octree-l10.current .toctree-l11 > ul { display: none; }

.wy-menu-vertical .toctree-l1.current .current.toctree-l2 > ul, .wy-menu-ve=
rtical .toctree-l2.current .current.toctree-l3 > ul, .wy-menu-vertical .toc=
tree-l3.current .current.toctree-l4 > ul, .wy-menu-vertical .toctree-l4.cur=
rent .current.toctree-l5 > ul, .wy-menu-vertical .toctree-l5.current .curre=
nt.toctree-l6 > ul, .wy-menu-vertical .toctree-l6.current .current.toctree-=
l7 > ul, .wy-menu-vertical .toctree-l7.current .current.toctree-l8 > ul, .w=
y-menu-vertical .toctree-l8.current .current.toctree-l9 > ul, .wy-menu-vert=
ical .toctree-l9.current .current.toctree-l10 > ul, .wy-menu-vertical .toct=
ree-l10.current .current.toctree-l11 > ul { display: block; }

.wy-menu-vertical li.toctree-l3, .wy-menu-vertical li.toctree-l4 { font-siz=
e: 0.9em; }

.wy-menu-vertical li.toctree-l2 a, .wy-menu-vertical li.toctree-l3 a, .wy-m=
enu-vertical li.toctree-l4 a, .wy-menu-vertical li.toctree-l5 a, .wy-menu-v=
ertical li.toctree-l6 a, .wy-menu-vertical li.toctree-l7 a, .wy-menu-vertic=
al li.toctree-l8 a, .wy-menu-vertical li.toctree-l9 a, .wy-menu-vertical li=
.toctree-l10 a { color: rgb(64, 64, 64); }

.wy-menu-vertical li.toctree-l2 a:hover button.toctree-expand, .wy-menu-ver=
tical li.toctree-l3 a:hover button.toctree-expand, .wy-menu-vertical li.toc=
tree-l4 a:hover button.toctree-expand, .wy-menu-vertical li.toctree-l5 a:ho=
ver button.toctree-expand, .wy-menu-vertical li.toctree-l6 a:hover button.t=
octree-expand, .wy-menu-vertical li.toctree-l7 a:hover button.toctree-expan=
d, .wy-menu-vertical li.toctree-l8 a:hover button.toctree-expand, .wy-menu-=
vertical li.toctree-l9 a:hover button.toctree-expand, .wy-menu-vertical li.=
toctree-l10 a:hover button.toctree-expand { color: grey; }

.wy-menu-vertical li.toctree-l2.current li.toctree-l3 > a, .wy-menu-vertica=
l li.toctree-l3.current li.toctree-l4 > a, .wy-menu-vertical li.toctree-l4.=
current li.toctree-l5 > a, .wy-menu-vertical li.toctree-l5.current li.toctr=
ee-l6 > a, .wy-menu-vertical li.toctree-l6.current li.toctree-l7 > a, .wy-m=
enu-vertical li.toctree-l7.current li.toctree-l8 > a, .wy-menu-vertical li.=
toctree-l8.current li.toctree-l9 > a, .wy-menu-vertical li.toctree-l9.curre=
nt li.toctree-l10 > a, .wy-menu-vertical li.toctree-l10.current li.toctree-=
l11 > a { display: block; }

.wy-menu-vertical li.toctree-l2.current > a { padding: 0.4045em 2.427em; }

.wy-menu-vertical li.toctree-l2.current li.toctree-l3 > a { padding: 0.4045=
em 1.618em 0.4045em 4.045em; }

.wy-menu-vertical li.toctree-l3.current > a { padding: 0.4045em 4.045em; }

.wy-menu-vertical li.toctree-l3.current li.toctree-l4 > a { padding: 0.4045=
em 1.618em 0.4045em 5.663em; }

.wy-menu-vertical li.toctree-l4.current > a { padding: 0.4045em 5.663em; }

.wy-menu-vertical li.toctree-l4.current li.toctree-l5 > a { padding: 0.4045=
em 1.618em 0.4045em 7.281em; }

.wy-menu-vertical li.toctree-l5.current > a { padding: 0.4045em 7.281em; }

.wy-menu-vertical li.toctree-l5.current li.toctree-l6 > a { padding: 0.4045=
em 1.618em 0.4045em 8.899em; }

.wy-menu-vertical li.toctree-l6.current > a { padding: 0.4045em 8.899em; }

.wy-menu-vertical li.toctree-l6.current li.toctree-l7 > a { padding: 0.4045=
em 1.618em 0.4045em 10.517em; }

.wy-menu-vertical li.toctree-l7.current > a { padding: 0.4045em 10.517em; }

.wy-menu-vertical li.toctree-l7.current li.toctree-l8 > a { padding: 0.4045=
em 1.618em 0.4045em 12.135em; }

.wy-menu-vertical li.toctree-l8.current > a { padding: 0.4045em 12.135em; }

.wy-menu-vertical li.toctree-l8.current li.toctree-l9 > a { padding: 0.4045=
em 1.618em 0.4045em 13.753em; }

.wy-menu-vertical li.toctree-l9.current > a { padding: 0.4045em 13.753em; }

.wy-menu-vertical li.toctree-l9.current li.toctree-l10 > a { padding: 0.404=
5em 1.618em 0.4045em 15.371em; }

.wy-menu-vertical li.toctree-l10.current > a { padding: 0.4045em 15.371em; =
}

.wy-menu-vertical li.toctree-l10.current li.toctree-l11 > a { padding: 0.40=
45em 1.618em 0.4045em 16.989em; }

.wy-menu-vertical li.toctree-l2.current > a, .wy-menu-vertical li.toctree-l=
2.current li.toctree-l3 > a { background: rgb(201, 201, 201); }

.wy-menu-vertical li.toctree-l2 button.toctree-expand { color: rgb(163, 163=
, 163); }

.wy-menu-vertical li.toctree-l3.current > a, .wy-menu-vertical li.toctree-l=
3.current li.toctree-l4 > a { background: rgb(189, 189, 189); }

.wy-menu-vertical li.toctree-l3 button.toctree-expand { color: rgb(150, 150=
, 150); }

.wy-menu-vertical li.current ul { display: block; }

.wy-menu-vertical li ul { margin-bottom: 0px; display: none; }

.wy-menu-vertical li ul li a { margin-bottom: 0px; color: rgb(217, 217, 217=
); font-weight: 400; }

.wy-menu-vertical a { line-height: 18px; padding: 0.4045em 1.618em; display=
: block; position: relative; font-size: 90%; color: rgb(217, 217, 217); }

.wy-menu-vertical a:hover { background-color: rgb(78, 74, 74); cursor: poin=
ter; }

.wy-menu-vertical a:hover button.toctree-expand { color: rgb(217, 217, 217)=
; }

.wy-menu-vertical a:active { background-color: rgb(41, 128, 185); cursor: p=
ointer; color: rgb(255, 255, 255); }

.wy-menu-vertical a:active button.toctree-expand { color: rgb(255, 255, 255=
); }

.wy-side-nav-search { display: block; width: 300px; padding: 0.809em; margi=
n-bottom: 0.809em; z-index: 200; background-color: rgb(41, 128, 185); text-=
align: center; color: rgb(252, 252, 252); }

.wy-side-nav-search input[type=3D"text"] { width: 100%; border-radius: 50px=
; padding: 6px 12px; border-color: rgb(36, 114, 164); }

.wy-side-nav-search img { display: block; margin: auto auto 0.809em; height=
: 45px; width: 45px; background-color: rgb(41, 128, 185); padding: 5px; bor=
der-radius: 100%; }

.wy-side-nav-search .wy-dropdown > a, .wy-side-nav-search > a { color: rgb(=
252, 252, 252); font-size: 100%; font-weight: 700; display: inline-block; p=
adding: 4px 6px; margin-bottom: 0.809em; max-width: 100%; }

.wy-side-nav-search .wy-dropdown > a:hover, .wy-side-nav-search > a:hover {=
 background: rgba(255, 255, 255, 0.1); }

.wy-side-nav-search .wy-dropdown > a img.logo, .wy-side-nav-search > a img.=
logo { display: block; margin: 0px auto; height: auto; width: auto; border-=
radius: 0px; max-width: 100%; background: transparent; }

.wy-side-nav-search .wy-dropdown > a.icon img.logo, .wy-side-nav-search > a=
.icon img.logo { margin-top: 0.85em; }

.wy-side-nav-search > div.version { margin-top: -0.4045em; margin-bottom: 0=
.809em; font-weight: 400; color: rgba(255, 255, 255, 0.3); }

.wy-nav .wy-menu-vertical header { color: rgb(41, 128, 185); }

.wy-nav .wy-menu-vertical a { color: rgb(179, 179, 179); }

.wy-nav .wy-menu-vertical a:hover { background-color: rgb(41, 128, 185); co=
lor: rgb(255, 255, 255); }

[data-menu-wrap] { transition: all 0.2s ease-in 0s; position: absolute; wid=
th: 100%; opacity: 0; }

[data-menu-wrap].move-center { left: 0px; right: auto; opacity: 1; }

[data-menu-wrap].move-left { right: auto; left: -100%; opacity: 0; }

[data-menu-wrap].move-right { right: -100%; left: auto; opacity: 0; }

.wy-body-for-nav { background: rgb(252, 252, 252); }

.wy-grid-for-nav { position: absolute; width: 100%; height: 100%; }

.wy-nav-side { position: fixed; top: 0px; bottom: 0px; left: 0px; padding-b=
ottom: 2em; width: 300px; overflow: hidden; min-height: 100%; color: rgb(15=
5, 155, 155); background: rgb(52, 49, 49); z-index: 200; }

.wy-side-scroll { width: 320px; position: relative; overflow: hidden scroll=
; height: 100%; }

.wy-nav-top { display: none; background: rgb(41, 128, 185); color: rgb(255,=
 255, 255); padding: 0.4045em 0.809em; position: relative; line-height: 50p=
x; text-align: center; font-size: 100%; }

.wy-nav-top::after, .wy-nav-top::before { display: table; content: ""; }

.wy-nav-top::after { clear: both; }

.wy-nav-top a { color: rgb(255, 255, 255); font-weight: 700; }

.wy-nav-top img { margin-right: 12px; height: 45px; width: 45px; background=
-color: rgb(41, 128, 185); padding: 5px; border-radius: 100%; }

.wy-nav-top i { font-size: 30px; float: left; cursor: pointer; padding-top:=
 inherit; }

.wy-nav-content-wrap { margin-left: 300px; background: rgb(252, 252, 252); =
min-height: 100%; }

.wy-nav-content { padding: 1.618em 3.236em; height: 100%; max-width: 800px;=
 margin: auto; }

.wy-body-mask { position: fixed; width: 100%; height: 100%; background: rgb=
a(0, 0, 0, 0.2); display: none; z-index: 499; }

.wy-body-mask.on { display: block; }

footer { color: grey; }

footer p { margin-bottom: 12px; }

.rst-content footer span.commit tt, footer span.commit .rst-content tt, foo=
ter span.commit code { padding: 0px; font-family: SFMono-Regular, Menlo, Mo=
naco, Consolas, "Liberation Mono", "Courier New", Courier, monospace; font-=
size: 1em; background: none; border: none; color: grey; }

.rst-footer-buttons { }

.rst-footer-buttons::after, .rst-footer-buttons::before { width: 100%; disp=
lay: table; content: ""; }

.rst-footer-buttons::after { clear: both; }

.rst-breadcrumbs-buttons { margin-top: 12px; }

.rst-breadcrumbs-buttons::after, .rst-breadcrumbs-buttons::before { display=
: table; content: ""; }

.rst-breadcrumbs-buttons::after { clear: both; }

#search-results .search li { margin-bottom: 24px; border-bottom: 1px solid =
rgb(225, 228, 229); padding-bottom: 24px; }

#search-results .search li:first-child { border-top: 1px solid rgb(225, 228=
, 229); padding-top: 24px; }

#search-results .search li a { font-size: 120%; margin-bottom: 12px; displa=
y: inline-block; }

#search-results .context { color: grey; font-size: 90%; }

.genindextable li > ul { margin-left: 24px; }

@media screen and (max-width: 768px) {
  .wy-body-for-nav { background: rgb(252, 252, 252); }
  .wy-nav-top { display: block; }
  .wy-nav-side { left: -300px; }
  .wy-nav-side.shift { width: 85%; left: 0px; }
  .wy-menu.wy-menu-vertical, .wy-side-nav-search, .wy-side-scroll { width: =
auto; }
  .wy-nav-content-wrap { margin-left: 0px; }
  .wy-nav-content-wrap .wy-nav-content { padding: 1.618em; }
  .wy-nav-content-wrap.shift { position: fixed; min-width: 100%; left: 85%;=
 top: 0px; height: 100%; overflow: hidden; }
}

@media screen and (min-width: 1100px) {
  .wy-nav-content-wrap { background: rgba(0, 0, 0, 0.05); }
  .wy-nav-content { margin: 0px; background: rgb(252, 252, 252); }
}

@media print {
  .rst-versions, .wy-nav-side, footer { display: none; }
  .wy-nav-content-wrap { margin-left: 0px; }
}

.rst-versions { position: fixed; bottom: 0px; left: 0px; width: 300px; colo=
r: rgb(252, 252, 252); background: rgb(31, 29, 29); font-family: Lato, prox=
ima-nova, "Helvetica Neue", Arial, sans-serif; z-index: 400; }

.rst-versions a { color: rgb(41, 128, 185); text-decoration: none; }

.rst-versions .rst-badge-small { display: none; }

.rst-versions .rst-current-version { padding: 12px; background-color: rgb(3=
9, 37, 37); display: block; text-align: right; font-size: 90%; cursor: poin=
ter; color: rgb(39, 174, 96); }

.rst-versions .rst-current-version::after, .rst-versions .rst-current-versi=
on::before { display: table; content: ""; }

.rst-versions .rst-current-version::after { clear: both; }

.rst-content .code-block-caption .rst-versions .rst-current-version .header=
link, .rst-content .eqno .rst-versions .rst-current-version .headerlink, .r=
st-content .rst-versions .rst-current-version .admonition-title, .rst-conte=
nt code.download .rst-versions .rst-current-version span:first-child, .rst-=
content dl dt .rst-versions .rst-current-version .headerlink, .rst-content =
h1 .rst-versions .rst-current-version .headerlink, .rst-content h2 .rst-ver=
sions .rst-current-version .headerlink, .rst-content h3 .rst-versions .rst-=
current-version .headerlink, .rst-content h4 .rst-versions .rst-current-ver=
sion .headerlink, .rst-content h5 .rst-versions .rst-current-version .heade=
rlink, .rst-content h6 .rst-versions .rst-current-version .headerlink, .rst=
-content p .rst-versions .rst-current-version .headerlink, .rst-content tab=
le > caption .rst-versions .rst-current-version .headerlink, .rst-content t=
t.download .rst-versions .rst-current-version span:first-child, .rst-versio=
ns .rst-current-version .fa, .rst-versions .rst-current-version .icon, .rst=
-versions .rst-current-version .rst-content .admonition-title, .rst-version=
s .rst-current-version .rst-content .code-block-caption .headerlink, .rst-v=
ersions .rst-current-version .rst-content .eqno .headerlink, .rst-versions =
.rst-current-version .rst-content code.download span:first-child, .rst-vers=
ions .rst-current-version .rst-content dl dt .headerlink, .rst-versions .rs=
t-current-version .rst-content h1 .headerlink, .rst-versions .rst-current-v=
ersion .rst-content h2 .headerlink, .rst-versions .rst-current-version .rst=
-content h3 .headerlink, .rst-versions .rst-current-version .rst-content h4=
 .headerlink, .rst-versions .rst-current-version .rst-content h5 .headerlin=
k, .rst-versions .rst-current-version .rst-content h6 .headerlink, .rst-ver=
sions .rst-current-version .rst-content p .headerlink, .rst-versions .rst-c=
urrent-version .rst-content table > caption .headerlink, .rst-versions .rst=
-current-version .rst-content tt.download span:first-child, .rst-versions .=
rst-current-version .wy-menu-vertical li button.toctree-expand, .wy-menu-ve=
rtical li .rst-versions .rst-current-version button.toctree-expand { color:=
 rgb(252, 252, 252); }

.rst-versions .rst-current-version .fa-book, .rst-versions .rst-current-ver=
sion .icon-book { float: left; }

.rst-versions .rst-current-version.rst-out-of-date { background-color: rgb(=
231, 76, 60); color: rgb(255, 255, 255); }

.rst-versions .rst-current-version.rst-active-old-version { background-colo=
r: rgb(241, 196, 15); color: rgb(0, 0, 0); }

.rst-versions.shift-up { height: auto; max-height: 100%; overflow-y: scroll=
; }

.rst-versions.shift-up .rst-other-versions { display: block; }

.rst-versions .rst-other-versions { font-size: 90%; padding: 12px; color: g=
rey; display: none; }

.rst-versions .rst-other-versions hr { display: block; height: 1px; border-=
width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initi=
al; border-left-style: initial; border-right-color: initial; border-bottom-=
color: initial; border-left-color: initial; border-image: initial; margin: =
20px 0px; padding: 0px; border-top-style: solid; border-top-color: rgb(65, =
61, 61); }

.rst-versions .rst-other-versions dd { display: inline-block; margin: 0px; =
}

.rst-versions .rst-other-versions dd a { display: inline-block; padding: 6p=
x; color: rgb(252, 252, 252); }

.rst-versions.rst-badge { width: auto; bottom: 20px; right: 20px; left: aut=
o; border: none; max-width: 300px; max-height: 90%; }

.rst-versions.rst-badge .fa-book, .rst-versions.rst-badge .icon-book { floa=
t: none; line-height: 30px; }

.rst-versions.rst-badge.shift-up .rst-current-version { text-align: right; =
}

.rst-versions.rst-badge.shift-up .rst-current-version .fa-book, .rst-versio=
ns.rst-badge.shift-up .rst-current-version .icon-book { float: left; }

.rst-versions.rst-badge > .rst-current-version { width: auto; height: 30px;=
 line-height: 30px; padding: 0px 6px; display: block; text-align: center; }

@media screen and (max-width: 768px) {
  .rst-versions { width: 85%; display: none; }
  .rst-versions.shift { display: block; }
}

.rst-content .toctree-wrapper > p.caption, .rst-content h1, .rst-content h2=
, .rst-content h3, .rst-content h4, .rst-content h5, .rst-content h6 { marg=
in-bottom: 24px; }

.rst-content img { max-width: 100%; height: auto; }

.rst-content div.figure, .rst-content figure { margin-bottom: 24px; }

.rst-content div.figure .caption-text, .rst-content figure .caption-text { =
font-style: italic; }

.rst-content div.figure p:last-child.caption, .rst-content figure p:last-ch=
ild.caption { margin-bottom: 0px; }

.rst-content div.figure.align-center, .rst-content figure.align-center { te=
xt-align: center; }

.rst-content .section > a > img, .rst-content .section > img, .rst-content =
section > a > img, .rst-content section > img { margin-bottom: 24px; }

.rst-content abbr[title] { text-decoration: none; }

.rst-content.style-external-links a.reference.external::after { font-family=
: FontAwesome; content: "=EF=82=8E"; color: rgb(179, 179, 179); vertical-al=
ign: super; font-size: 60%; margin: 0px 0.2em; }

.rst-content blockquote { margin-left: 24px; line-height: 24px; margin-bott=
om: 24px; }

.rst-content pre.literal-block { white-space: pre; margin: 0px; padding: 12=
px; font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono"=
, "Courier New", Courier, monospace; display: block; overflow: auto; }

.rst-content div[class^=3D"highlight"], .rst-content pre.literal-block { bo=
rder: 1px solid rgb(225, 228, 229); overflow-x: auto; margin: 1px 0px 24px;=
 }

.rst-content div[class^=3D"highlight"] div[class^=3D"highlight"], .rst-cont=
ent pre.literal-block div[class^=3D"highlight"] { padding: 0px; border: non=
e; margin: 0px; }

.rst-content div[class^=3D"highlight"] td.code { width: 100%; }

.rst-content .linenodiv pre { border-right: 1px solid rgb(230, 233, 234); m=
argin: 0px; padding: 12px; font-family: SFMono-Regular, Menlo, Monaco, Cons=
olas, "Liberation Mono", "Courier New", Courier, monospace; user-select: no=
ne; pointer-events: none; }

.rst-content div[class^=3D"highlight"] pre { white-space: pre; margin: 0px;=
 padding: 12px; display: block; overflow: auto; }

.rst-content div[class^=3D"highlight"] pre .hll { display: block; margin: 0=
px -12px; padding: 0px 12px; }

.rst-content .linenodiv pre, .rst-content div[class^=3D"highlight"] pre, .r=
st-content pre.literal-block { font-family: SFMono-Regular, Menlo, Monaco, =
Consolas, "Liberation Mono", "Courier New", Courier, monospace; font-size: =
12px; line-height: 1.4; }

.rst-content div.highlight .gp, .rst-content div.highlight span.linenos { u=
ser-select: none; pointer-events: none; }

.rst-content div.highlight span.linenos { display: inline-block; padding-le=
ft: 0px; padding-right: 12px; margin-right: 12px; border-right: 1px solid r=
gb(230, 233, 234); }

.rst-content .code-block-caption { font-style: italic; font-size: 85%; line=
-height: 1; padding: 1em 0px; text-align: center; }

@media print {
  .rst-content .codeblock, .rst-content div[class^=3D"highlight"], .rst-con=
tent div[class^=3D"highlight"] pre { white-space: pre-wrap; }
}

.rst-content .admonition, .rst-content .admonition-todo, .rst-content .atte=
ntion, .rst-content .caution, .rst-content .danger, .rst-content .error, .r=
st-content .hint, .rst-content .important, .rst-content .note, .rst-content=
 .seealso, .rst-content .tip, .rst-content .warning { clear: both; }

.rst-content .admonition-todo .last, .rst-content .admonition-todo > :last-=
child, .rst-content .admonition .last, .rst-content .admonition > :last-chi=
ld, .rst-content .attention .last, .rst-content .attention > :last-child, .=
rst-content .caution .last, .rst-content .caution > :last-child, .rst-conte=
nt .danger .last, .rst-content .danger > :last-child, .rst-content .error .=
last, .rst-content .error > :last-child, .rst-content .hint .last, .rst-con=
tent .hint > :last-child, .rst-content .important .last, .rst-content .impo=
rtant > :last-child, .rst-content .note .last, .rst-content .note > :last-c=
hild, .rst-content .seealso .last, .rst-content .seealso > :last-child, .rs=
t-content .tip .last, .rst-content .tip > :last-child, .rst-content .warnin=
g .last, .rst-content .warning > :last-child { margin-bottom: 0px; }

.rst-content .admonition-title::before { margin-right: 4px; }

.rst-content .admonition table { border-color: rgba(0, 0, 0, 0.1); }

.rst-content .admonition table td, .rst-content .admonition table th { back=
ground: transparent !important; border-color: rgba(0, 0, 0, 0.1) !important=
; }

.rst-content .section ol.loweralpha, .rst-content .section ol.loweralpha > =
li, .rst-content .toctree-wrapper ol.loweralpha, .rst-content .toctree-wrap=
per ol.loweralpha > li, .rst-content section ol.loweralpha, .rst-content se=
ction ol.loweralpha > li { list-style: lower-alpha; }

.rst-content .section ol.upperalpha, .rst-content .section ol.upperalpha > =
li, .rst-content .toctree-wrapper ol.upperalpha, .rst-content .toctree-wrap=
per ol.upperalpha > li, .rst-content section ol.upperalpha, .rst-content se=
ction ol.upperalpha > li { list-style: upper-alpha; }

.rst-content .section ol li > *, .rst-content .section ul li > *, .rst-cont=
ent .toctree-wrapper ol li > *, .rst-content .toctree-wrapper ul li > *, .r=
st-content section ol li > *, .rst-content section ul li > * { margin-top: =
12px; margin-bottom: 12px; }

.rst-content .section ol li > :first-child, .rst-content .section ul li > :=
first-child, .rst-content .toctree-wrapper ol li > :first-child, .rst-conte=
nt .toctree-wrapper ul li > :first-child, .rst-content section ol li > :fir=
st-child, .rst-content section ul li > :first-child { margin-top: 0px; }

.rst-content .section ol li > p, .rst-content .section ol li > p:last-child=
, .rst-content .section ul li > p, .rst-content .section ul li > p:last-chi=
ld, .rst-content .toctree-wrapper ol li > p, .rst-content .toctree-wrapper =
ol li > p:last-child, .rst-content .toctree-wrapper ul li > p, .rst-content=
 .toctree-wrapper ul li > p:last-child, .rst-content section ol li > p, .rs=
t-content section ol li > p:last-child, .rst-content section ul li > p, .rs=
t-content section ul li > p:last-child { margin-bottom: 12px; }

.rst-content .section ol li > p:only-child, .rst-content .section ol li > p=
:only-child:last-child, .rst-content .section ul li > p:only-child, .rst-co=
ntent .section ul li > p:only-child:last-child, .rst-content .toctree-wrapp=
er ol li > p:only-child, .rst-content .toctree-wrapper ol li > p:only-child=
:last-child, .rst-content .toctree-wrapper ul li > p:only-child, .rst-conte=
nt .toctree-wrapper ul li > p:only-child:last-child, .rst-content section o=
l li > p:only-child, .rst-content section ol li > p:only-child:last-child, =
.rst-content section ul li > p:only-child, .rst-content section ul li > p:o=
nly-child:last-child { margin-bottom: 0px; }

.rst-content .section ol li > ol, .rst-content .section ol li > ul, .rst-co=
ntent .section ul li > ol, .rst-content .section ul li > ul, .rst-content .=
toctree-wrapper ol li > ol, .rst-content .toctree-wrapper ol li > ul, .rst-=
content .toctree-wrapper ul li > ol, .rst-content .toctree-wrapper ul li > =
ul, .rst-content section ol li > ol, .rst-content section ol li > ul, .rst-=
content section ul li > ol, .rst-content section ul li > ul { margin-bottom=
: 12px; }

.rst-content .section ol.simple li > *, .rst-content .section ol.simple li =
ol, .rst-content .section ol.simple li ul, .rst-content .section ul.simple =
li > *, .rst-content .section ul.simple li ol, .rst-content .section ul.sim=
ple li ul, .rst-content .toctree-wrapper ol.simple li > *, .rst-content .to=
ctree-wrapper ol.simple li ol, .rst-content .toctree-wrapper ol.simple li u=
l, .rst-content .toctree-wrapper ul.simple li > *, .rst-content .toctree-wr=
apper ul.simple li ol, .rst-content .toctree-wrapper ul.simple li ul, .rst-=
content section ol.simple li > *, .rst-content section ol.simple li ol, .rs=
t-content section ol.simple li ul, .rst-content section ul.simple li > *, .=
rst-content section ul.simple li ol, .rst-content section ul.simple li ul {=
 margin-top: 0px; margin-bottom: 0px; }

.rst-content .line-block { margin-left: 0px; margin-bottom: 24px; line-heig=
ht: 24px; }

.rst-content .line-block .line-block { margin-left: 24px; margin-bottom: 0p=
x; }

.rst-content .topic-title { font-weight: 700; margin-bottom: 12px; }

.rst-content .toc-backref { color: rgb(64, 64, 64); }

.rst-content .align-right { float: right; margin: 0px 0px 24px 24px; }

.rst-content .align-left { float: left; margin: 0px 24px 24px 0px; }

.rst-content .align-center { margin: auto; }

.rst-content .align-center:not(table) { display: block; }

.rst-content .code-block-caption .headerlink, .rst-content .eqno .headerlin=
k, .rst-content .toctree-wrapper > p.caption .headerlink, .rst-content dl d=
t .headerlink, .rst-content h1 .headerlink, .rst-content h2 .headerlink, .r=
st-content h3 .headerlink, .rst-content h4 .headerlink, .rst-content h5 .he=
aderlink, .rst-content h6 .headerlink, .rst-content p.caption .headerlink, =
.rst-content p .headerlink, .rst-content table > caption .headerlink { opac=
ity: 0; font-size: 14px; font-family: FontAwesome; margin-left: 0.5em; }

.rst-content .code-block-caption .headerlink:focus, .rst-content .code-bloc=
k-caption:hover .headerlink, .rst-content .eqno .headerlink:focus, .rst-con=
tent .eqno:hover .headerlink, .rst-content .toctree-wrapper > p.caption .he=
aderlink:focus, .rst-content .toctree-wrapper > p.caption:hover .headerlink=
, .rst-content dl dt .headerlink:focus, .rst-content dl dt:hover .headerlin=
k, .rst-content h1 .headerlink:focus, .rst-content h1:hover .headerlink, .r=
st-content h2 .headerlink:focus, .rst-content h2:hover .headerlink, .rst-co=
ntent h3 .headerlink:focus, .rst-content h3:hover .headerlink, .rst-content=
 h4 .headerlink:focus, .rst-content h4:hover .headerlink, .rst-content h5 .=
headerlink:focus, .rst-content h5:hover .headerlink, .rst-content h6 .heade=
rlink:focus, .rst-content h6:hover .headerlink, .rst-content p.caption .hea=
derlink:focus, .rst-content p.caption:hover .headerlink, .rst-content p .he=
aderlink:focus, .rst-content p:hover .headerlink, .rst-content table > capt=
ion .headerlink:focus, .rst-content table > caption:hover .headerlink { opa=
city: 1; }

.rst-content p a { overflow-wrap: anywhere; }

.rst-content .wy-table td p, .rst-content .wy-table td ul, .rst-content .wy=
-table th p, .rst-content .wy-table th ul, .rst-content table.docutils td p=
, .rst-content table.docutils td ul, .rst-content table.docutils th p, .rst=
-content table.docutils th ul, .rst-content table.field-list td p, .rst-con=
tent table.field-list td ul, .rst-content table.field-list th p, .rst-conte=
nt table.field-list th ul { font-size: inherit; }

.rst-content .btn:focus { outline: solid 2px; }

.rst-content table > caption .headerlink::after { font-size: 12px; }

.rst-content .centered { text-align: center; }

.rst-content .sidebar { float: right; width: 40%; display: block; margin: 0=
px 0px 24px 24px; padding: 24px; background: rgb(243, 246, 246); border: 1p=
x solid rgb(225, 228, 229); }

.rst-content .sidebar dl, .rst-content .sidebar p, .rst-content .sidebar ul=
 { font-size: 90%; }

.rst-content .sidebar .last, .rst-content .sidebar > :last-child { margin-b=
ottom: 0px; }

.rst-content .sidebar .sidebar-title { display: block; font-family: "Roboto=
 Slab", ff-tisa-web-pro, Georgia, Arial, sans-serif; font-weight: 700; back=
ground: rgb(225, 228, 229); padding: 6px 12px; margin: -24px -24px 24px; fo=
nt-size: 100%; }

.rst-content .highlighted { background: rgb(241, 196, 15); box-shadow: rgb(=
241, 196, 15) 0px 0px 0px 2px; display: inline; font-weight: 700; }

.rst-content .citation-reference, .rst-content .footnote-reference { vertic=
al-align: baseline; position: relative; top: -0.4em; line-height: 0; font-s=
ize: 90%; }

.rst-content .citation-reference > span.fn-bracket, .rst-content .footnote-=
reference > span.fn-bracket { display: none; }

.rst-content .hlist { width: 100%; }

.rst-content dl dt span.classifier::before { content: " : "; }

.rst-content dl dt span.classifier-delimiter { display: none !important; }

html.writer-html4 .rst-content table.docutils.citation, html.writer-html4 .=
rst-content table.docutils.footnote { background: none; border: none; }

html.writer-html4 .rst-content table.docutils.citation td, html.writer-html=
4 .rst-content table.docutils.citation tr, html.writer-html4 .rst-content t=
able.docutils.footnote td, html.writer-html4 .rst-content table.docutils.fo=
otnote tr { border: none; white-space: normal; background-color: transparen=
t !important; }

html.writer-html4 .rst-content table.docutils.citation td.label, html.write=
r-html4 .rst-content table.docutils.footnote td.label { padding-left: 0px; =
padding-right: 0px; vertical-align: top; }

html.writer-html5 .rst-content dl.citation, html.writer-html5 .rst-content =
dl.field-list, html.writer-html5 .rst-content dl.footnote { display: grid; =
grid-template-columns: auto minmax(80%, 95%); }

html.writer-html5 .rst-content dl.citation > dt, html.writer-html5 .rst-con=
tent dl.field-list > dt, html.writer-html5 .rst-content dl.footnote > dt { =
display: inline-grid; grid-template-columns: max-content auto; }

html.writer-html5 .rst-content aside.citation, html.writer-html5 .rst-conte=
nt aside.footnote, html.writer-html5 .rst-content div.citation { display: g=
rid; grid-template-columns: auto auto minmax(0.65rem, auto) minmax(40%, 95%=
); }

html.writer-html5 .rst-content aside.citation > span.label, html.writer-htm=
l5 .rst-content aside.footnote > span.label, html.writer-html5 .rst-content=
 div.citation > span.label { grid-column: 1 / 2; }

html.writer-html5 .rst-content aside.citation > span.backrefs, html.writer-=
html5 .rst-content aside.footnote > span.backrefs, html.writer-html5 .rst-c=
ontent div.citation > span.backrefs { grid-area: 1 / 2 / 3 / 3; }

html.writer-html5 .rst-content aside.citation > p, html.writer-html5 .rst-c=
ontent aside.footnote > p, html.writer-html5 .rst-content div.citation > p =
{ grid-column: 4 / 5; }

html.writer-html5 .rst-content dl.citation, html.writer-html5 .rst-content =
dl.field-list, html.writer-html5 .rst-content dl.footnote { margin-bottom: =
24px; }

html.writer-html5 .rst-content dl.citation > dt, html.writer-html5 .rst-con=
tent dl.field-list > dt, html.writer-html5 .rst-content dl.footnote > dt { =
padding-left: 1rem; }

html.writer-html5 .rst-content dl.citation > dd, html.writer-html5 .rst-con=
tent dl.citation > dt, html.writer-html5 .rst-content dl.field-list > dd, h=
tml.writer-html5 .rst-content dl.field-list > dt, html.writer-html5 .rst-co=
ntent dl.footnote > dd, html.writer-html5 .rst-content dl.footnote > dt { m=
argin-bottom: 0px; }

html.writer-html5 .rst-content dl.citation, html.writer-html5 .rst-content =
dl.footnote { font-size: 0.9rem; }

html.writer-html5 .rst-content dl.citation > dt, html.writer-html5 .rst-con=
tent dl.footnote > dt { margin: 0px 0.5rem 0.5rem 0px; line-height: 1.2rem;=
 word-break: break-all; font-weight: 400; }

html.writer-html5 .rst-content dl.citation > dt > span.brackets::before, ht=
ml.writer-html5 .rst-content dl.footnote > dt > span.brackets::before { con=
tent: "["; }

html.writer-html5 .rst-content dl.citation > dt > span.brackets::after, htm=
l.writer-html5 .rst-content dl.footnote > dt > span.brackets::after { conte=
nt: "]"; }

html.writer-html5 .rst-content dl.citation > dt > span.fn-backref, html.wri=
ter-html5 .rst-content dl.footnote > dt > span.fn-backref { text-align: lef=
t; font-style: italic; margin-left: 0.65rem; word-break: break-word; word-s=
pacing: -0.1rem; max-width: 5rem; }

html.writer-html5 .rst-content dl.citation > dt > span.fn-backref > a, html=
.writer-html5 .rst-content dl.footnote > dt > span.fn-backref > a { word-br=
eak: keep-all; }

html.writer-html5 .rst-content dl.citation > dt > span.fn-backref > a:not(:=
first-child)::before, html.writer-html5 .rst-content dl.footnote > dt > spa=
n.fn-backref > a:not(:first-child)::before { content: " "; }

html.writer-html5 .rst-content dl.citation > dd, html.writer-html5 .rst-con=
tent dl.footnote > dd { margin: 0px 0px 0.5rem; line-height: 1.2rem; }

html.writer-html5 .rst-content dl.citation > dd p, html.writer-html5 .rst-c=
ontent dl.footnote > dd p { font-size: 0.9rem; }

html.writer-html5 .rst-content aside.citation, html.writer-html5 .rst-conte=
nt aside.footnote, html.writer-html5 .rst-content div.citation { padding-le=
ft: 1rem; padding-right: 1rem; font-size: 0.9rem; line-height: 1.2rem; }

html.writer-html5 .rst-content aside.citation p, html.writer-html5 .rst-con=
tent aside.footnote p, html.writer-html5 .rst-content div.citation p { font=
-size: 0.9rem; line-height: 1.2rem; margin-bottom: 12px; }

html.writer-html5 .rst-content aside.citation span.backrefs, html.writer-ht=
ml5 .rst-content aside.footnote span.backrefs, html.writer-html5 .rst-conte=
nt div.citation span.backrefs { text-align: left; font-style: italic; margi=
n-left: 0.65rem; word-break: break-word; word-spacing: -0.1rem; max-width: =
5rem; }

html.writer-html5 .rst-content aside.citation span.backrefs > a, html.write=
r-html5 .rst-content aside.footnote span.backrefs > a, html.writer-html5 .r=
st-content div.citation span.backrefs > a { word-break: keep-all; }

html.writer-html5 .rst-content aside.citation span.backrefs > a:not(:first-=
child)::before, html.writer-html5 .rst-content aside.footnote span.backrefs=
 > a:not(:first-child)::before, html.writer-html5 .rst-content div.citation=
 span.backrefs > a:not(:first-child)::before { content: " "; }

html.writer-html5 .rst-content aside.citation span.label, html.writer-html5=
 .rst-content aside.footnote span.label, html.writer-html5 .rst-content div=
.citation span.label { line-height: 1.2rem; }

html.writer-html5 .rst-content aside.citation-list, html.writer-html5 .rst-=
content aside.footnote-list, html.writer-html5 .rst-content div.citation-li=
st { margin-bottom: 24px; }

html.writer-html5 .rst-content dl.option-list kbd { font-size: 0.9rem; }

.rst-content table.docutils.footnote, html.writer-html4 .rst-content table.=
docutils.citation, html.writer-html5 .rst-content aside.footnote, html.writ=
er-html5 .rst-content aside.footnote-list aside.footnote, html.writer-html5=
 .rst-content div.citation-list > div.citation, html.writer-html5 .rst-cont=
ent dl.citation, html.writer-html5 .rst-content dl.footnote { color: grey; =
}

.rst-content table.docutils.footnote code, .rst-content table.docutils.foot=
note tt, html.writer-html4 .rst-content table.docutils.citation code, html.=
writer-html4 .rst-content table.docutils.citation tt, html.writer-html5 .rs=
t-content aside.footnote-list aside.footnote code, html.writer-html5 .rst-c=
ontent aside.footnote-list aside.footnote tt, html.writer-html5 .rst-conten=
t aside.footnote code, html.writer-html5 .rst-content aside.footnote tt, ht=
ml.writer-html5 .rst-content div.citation-list > div.citation code, html.wr=
iter-html5 .rst-content div.citation-list > div.citation tt, html.writer-ht=
ml5 .rst-content dl.citation code, html.writer-html5 .rst-content dl.citati=
on tt, html.writer-html5 .rst-content dl.footnote code, html.writer-html5 .=
rst-content dl.footnote tt { color: rgb(85, 85, 85); }

.rst-content .wy-table-responsive.citation, .rst-content .wy-table-responsi=
ve.footnote { margin-bottom: 0px; }

.rst-content .wy-table-responsive.citation + :not(.citation), .rst-content =
.wy-table-responsive.footnote + :not(.footnote) { margin-top: 24px; }

.rst-content .wy-table-responsive.citation:last-child, .rst-content .wy-tab=
le-responsive.footnote:last-child { margin-bottom: 24px; }

.rst-content table.docutils th { border-color: rgb(225, 228, 229); }

html.writer-html5 .rst-content table.docutils th { border: 1px solid rgb(22=
5, 228, 229); }

html.writer-html5 .rst-content table.docutils td > p, html.writer-html5 .rs=
t-content table.docutils th > p { line-height: 1rem; margin-bottom: 0px; fo=
nt-size: 0.9rem; }

.rst-content table.docutils td .last, .rst-content table.docutils td .last =
> :last-child { margin-bottom: 0px; }

.rst-content table.field-list, .rst-content table.field-list td { border: n=
one; }

.rst-content table.field-list td p { line-height: inherit; }

.rst-content table.field-list td > strong { display: inline-block; }

.rst-content table.field-list .field-name { padding-right: 10px; text-align=
: left; white-space: nowrap; }

.rst-content table.field-list .field-body { text-align: left; }

.rst-content code, .rst-content tt { color: rgb(0, 0, 0); font-family: SFMo=
no-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", Cour=
ier, monospace; padding: 2px 5px; }

.rst-content code big, .rst-content code em, .rst-content tt big, .rst-cont=
ent tt em { font-size: 100% !important; line-height: normal; }

.rst-content code.literal, .rst-content tt.literal { color: rgb(231, 76, 60=
); white-space: normal; }

.rst-content code.xref, .rst-content tt.xref, a .rst-content code, a .rst-c=
ontent tt { font-weight: 700; color: rgb(64, 64, 64); overflow-wrap: normal=
; }

.rst-content kbd, .rst-content pre, .rst-content samp { font-family: SFMono=
-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", Courie=
r, monospace; }

.rst-content a code, .rst-content a tt { color: rgb(41, 128, 185); }

.rst-content dl { margin-bottom: 24px; }

.rst-content dl dt { font-weight: 700; margin-bottom: 12px; }

.rst-content dl ol, .rst-content dl p, .rst-content dl table, .rst-content =
dl ul { margin-bottom: 12px; }

.rst-content dl dd { margin: 0px 0px 12px 24px; line-height: 24px; }

.rst-content dl dd > ol:last-child, .rst-content dl dd > p:last-child, .rst=
-content dl dd > table:last-child, .rst-content dl dd > ul:last-child { mar=
gin-bottom: 0px; }

html.writer-html4 .rst-content dl:not(.docutils), html.writer-html5 .rst-co=
ntent dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.cita=
tion):not(.glossary):not(.simple) { margin-bottom: 24px; }

html.writer-html4 .rst-content dl:not(.docutils) > dt, html.writer-html5 .r=
st-content dl[class]:not(.option-list):not(.field-list):not(.footnote):not(=
.citation):not(.glossary):not(.simple) > dt { display: table; margin: 6px 0=
px; font-size: 90%; line-height: normal; background: rgb(231, 242, 250); co=
lor: rgb(41, 128, 185); border-top: 3px solid rgb(106, 176, 222); padding: =
6px; position: relative; }

html.writer-html4 .rst-content dl:not(.docutils) > dt::before, html.writer-=
html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footno=
te):not(.citation):not(.glossary):not(.simple) > dt::before { color: rgb(10=
6, 176, 222); }

html.writer-html4 .rst-content dl:not(.docutils) > dt .headerlink, html.wri=
ter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.fo=
otnote):not(.citation):not(.glossary):not(.simple) > dt .headerlink { color=
: rgb(64, 64, 64); font-size: 100% !important; }

html.writer-html4 .rst-content dl:not(.docutils) dl:not(.option-list):not(.=
field-list):not(.footnote):not(.citation):not(.glossary):not(.simple) > dt,=
 html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list=
):not(.footnote):not(.citation):not(.glossary):not(.simple) dl:not(.option-=
list):not(.field-list):not(.footnote):not(.citation):not(.glossary):not(.si=
mple) > dt { margin-bottom: 6px; border-top: none; border-right: none; bord=
er-bottom: none; border-image: initial; border-left: 3px solid rgb(204, 204=
, 204); background: rgb(240, 240, 240); color: rgb(85, 85, 85); }

html.writer-html4 .rst-content dl:not(.docutils) dl:not(.option-list):not(.=
field-list):not(.footnote):not(.citation):not(.glossary):not(.simple) > dt =
.headerlink, html.writer-html5 .rst-content dl[class]:not(.option-list):not=
(.field-list):not(.footnote):not(.citation):not(.glossary):not(.simple) dl:=
not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.gloss=
ary):not(.simple) > dt .headerlink { color: rgb(64, 64, 64); font-size: 100=
% !important; }

html.writer-html4 .rst-content dl:not(.docutils) > dt:first-child, html.wri=
ter-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.fo=
otnote):not(.citation):not(.glossary):not(.simple) > dt:first-child { margi=
n-top: 0px; }

html.writer-html4 .rst-content dl:not(.docutils) code.descclassname, html.w=
riter-html4 .rst-content dl:not(.docutils) code.descname, html.writer-html4=
 .rst-content dl:not(.docutils) tt.descclassname, html.writer-html4 .rst-co=
ntent dl:not(.docutils) tt.descname, html.writer-html5 .rst-content dl[clas=
s]:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.gl=
ossary):not(.simple) code.descclassname, html.writer-html5 .rst-content dl[=
class]:not(.option-list):not(.field-list):not(.footnote):not(.citation):not=
(.glossary):not(.simple) code.descname, html.writer-html5 .rst-content dl[c=
lass]:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(=
.glossary):not(.simple) tt.descclassname, html.writer-html5 .rst-content dl=
[class]:not(.option-list):not(.field-list):not(.footnote):not(.citation):no=
t(.glossary):not(.simple) tt.descname { background-color: transparent; bord=
er: none; padding: 0px; font-size: 100% !important; }

html.writer-html4 .rst-content dl:not(.docutils) code.descname, html.writer=
-html4 .rst-content dl:not(.docutils) tt.descname, html.writer-html5 .rst-c=
ontent dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.cit=
ation):not(.glossary):not(.simple) code.descname, html.writer-html5 .rst-co=
ntent dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.cita=
tion):not(.glossary):not(.simple) tt.descname { font-weight: 700; }

html.writer-html4 .rst-content dl:not(.docutils) .optional, html.writer-htm=
l5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote)=
:not(.citation):not(.glossary):not(.simple) .optional { display: inline-blo=
ck; padding: 0px 4px; color: rgb(0, 0, 0); font-weight: 700; }

html.writer-html4 .rst-content dl:not(.docutils) .property, html.writer-htm=
l5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote)=
:not(.citation):not(.glossary):not(.simple) .property { display: inline-blo=
ck; padding-right: 8px; max-width: 100%; }

html.writer-html4 .rst-content dl:not(.docutils) .k, html.writer-html5 .rst=
-content dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.c=
itation):not(.glossary):not(.simple) .k { font-style: italic; }

html.writer-html4 .rst-content dl:not(.docutils) .descclassname, html.write=
r-html4 .rst-content dl:not(.docutils) .descname, html.writer-html4 .rst-co=
ntent dl:not(.docutils) .sig-name, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.glos=
sary):not(.simple) .descclassname, html.writer-html5 .rst-content dl[class]=
:not(.option-list):not(.field-list):not(.footnote):not(.citation):not(.glos=
sary):not(.simple) .descname, html.writer-html5 .rst-content dl[class]:not(=
.option-list):not(.field-list):not(.footnote):not(.citation):not(.glossary)=
:not(.simple) .sig-name { font-family: SFMono-Regular, Menlo, Monaco, Conso=
las, "Liberation Mono", "Courier New", Courier, monospace; color: rgb(0, 0,=
 0); }

.rst-content .viewcode-back, .rst-content .viewcode-link { display: inline-=
block; color: rgb(39, 174, 96); font-size: 80%; padding-left: 24px; }

.rst-content .viewcode-back { display: block; float: right; }

.rst-content p.rubric { margin-bottom: 12px; font-weight: 700; }

.rst-content code.download, .rst-content tt.download { background: inherit;=
 padding: inherit; font-weight: 400; font-family: inherit; font-size: inher=
it; color: inherit; border: inherit; white-space: inherit; }

.rst-content code.download span:first-child, .rst-content tt.download span:=
first-child { -webkit-font-smoothing: subpixel-antialiased; }

.rst-content code.download span:first-child::before, .rst-content tt.downlo=
ad span:first-child::before { margin-right: 4px; }

.rst-content .guilabel, .rst-content .menuselection { font-size: 80%; font-=
weight: 700; border-radius: 4px; padding: 2.4px 6px; margin: auto 2px; }

.rst-content .guilabel, .rst-content .menuselection { border: 1px solid rgb=
(127, 187, 227); background: rgb(231, 242, 250); }

.rst-content :not(dl.option-list) > :not(dt):not(kbd):not(.kbd) > .kbd, .rs=
t-content :not(dl.option-list) > :not(dt):not(kbd):not(.kbd) > kbd { color:=
 inherit; font-size: 80%; background-color: rgb(255, 255, 255); border: 1px=
 solid rgb(166, 166, 166); border-radius: 4px; box-shadow: grey 0px 2px; pa=
dding: 2.4px 6px; margin: auto 0px; }

.rst-content .versionmodified { font-style: italic; }

@media screen and (max-width: 480px) {
  .rst-content .sidebar { width: 100%; }
}

span[id*=3D"MathJax-Span"] { color: rgb(64, 64, 64); }

.math { text-align: center; }

@font-face { font-family: Lato; src: url("fonts/lato-normal.woff2?bd03a2cc2=
77bbbc338d464e679fe9942") format("woff2"), url("fonts/lato-normal.woff?27bd=
77b9162d388cb8d4c4217c7c5e2a") format("woff"); font-weight: 400; font-style=
: normal; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-bold.woff2?cccb8974858=
13c7c256901dbca54ecf2") format("woff2"), url("fonts/lato-bold.woff?d878b6c2=
9b10beca227e9eef4246111b") format("woff"); font-weight: 700; font-style: no=
rmal; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-bold-italic.woff2?0b6b=
b6725576b072c5d0b02ecdd1900d") format("woff2"), url("fonts/lato-bold-italic=
.woff?9c7e4e9eb485b4a121c760e61bc3707c") format("woff"); font-weight: 700; =
font-style: italic; font-display: block; }

@font-face { font-family: Lato; src: url("fonts/lato-normal-italic.woff2?4e=
b103b4d12be57cb1d040ed5e162e9d") format("woff2"), url("fonts/lato-normal-it=
alic.woff?f28f2d6482446544ef1ea1ccc6dd5892") format("woff"); font-weight: 4=
00; font-style: italic; font-display: block; }

@font-face { font-family: "Roboto Slab"; font-style: normal; font-weight: 4=
00; src: url("fonts/Roboto-Slab-Regular.woff2?7abf5b8d04d26a2cafea937019bca=
958") format("woff2"), url("fonts/Roboto-Slab-Regular.woff?c1be9284088d487c=
5e3ff0a10a92e58c") format("woff"); font-display: block; }

@font-face { font-family: "Roboto Slab"; font-style: normal; font-weight: 7=
00; src: url("fonts/Roboto-Slab-Bold.woff2?9984f4a9bda09be08e83f2506954adbe=
") format("woff2"), url("fonts/Roboto-Slab-Bold.woff?bed5564a116b05148e3b3b=
ea6fb1162a") format("woff"); font-display: block; }
------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/_static/asciinema-player.css

@charset "utf-8";

.asciinema-player-wrapper { position: relative; text-align: center; outline=
: none; }

.asciinema-player-wrapper .title-bar { display: none; top: -78px; transitio=
n: top 0.15s linear 0s; position: absolute; left: 0px; right: 0px; box-sizi=
ng: content-box; font-size: 20px; line-height: 1em; padding: 15px; font-fam=
ily: sans-serif; color: white; background-color: rgba(0, 0, 0, 0.8); }

.asciinema-player-wrapper .title-bar img { vertical-align: middle; height: =
48px; margin-right: 16px; }

.asciinema-player-wrapper .title-bar a { color: white; text-decoration: und=
erline; }

.asciinema-player-wrapper .title-bar a:hover { text-decoration: none; }

.asciinema-player-wrapper:fullscreen { background-color: rgb(0, 0, 0); widt=
h: 100%; height: 100%; display: flex; justify-content: center; align-items:=
 center; }

.asciinema-player-wrapper:fullscreen .asciinema-player { position: static; =
}

.asciinema-player-wrapper:fullscreen .title-bar { display: initial; }

.asciinema-player-wrapper:fullscreen.hud .title-bar { top: 0px; }

.asciinema-player-wrapper:-webkit-full-screen { background-color: rgb(0, 0,=
 0); width: 100%; height: 100%; display: flex; justify-content: center; ali=
gn-items: center; }

.asciinema-player-wrapper:-webkit-full-screen .asciinema-player { position:=
 static; }

.asciinema-player-wrapper:-webkit-full-screen .title-bar { display: initial=
; }

.asciinema-player-wrapper:-webkit-full-screen.hud .title-bar { top: 0px; }

.asciinema-player-wrapper .asciinema-player { text-align: left; display: in=
line-block; padding: 0px; position: relative; box-sizing: content-box; over=
flow: hidden; max-width: 100%; }

.asciinema-terminal { box-sizing: content-box; overflow: hidden; padding: 0=
px; margin: 0px; display: block; white-space: pre; border: 0.5em solid; ove=
rflow-wrap: normal; word-break: normal; border-radius: 0px; cursor: text; f=
ont-family: Consolas, Menlo, "Bitstream Vera Sans Mono", monospace, "Powerl=
ine Symbols"; line-height: 1.33333em; }

.asciinema-terminal .line { letter-spacing: normal; overflow: hidden; heigh=
t: 1.33333em; }

.asciinema-terminal .line span { padding: 0px; display: inline-block; heigh=
t: 1.33333em; }

.asciinema-terminal .line { display: block; width: 200%; }

.asciinema-terminal .bright { font-weight: bold; }

.asciinema-terminal .underline { text-decoration: underline; }

.asciinema-terminal .italic { font-style: italic; }

.asciinema-terminal.font-small { font-size: 12px; }

.asciinema-terminal.font-medium { font-size: 18px; }

.asciinema-terminal.font-big { font-size: 24px; }

.asciinema-player .control-bar { width: 100%; height: 32px; background: lin=
ear-gradient(rgba(0, 0, 0, 0.5) 0%, rgb(0, 0, 0) 25%, rgb(0, 0, 0) 100%); c=
olor: rgb(187, 187, 187); box-sizing: content-box; line-height: 1; bottom: =
-35px; left: 0px; transition: bottom 0.15s linear 0s; }

.asciinema-player .control-bar * { box-sizing: inherit; font-size: 0px; }

.asciinema-player .control-bar svg.icon path { fill: rgb(187, 187, 187); }

.asciinema-player .control-bar .playback-button { display: block; float: le=
ft; cursor: pointer; height: 12px; width: 12px; padding: 10px; }

.asciinema-player .control-bar .playback-button svg { height: 12px; width: =
12px; }

.asciinema-player .control-bar .timer { display: block; float: left; width:=
 50px; height: 100%; text-align: center; font-family: Helvetica, Arial, san=
s-serif; font-size: 11px; font-weight: bold; line-height: 32px; cursor: def=
ault; }

.asciinema-player .control-bar .timer span { display: inline-block; font-si=
ze: inherit; }

.asciinema-player .control-bar .timer .time-remaining { display: none; }

.asciinema-player .control-bar .timer:hover .time-elapsed { display: none; =
}

.asciinema-player .control-bar .timer:hover .time-remaining { display: inli=
ne; }

.asciinema-player .control-bar .progressbar { display: block; overflow: hid=
den; height: 100%; padding: 0px 10px; }

.asciinema-player .control-bar .progressbar .bar { display: block; cursor: =
pointer; height: 100%; padding-top: 15px; font-size: 0px; }

.asciinema-player .control-bar .progressbar .bar .gutter { display: block; =
height: 3px; background-color: rgb(51, 51, 51); }

.asciinema-player .control-bar .progressbar .bar .gutter span { display: in=
line-block; height: 100%; background-color: rgb(187, 187, 187); border-radi=
us: 3px; }

.asciinema-player .control-bar.live .progressbar .bar { cursor: default; }

.asciinema-player .control-bar .fullscreen-button { display: block; float: =
right; width: 14px; height: 14px; padding: 9px; cursor: pointer; }

.asciinema-player .control-bar .fullscreen-button svg { width: 14px; height=
: 14px; }

.asciinema-player .control-bar .fullscreen-button svg:first-child { display=
: inline; }

.asciinema-player .control-bar .fullscreen-button svg:last-child { display:=
 none; }

.asciinema-player-wrapper.hud .control-bar { bottom: 0px; }

.asciinema-player-wrapper:fullscreen .fullscreen-button svg:first-child { d=
isplay: none; }

.asciinema-player-wrapper:fullscreen .fullscreen-button svg:last-child { di=
splay: inline; }

.asciinema-player-wrapper:-webkit-full-screen .fullscreen-button svg:first-=
child { display: none; }

.asciinema-player-wrapper:-webkit-full-screen .fullscreen-button svg:last-c=
hild { display: inline; }

.asciinema-player .loading { z-index: 10; background-repeat: no-repeat; bac=
kground-position: center center; position: absolute; inset: 0px 0px 32px; b=
ackground-color: rgba(0, 0, 0, 0.5); }

.asciinema-player .start-prompt { background-repeat: no-repeat; background-=
position: center center; position: absolute; inset: 0px 0px 32px; z-index: =
20; cursor: pointer; }

.asciinema-player .start-prompt .play-button { font-size: 0px; }

.asciinema-player .start-prompt .play-button { position: absolute; inset: 0=
px; text-align: center; color: white; display: table; width: 100%; height: =
100%; }

.asciinema-player .start-prompt .play-button div { vertical-align: middle; =
display: table-cell; }

.asciinema-player .start-prompt .play-button div span { width: 96px; height=
: 96px; display: inline-block; }

@-webkit-keyframes expand {=20
  0% { transform: scale(0); }
  50% { transform: scale(1); }
  100% { z-index: 1; }
}

@keyframes expand {=20
  0% { transform: scale(0); }
  50% { transform: scale(1); }
  100% { z-index: 1; }
}

.loader { position: absolute; left: 50%; top: 50%; margin: -20px 0px 0px -2=
0px; background-color: white; border-radius: 50%; box-shadow: rgb(20, 20, 2=
0) 0px 0px 0px 6.66667px; width: 40px; height: 40px; }

.loader::before, .loader::after { content: ""; position: absolute; left: 50=
%; top: 50%; display: block; margin: -21px 0px 0px -21px; border-radius: 50=
%; z-index: 2; width: 42px; height: 42px; }

.loader::before { background-color: rgb(20, 20, 20); animation: 1.6s linear=
 0s infinite normal both running expand; }

.loader::after { background-color: white; animation: 1.6s linear 0.8s infin=
ite normal both running expand; }

.asciinema-terminal .fg-16 { color: rgb(0, 0, 0); }

.asciinema-terminal .bg-16 { background-color: rgb(0, 0, 0); }

.asciinema-terminal .fg-17 { color: rgb(0, 0, 95); }

.asciinema-terminal .bg-17 { background-color: rgb(0, 0, 95); }

.asciinema-terminal .fg-18 { color: rgb(0, 0, 135); }

.asciinema-terminal .bg-18 { background-color: rgb(0, 0, 135); }

.asciinema-terminal .fg-19 { color: rgb(0, 0, 175); }

.asciinema-terminal .bg-19 { background-color: rgb(0, 0, 175); }

.asciinema-terminal .fg-20 { color: rgb(0, 0, 215); }

.asciinema-terminal .bg-20 { background-color: rgb(0, 0, 215); }

.asciinema-terminal .fg-21 { color: rgb(0, 0, 255); }

.asciinema-terminal .bg-21 { background-color: rgb(0, 0, 255); }

.asciinema-terminal .fg-22 { color: rgb(0, 95, 0); }

.asciinema-terminal .bg-22 { background-color: rgb(0, 95, 0); }

.asciinema-terminal .fg-23 { color: rgb(0, 95, 95); }

.asciinema-terminal .bg-23 { background-color: rgb(0, 95, 95); }

.asciinema-terminal .fg-24 { color: rgb(0, 95, 135); }

.asciinema-terminal .bg-24 { background-color: rgb(0, 95, 135); }

.asciinema-terminal .fg-25 { color: rgb(0, 95, 175); }

.asciinema-terminal .bg-25 { background-color: rgb(0, 95, 175); }

.asciinema-terminal .fg-26 { color: rgb(0, 95, 215); }

.asciinema-terminal .bg-26 { background-color: rgb(0, 95, 215); }

.asciinema-terminal .fg-27 { color: rgb(0, 95, 255); }

.asciinema-terminal .bg-27 { background-color: rgb(0, 95, 255); }

.asciinema-terminal .fg-28 { color: rgb(0, 135, 0); }

.asciinema-terminal .bg-28 { background-color: rgb(0, 135, 0); }

.asciinema-terminal .fg-29 { color: rgb(0, 135, 95); }

.asciinema-terminal .bg-29 { background-color: rgb(0, 135, 95); }

.asciinema-terminal .fg-30 { color: rgb(0, 135, 135); }

.asciinema-terminal .bg-30 { background-color: rgb(0, 135, 135); }

.asciinema-terminal .fg-31 { color: rgb(0, 135, 175); }

.asciinema-terminal .bg-31 { background-color: rgb(0, 135, 175); }

.asciinema-terminal .fg-32 { color: rgb(0, 135, 215); }

.asciinema-terminal .bg-32 { background-color: rgb(0, 135, 215); }

.asciinema-terminal .fg-33 { color: rgb(0, 135, 255); }

.asciinema-terminal .bg-33 { background-color: rgb(0, 135, 255); }

.asciinema-terminal .fg-34 { color: rgb(0, 175, 0); }

.asciinema-terminal .bg-34 { background-color: rgb(0, 175, 0); }

.asciinema-terminal .fg-35 { color: rgb(0, 175, 95); }

.asciinema-terminal .bg-35 { background-color: rgb(0, 175, 95); }

.asciinema-terminal .fg-36 { color: rgb(0, 175, 135); }

.asciinema-terminal .bg-36 { background-color: rgb(0, 175, 135); }

.asciinema-terminal .fg-37 { color: rgb(0, 175, 175); }

.asciinema-terminal .bg-37 { background-color: rgb(0, 175, 175); }

.asciinema-terminal .fg-38 { color: rgb(0, 175, 215); }

.asciinema-terminal .bg-38 { background-color: rgb(0, 175, 215); }

.asciinema-terminal .fg-39 { color: rgb(0, 175, 255); }

.asciinema-terminal .bg-39 { background-color: rgb(0, 175, 255); }

.asciinema-terminal .fg-40 { color: rgb(0, 215, 0); }

.asciinema-terminal .bg-40 { background-color: rgb(0, 215, 0); }

.asciinema-terminal .fg-41 { color: rgb(0, 215, 95); }

.asciinema-terminal .bg-41 { background-color: rgb(0, 215, 95); }

.asciinema-terminal .fg-42 { color: rgb(0, 215, 135); }

.asciinema-terminal .bg-42 { background-color: rgb(0, 215, 135); }

.asciinema-terminal .fg-43 { color: rgb(0, 215, 175); }

.asciinema-terminal .bg-43 { background-color: rgb(0, 215, 175); }

.asciinema-terminal .fg-44 { color: rgb(0, 215, 215); }

.asciinema-terminal .bg-44 { background-color: rgb(0, 215, 215); }

.asciinema-terminal .fg-45 { color: rgb(0, 215, 255); }

.asciinema-terminal .bg-45 { background-color: rgb(0, 215, 255); }

.asciinema-terminal .fg-46 { color: rgb(0, 255, 0); }

.asciinema-terminal .bg-46 { background-color: rgb(0, 255, 0); }

.asciinema-terminal .fg-47 { color: rgb(0, 255, 95); }

.asciinema-terminal .bg-47 { background-color: rgb(0, 255, 95); }

.asciinema-terminal .fg-48 { color: rgb(0, 255, 135); }

.asciinema-terminal .bg-48 { background-color: rgb(0, 255, 135); }

.asciinema-terminal .fg-49 { color: rgb(0, 255, 175); }

.asciinema-terminal .bg-49 { background-color: rgb(0, 255, 175); }

.asciinema-terminal .fg-50 { color: rgb(0, 255, 215); }

.asciinema-terminal .bg-50 { background-color: rgb(0, 255, 215); }

.asciinema-terminal .fg-51 { color: rgb(0, 255, 255); }

.asciinema-terminal .bg-51 { background-color: rgb(0, 255, 255); }

.asciinema-terminal .fg-52 { color: rgb(95, 0, 0); }

.asciinema-terminal .bg-52 { background-color: rgb(95, 0, 0); }

.asciinema-terminal .fg-53 { color: rgb(95, 0, 95); }

.asciinema-terminal .bg-53 { background-color: rgb(95, 0, 95); }

.asciinema-terminal .fg-54 { color: rgb(95, 0, 135); }

.asciinema-terminal .bg-54 { background-color: rgb(95, 0, 135); }

.asciinema-terminal .fg-55 { color: rgb(95, 0, 175); }

.asciinema-terminal .bg-55 { background-color: rgb(95, 0, 175); }

.asciinema-terminal .fg-56 { color: rgb(95, 0, 215); }

.asciinema-terminal .bg-56 { background-color: rgb(95, 0, 215); }

.asciinema-terminal .fg-57 { color: rgb(95, 0, 255); }

.asciinema-terminal .bg-57 { background-color: rgb(95, 0, 255); }

.asciinema-terminal .fg-58 { color: rgb(95, 95, 0); }

.asciinema-terminal .bg-58 { background-color: rgb(95, 95, 0); }

.asciinema-terminal .fg-59 { color: rgb(95, 95, 95); }

.asciinema-terminal .bg-59 { background-color: rgb(95, 95, 95); }

.asciinema-terminal .fg-60 { color: rgb(95, 95, 135); }

.asciinema-terminal .bg-60 { background-color: rgb(95, 95, 135); }

.asciinema-terminal .fg-61 { color: rgb(95, 95, 175); }

.asciinema-terminal .bg-61 { background-color: rgb(95, 95, 175); }

.asciinema-terminal .fg-62 { color: rgb(95, 95, 215); }

.asciinema-terminal .bg-62 { background-color: rgb(95, 95, 215); }

.asciinema-terminal .fg-63 { color: rgb(95, 95, 255); }

.asciinema-terminal .bg-63 { background-color: rgb(95, 95, 255); }

.asciinema-terminal .fg-64 { color: rgb(95, 135, 0); }

.asciinema-terminal .bg-64 { background-color: rgb(95, 135, 0); }

.asciinema-terminal .fg-65 { color: rgb(95, 135, 95); }

.asciinema-terminal .bg-65 { background-color: rgb(95, 135, 95); }

.asciinema-terminal .fg-66 { color: rgb(95, 135, 135); }

.asciinema-terminal .bg-66 { background-color: rgb(95, 135, 135); }

.asciinema-terminal .fg-67 { color: rgb(95, 135, 175); }

.asciinema-terminal .bg-67 { background-color: rgb(95, 135, 175); }

.asciinema-terminal .fg-68 { color: rgb(95, 135, 215); }

.asciinema-terminal .bg-68 { background-color: rgb(95, 135, 215); }

.asciinema-terminal .fg-69 { color: rgb(95, 135, 255); }

.asciinema-terminal .bg-69 { background-color: rgb(95, 135, 255); }

.asciinema-terminal .fg-70 { color: rgb(95, 175, 0); }

.asciinema-terminal .bg-70 { background-color: rgb(95, 175, 0); }

.asciinema-terminal .fg-71 { color: rgb(95, 175, 95); }

.asciinema-terminal .bg-71 { background-color: rgb(95, 175, 95); }

.asciinema-terminal .fg-72 { color: rgb(95, 175, 135); }

.asciinema-terminal .bg-72 { background-color: rgb(95, 175, 135); }

.asciinema-terminal .fg-73 { color: rgb(95, 175, 175); }

.asciinema-terminal .bg-73 { background-color: rgb(95, 175, 175); }

.asciinema-terminal .fg-74 { color: rgb(95, 175, 215); }

.asciinema-terminal .bg-74 { background-color: rgb(95, 175, 215); }

.asciinema-terminal .fg-75 { color: rgb(95, 175, 255); }

.asciinema-terminal .bg-75 { background-color: rgb(95, 175, 255); }

.asciinema-terminal .fg-76 { color: rgb(95, 215, 0); }

.asciinema-terminal .bg-76 { background-color: rgb(95, 215, 0); }

.asciinema-terminal .fg-77 { color: rgb(95, 215, 95); }

.asciinema-terminal .bg-77 { background-color: rgb(95, 215, 95); }

.asciinema-terminal .fg-78 { color: rgb(95, 215, 135); }

.asciinema-terminal .bg-78 { background-color: rgb(95, 215, 135); }

.asciinema-terminal .fg-79 { color: rgb(95, 215, 175); }

.asciinema-terminal .bg-79 { background-color: rgb(95, 215, 175); }

.asciinema-terminal .fg-80 { color: rgb(95, 215, 215); }

.asciinema-terminal .bg-80 { background-color: rgb(95, 215, 215); }

.asciinema-terminal .fg-81 { color: rgb(95, 215, 255); }

.asciinema-terminal .bg-81 { background-color: rgb(95, 215, 255); }

.asciinema-terminal .fg-82 { color: rgb(95, 255, 0); }

.asciinema-terminal .bg-82 { background-color: rgb(95, 255, 0); }

.asciinema-terminal .fg-83 { color: rgb(95, 255, 95); }

.asciinema-terminal .bg-83 { background-color: rgb(95, 255, 95); }

.asciinema-terminal .fg-84 { color: rgb(95, 255, 135); }

.asciinema-terminal .bg-84 { background-color: rgb(95, 255, 135); }

.asciinema-terminal .fg-85 { color: rgb(95, 255, 175); }

.asciinema-terminal .bg-85 { background-color: rgb(95, 255, 175); }

.asciinema-terminal .fg-86 { color: rgb(95, 255, 215); }

.asciinema-terminal .bg-86 { background-color: rgb(95, 255, 215); }

.asciinema-terminal .fg-87 { color: rgb(95, 255, 255); }

.asciinema-terminal .bg-87 { background-color: rgb(95, 255, 255); }

.asciinema-terminal .fg-88 { color: rgb(135, 0, 0); }

.asciinema-terminal .bg-88 { background-color: rgb(135, 0, 0); }

.asciinema-terminal .fg-89 { color: rgb(135, 0, 95); }

.asciinema-terminal .bg-89 { background-color: rgb(135, 0, 95); }

.asciinema-terminal .fg-90 { color: rgb(135, 0, 135); }

.asciinema-terminal .bg-90 { background-color: rgb(135, 0, 135); }

.asciinema-terminal .fg-91 { color: rgb(135, 0, 175); }

.asciinema-terminal .bg-91 { background-color: rgb(135, 0, 175); }

.asciinema-terminal .fg-92 { color: rgb(135, 0, 215); }

.asciinema-terminal .bg-92 { background-color: rgb(135, 0, 215); }

.asciinema-terminal .fg-93 { color: rgb(135, 0, 255); }

.asciinema-terminal .bg-93 { background-color: rgb(135, 0, 255); }

.asciinema-terminal .fg-94 { color: rgb(135, 95, 0); }

.asciinema-terminal .bg-94 { background-color: rgb(135, 95, 0); }

.asciinema-terminal .fg-95 { color: rgb(135, 95, 95); }

.asciinema-terminal .bg-95 { background-color: rgb(135, 95, 95); }

.asciinema-terminal .fg-96 { color: rgb(135, 95, 135); }

.asciinema-terminal .bg-96 { background-color: rgb(135, 95, 135); }

.asciinema-terminal .fg-97 { color: rgb(135, 95, 175); }

.asciinema-terminal .bg-97 { background-color: rgb(135, 95, 175); }

.asciinema-terminal .fg-98 { color: rgb(135, 95, 215); }

.asciinema-terminal .bg-98 { background-color: rgb(135, 95, 215); }

.asciinema-terminal .fg-99 { color: rgb(135, 95, 255); }

.asciinema-terminal .bg-99 { background-color: rgb(135, 95, 255); }

.asciinema-terminal .fg-100 { color: rgb(135, 135, 0); }

.asciinema-terminal .bg-100 { background-color: rgb(135, 135, 0); }

.asciinema-terminal .fg-101 { color: rgb(135, 135, 95); }

.asciinema-terminal .bg-101 { background-color: rgb(135, 135, 95); }

.asciinema-terminal .fg-102 { color: rgb(135, 135, 135); }

.asciinema-terminal .bg-102 { background-color: rgb(135, 135, 135); }

.asciinema-terminal .fg-103 { color: rgb(135, 135, 175); }

.asciinema-terminal .bg-103 { background-color: rgb(135, 135, 175); }

.asciinema-terminal .fg-104 { color: rgb(135, 135, 215); }

.asciinema-terminal .bg-104 { background-color: rgb(135, 135, 215); }

.asciinema-terminal .fg-105 { color: rgb(135, 135, 255); }

.asciinema-terminal .bg-105 { background-color: rgb(135, 135, 255); }

.asciinema-terminal .fg-106 { color: rgb(135, 175, 0); }

.asciinema-terminal .bg-106 { background-color: rgb(135, 175, 0); }

.asciinema-terminal .fg-107 { color: rgb(135, 175, 95); }

.asciinema-terminal .bg-107 { background-color: rgb(135, 175, 95); }

.asciinema-terminal .fg-108 { color: rgb(135, 175, 135); }

.asciinema-terminal .bg-108 { background-color: rgb(135, 175, 135); }

.asciinema-terminal .fg-109 { color: rgb(135, 175, 175); }

.asciinema-terminal .bg-109 { background-color: rgb(135, 175, 175); }

.asciinema-terminal .fg-110 { color: rgb(135, 175, 215); }

.asciinema-terminal .bg-110 { background-color: rgb(135, 175, 215); }

.asciinema-terminal .fg-111 { color: rgb(135, 175, 255); }

.asciinema-terminal .bg-111 { background-color: rgb(135, 175, 255); }

.asciinema-terminal .fg-112 { color: rgb(135, 215, 0); }

.asciinema-terminal .bg-112 { background-color: rgb(135, 215, 0); }

.asciinema-terminal .fg-113 { color: rgb(135, 215, 95); }

.asciinema-terminal .bg-113 { background-color: rgb(135, 215, 95); }

.asciinema-terminal .fg-114 { color: rgb(135, 215, 135); }

.asciinema-terminal .bg-114 { background-color: rgb(135, 215, 135); }

.asciinema-terminal .fg-115 { color: rgb(135, 215, 175); }

.asciinema-terminal .bg-115 { background-color: rgb(135, 215, 175); }

.asciinema-terminal .fg-116 { color: rgb(135, 215, 215); }

.asciinema-terminal .bg-116 { background-color: rgb(135, 215, 215); }

.asciinema-terminal .fg-117 { color: rgb(135, 215, 255); }

.asciinema-terminal .bg-117 { background-color: rgb(135, 215, 255); }

.asciinema-terminal .fg-118 { color: rgb(135, 255, 0); }

.asciinema-terminal .bg-118 { background-color: rgb(135, 255, 0); }

.asciinema-terminal .fg-119 { color: rgb(135, 255, 95); }

.asciinema-terminal .bg-119 { background-color: rgb(135, 255, 95); }

.asciinema-terminal .fg-120 { color: rgb(135, 255, 135); }

.asciinema-terminal .bg-120 { background-color: rgb(135, 255, 135); }

.asciinema-terminal .fg-121 { color: rgb(135, 255, 175); }

.asciinema-terminal .bg-121 { background-color: rgb(135, 255, 175); }

.asciinema-terminal .fg-122 { color: rgb(135, 255, 215); }

.asciinema-terminal .bg-122 { background-color: rgb(135, 255, 215); }

.asciinema-terminal .fg-123 { color: rgb(135, 255, 255); }

.asciinema-terminal .bg-123 { background-color: rgb(135, 255, 255); }

.asciinema-terminal .fg-124 { color: rgb(175, 0, 0); }

.asciinema-terminal .bg-124 { background-color: rgb(175, 0, 0); }

.asciinema-terminal .fg-125 { color: rgb(175, 0, 95); }

.asciinema-terminal .bg-125 { background-color: rgb(175, 0, 95); }

.asciinema-terminal .fg-126 { color: rgb(175, 0, 135); }

.asciinema-terminal .bg-126 { background-color: rgb(175, 0, 135); }

.asciinema-terminal .fg-127 { color: rgb(175, 0, 175); }

.asciinema-terminal .bg-127 { background-color: rgb(175, 0, 175); }

.asciinema-terminal .fg-128 { color: rgb(175, 0, 215); }

.asciinema-terminal .bg-128 { background-color: rgb(175, 0, 215); }

.asciinema-terminal .fg-129 { color: rgb(175, 0, 255); }

.asciinema-terminal .bg-129 { background-color: rgb(175, 0, 255); }

.asciinema-terminal .fg-130 { color: rgb(175, 95, 0); }

.asciinema-terminal .bg-130 { background-color: rgb(175, 95, 0); }

.asciinema-terminal .fg-131 { color: rgb(175, 95, 95); }

.asciinema-terminal .bg-131 { background-color: rgb(175, 95, 95); }

.asciinema-terminal .fg-132 { color: rgb(175, 95, 135); }

.asciinema-terminal .bg-132 { background-color: rgb(175, 95, 135); }

.asciinema-terminal .fg-133 { color: rgb(175, 95, 175); }

.asciinema-terminal .bg-133 { background-color: rgb(175, 95, 175); }

.asciinema-terminal .fg-134 { color: rgb(175, 95, 215); }

.asciinema-terminal .bg-134 { background-color: rgb(175, 95, 215); }

.asciinema-terminal .fg-135 { color: rgb(175, 95, 255); }

.asciinema-terminal .bg-135 { background-color: rgb(175, 95, 255); }

.asciinema-terminal .fg-136 { color: rgb(175, 135, 0); }

.asciinema-terminal .bg-136 { background-color: rgb(175, 135, 0); }

.asciinema-terminal .fg-137 { color: rgb(175, 135, 95); }

.asciinema-terminal .bg-137 { background-color: rgb(175, 135, 95); }

.asciinema-terminal .fg-138 { color: rgb(175, 135, 135); }

.asciinema-terminal .bg-138 { background-color: rgb(175, 135, 135); }

.asciinema-terminal .fg-139 { color: rgb(175, 135, 175); }

.asciinema-terminal .bg-139 { background-color: rgb(175, 135, 175); }

.asciinema-terminal .fg-140 { color: rgb(175, 135, 215); }

.asciinema-terminal .bg-140 { background-color: rgb(175, 135, 215); }

.asciinema-terminal .fg-141 { color: rgb(175, 135, 255); }

.asciinema-terminal .bg-141 { background-color: rgb(175, 135, 255); }

.asciinema-terminal .fg-142 { color: rgb(175, 175, 0); }

.asciinema-terminal .bg-142 { background-color: rgb(175, 175, 0); }

.asciinema-terminal .fg-143 { color: rgb(175, 175, 95); }

.asciinema-terminal .bg-143 { background-color: rgb(175, 175, 95); }

.asciinema-terminal .fg-144 { color: rgb(175, 175, 135); }

.asciinema-terminal .bg-144 { background-color: rgb(175, 175, 135); }

.asciinema-terminal .fg-145 { color: rgb(175, 175, 175); }

.asciinema-terminal .bg-145 { background-color: rgb(175, 175, 175); }

.asciinema-terminal .fg-146 { color: rgb(175, 175, 215); }

.asciinema-terminal .bg-146 { background-color: rgb(175, 175, 215); }

.asciinema-terminal .fg-147 { color: rgb(175, 175, 255); }

.asciinema-terminal .bg-147 { background-color: rgb(175, 175, 255); }

.asciinema-terminal .fg-148 { color: rgb(175, 215, 0); }

.asciinema-terminal .bg-148 { background-color: rgb(175, 215, 0); }

.asciinema-terminal .fg-149 { color: rgb(175, 215, 95); }

.asciinema-terminal .bg-149 { background-color: rgb(175, 215, 95); }

.asciinema-terminal .fg-150 { color: rgb(175, 215, 135); }

.asciinema-terminal .bg-150 { background-color: rgb(175, 215, 135); }

.asciinema-terminal .fg-151 { color: rgb(175, 215, 175); }

.asciinema-terminal .bg-151 { background-color: rgb(175, 215, 175); }

.asciinema-terminal .fg-152 { color: rgb(175, 215, 215); }

.asciinema-terminal .bg-152 { background-color: rgb(175, 215, 215); }

.asciinema-terminal .fg-153 { color: rgb(175, 215, 255); }

.asciinema-terminal .bg-153 { background-color: rgb(175, 215, 255); }

.asciinema-terminal .fg-154 { color: rgb(175, 255, 0); }

.asciinema-terminal .bg-154 { background-color: rgb(175, 255, 0); }

.asciinema-terminal .fg-155 { color: rgb(175, 255, 95); }

.asciinema-terminal .bg-155 { background-color: rgb(175, 255, 95); }

.asciinema-terminal .fg-156 { color: rgb(175, 255, 135); }

.asciinema-terminal .bg-156 { background-color: rgb(175, 255, 135); }

.asciinema-terminal .fg-157 { color: rgb(175, 255, 175); }

.asciinema-terminal .bg-157 { background-color: rgb(175, 255, 175); }

.asciinema-terminal .fg-158 { color: rgb(175, 255, 215); }

.asciinema-terminal .bg-158 { background-color: rgb(175, 255, 215); }

.asciinema-terminal .fg-159 { color: rgb(175, 255, 255); }

.asciinema-terminal .bg-159 { background-color: rgb(175, 255, 255); }

.asciinema-terminal .fg-160 { color: rgb(215, 0, 0); }

.asciinema-terminal .bg-160 { background-color: rgb(215, 0, 0); }

.asciinema-terminal .fg-161 { color: rgb(215, 0, 95); }

.asciinema-terminal .bg-161 { background-color: rgb(215, 0, 95); }

.asciinema-terminal .fg-162 { color: rgb(215, 0, 135); }

.asciinema-terminal .bg-162 { background-color: rgb(215, 0, 135); }

.asciinema-terminal .fg-163 { color: rgb(215, 0, 175); }

.asciinema-terminal .bg-163 { background-color: rgb(215, 0, 175); }

.asciinema-terminal .fg-164 { color: rgb(215, 0, 215); }

.asciinema-terminal .bg-164 { background-color: rgb(215, 0, 215); }

.asciinema-terminal .fg-165 { color: rgb(215, 0, 255); }

.asciinema-terminal .bg-165 { background-color: rgb(215, 0, 255); }

.asciinema-terminal .fg-166 { color: rgb(215, 95, 0); }

.asciinema-terminal .bg-166 { background-color: rgb(215, 95, 0); }

.asciinema-terminal .fg-167 { color: rgb(215, 95, 95); }

.asciinema-terminal .bg-167 { background-color: rgb(215, 95, 95); }

.asciinema-terminal .fg-168 { color: rgb(215, 95, 135); }

.asciinema-terminal .bg-168 { background-color: rgb(215, 95, 135); }

.asciinema-terminal .fg-169 { color: rgb(215, 95, 175); }

.asciinema-terminal .bg-169 { background-color: rgb(215, 95, 175); }

.asciinema-terminal .fg-170 { color: rgb(215, 95, 215); }

.asciinema-terminal .bg-170 { background-color: rgb(215, 95, 215); }

.asciinema-terminal .fg-171 { color: rgb(215, 95, 255); }

.asciinema-terminal .bg-171 { background-color: rgb(215, 95, 255); }

.asciinema-terminal .fg-172 { color: rgb(215, 135, 0); }

.asciinema-terminal .bg-172 { background-color: rgb(215, 135, 0); }

.asciinema-terminal .fg-173 { color: rgb(215, 135, 95); }

.asciinema-terminal .bg-173 { background-color: rgb(215, 135, 95); }

.asciinema-terminal .fg-174 { color: rgb(215, 135, 135); }

.asciinema-terminal .bg-174 { background-color: rgb(215, 135, 135); }

.asciinema-terminal .fg-175 { color: rgb(215, 135, 175); }

.asciinema-terminal .bg-175 { background-color: rgb(215, 135, 175); }

.asciinema-terminal .fg-176 { color: rgb(215, 135, 215); }

.asciinema-terminal .bg-176 { background-color: rgb(215, 135, 215); }

.asciinema-terminal .fg-177 { color: rgb(215, 135, 255); }

.asciinema-terminal .bg-177 { background-color: rgb(215, 135, 255); }

.asciinema-terminal .fg-178 { color: rgb(215, 175, 0); }

.asciinema-terminal .bg-178 { background-color: rgb(215, 175, 0); }

.asciinema-terminal .fg-179 { color: rgb(215, 175, 95); }

.asciinema-terminal .bg-179 { background-color: rgb(215, 175, 95); }

.asciinema-terminal .fg-180 { color: rgb(215, 175, 135); }

.asciinema-terminal .bg-180 { background-color: rgb(215, 175, 135); }

.asciinema-terminal .fg-181 { color: rgb(215, 175, 175); }

.asciinema-terminal .bg-181 { background-color: rgb(215, 175, 175); }

.asciinema-terminal .fg-182 { color: rgb(215, 175, 215); }

.asciinema-terminal .bg-182 { background-color: rgb(215, 175, 215); }

.asciinema-terminal .fg-183 { color: rgb(215, 175, 255); }

.asciinema-terminal .bg-183 { background-color: rgb(215, 175, 255); }

.asciinema-terminal .fg-184 { color: rgb(215, 215, 0); }

.asciinema-terminal .bg-184 { background-color: rgb(215, 215, 0); }

.asciinema-terminal .fg-185 { color: rgb(215, 215, 95); }

.asciinema-terminal .bg-185 { background-color: rgb(215, 215, 95); }

.asciinema-terminal .fg-186 { color: rgb(215, 215, 135); }

.asciinema-terminal .bg-186 { background-color: rgb(215, 215, 135); }

.asciinema-terminal .fg-187 { color: rgb(215, 215, 175); }

.asciinema-terminal .bg-187 { background-color: rgb(215, 215, 175); }

.asciinema-terminal .fg-188 { color: rgb(215, 215, 215); }

.asciinema-terminal .bg-188 { background-color: rgb(215, 215, 215); }

.asciinema-terminal .fg-189 { color: rgb(215, 215, 255); }

.asciinema-terminal .bg-189 { background-color: rgb(215, 215, 255); }

.asciinema-terminal .fg-190 { color: rgb(215, 255, 0); }

.asciinema-terminal .bg-190 { background-color: rgb(215, 255, 0); }

.asciinema-terminal .fg-191 { color: rgb(215, 255, 95); }

.asciinema-terminal .bg-191 { background-color: rgb(215, 255, 95); }

.asciinema-terminal .fg-192 { color: rgb(215, 255, 135); }

.asciinema-terminal .bg-192 { background-color: rgb(215, 255, 135); }

.asciinema-terminal .fg-193 { color: rgb(215, 255, 175); }

.asciinema-terminal .bg-193 { background-color: rgb(215, 255, 175); }

.asciinema-terminal .fg-194 { color: rgb(215, 255, 215); }

.asciinema-terminal .bg-194 { background-color: rgb(215, 255, 215); }

.asciinema-terminal .fg-195 { color: rgb(215, 255, 255); }

.asciinema-terminal .bg-195 { background-color: rgb(215, 255, 255); }

.asciinema-terminal .fg-196 { color: rgb(255, 0, 0); }

.asciinema-terminal .bg-196 { background-color: rgb(255, 0, 0); }

.asciinema-terminal .fg-197 { color: rgb(255, 0, 95); }

.asciinema-terminal .bg-197 { background-color: rgb(255, 0, 95); }

.asciinema-terminal .fg-198 { color: rgb(255, 0, 135); }

.asciinema-terminal .bg-198 { background-color: rgb(255, 0, 135); }

.asciinema-terminal .fg-199 { color: rgb(255, 0, 175); }

.asciinema-terminal .bg-199 { background-color: rgb(255, 0, 175); }

.asciinema-terminal .fg-200 { color: rgb(255, 0, 215); }

.asciinema-terminal .bg-200 { background-color: rgb(255, 0, 215); }

.asciinema-terminal .fg-201 { color: rgb(255, 0, 255); }

.asciinema-terminal .bg-201 { background-color: rgb(255, 0, 255); }

.asciinema-terminal .fg-202 { color: rgb(255, 95, 0); }

.asciinema-terminal .bg-202 { background-color: rgb(255, 95, 0); }

.asciinema-terminal .fg-203 { color: rgb(255, 95, 95); }

.asciinema-terminal .bg-203 { background-color: rgb(255, 95, 95); }

.asciinema-terminal .fg-204 { color: rgb(255, 95, 135); }

.asciinema-terminal .bg-204 { background-color: rgb(255, 95, 135); }

.asciinema-terminal .fg-205 { color: rgb(255, 95, 175); }

.asciinema-terminal .bg-205 { background-color: rgb(255, 95, 175); }

.asciinema-terminal .fg-206 { color: rgb(255, 95, 215); }

.asciinema-terminal .bg-206 { background-color: rgb(255, 95, 215); }

.asciinema-terminal .fg-207 { color: rgb(255, 95, 255); }

.asciinema-terminal .bg-207 { background-color: rgb(255, 95, 255); }

.asciinema-terminal .fg-208 { color: rgb(255, 135, 0); }

.asciinema-terminal .bg-208 { background-color: rgb(255, 135, 0); }

.asciinema-terminal .fg-209 { color: rgb(255, 135, 95); }

.asciinema-terminal .bg-209 { background-color: rgb(255, 135, 95); }

.asciinema-terminal .fg-210 { color: rgb(255, 135, 135); }

.asciinema-terminal .bg-210 { background-color: rgb(255, 135, 135); }

.asciinema-terminal .fg-211 { color: rgb(255, 135, 175); }

.asciinema-terminal .bg-211 { background-color: rgb(255, 135, 175); }

.asciinema-terminal .fg-212 { color: rgb(255, 135, 215); }

.asciinema-terminal .bg-212 { background-color: rgb(255, 135, 215); }

.asciinema-terminal .fg-213 { color: rgb(255, 135, 255); }

.asciinema-terminal .bg-213 { background-color: rgb(255, 135, 255); }

.asciinema-terminal .fg-214 { color: rgb(255, 175, 0); }

.asciinema-terminal .bg-214 { background-color: rgb(255, 175, 0); }

.asciinema-terminal .fg-215 { color: rgb(255, 175, 95); }

.asciinema-terminal .bg-215 { background-color: rgb(255, 175, 95); }

.asciinema-terminal .fg-216 { color: rgb(255, 175, 135); }

.asciinema-terminal .bg-216 { background-color: rgb(255, 175, 135); }

.asciinema-terminal .fg-217 { color: rgb(255, 175, 175); }

.asciinema-terminal .bg-217 { background-color: rgb(255, 175, 175); }

.asciinema-terminal .fg-218 { color: rgb(255, 175, 215); }

.asciinema-terminal .bg-218 { background-color: rgb(255, 175, 215); }

.asciinema-terminal .fg-219 { color: rgb(255, 175, 255); }

.asciinema-terminal .bg-219 { background-color: rgb(255, 175, 255); }

.asciinema-terminal .fg-220 { color: rgb(255, 215, 0); }

.asciinema-terminal .bg-220 { background-color: rgb(255, 215, 0); }

.asciinema-terminal .fg-221 { color: rgb(255, 215, 95); }

.asciinema-terminal .bg-221 { background-color: rgb(255, 215, 95); }

.asciinema-terminal .fg-222 { color: rgb(255, 215, 135); }

.asciinema-terminal .bg-222 { background-color: rgb(255, 215, 135); }

.asciinema-terminal .fg-223 { color: rgb(255, 215, 175); }

.asciinema-terminal .bg-223 { background-color: rgb(255, 215, 175); }

.asciinema-terminal .fg-224 { color: rgb(255, 215, 215); }

.asciinema-terminal .bg-224 { background-color: rgb(255, 215, 215); }

.asciinema-terminal .fg-225 { color: rgb(255, 215, 255); }

.asciinema-terminal .bg-225 { background-color: rgb(255, 215, 255); }

.asciinema-terminal .fg-226 { color: rgb(255, 255, 0); }

.asciinema-terminal .bg-226 { background-color: rgb(255, 255, 0); }

.asciinema-terminal .fg-227 { color: rgb(255, 255, 95); }

.asciinema-terminal .bg-227 { background-color: rgb(255, 255, 95); }

.asciinema-terminal .fg-228 { color: rgb(255, 255, 135); }

.asciinema-terminal .bg-228 { background-color: rgb(255, 255, 135); }

.asciinema-terminal .fg-229 { color: rgb(255, 255, 175); }

.asciinema-terminal .bg-229 { background-color: rgb(255, 255, 175); }

.asciinema-terminal .fg-230 { color: rgb(255, 255, 215); }

.asciinema-terminal .bg-230 { background-color: rgb(255, 255, 215); }

.asciinema-terminal .fg-231 { color: rgb(255, 255, 255); }

.asciinema-terminal .bg-231 { background-color: rgb(255, 255, 255); }

.asciinema-terminal .fg-232 { color: rgb(8, 8, 8); }

.asciinema-terminal .bg-232 { background-color: rgb(8, 8, 8); }

.asciinema-terminal .fg-233 { color: rgb(18, 18, 18); }

.asciinema-terminal .bg-233 { background-color: rgb(18, 18, 18); }

.asciinema-terminal .fg-234 { color: rgb(28, 28, 28); }

.asciinema-terminal .bg-234 { background-color: rgb(28, 28, 28); }

.asciinema-terminal .fg-235 { color: rgb(38, 38, 38); }

.asciinema-terminal .bg-235 { background-color: rgb(38, 38, 38); }

.asciinema-terminal .fg-236 { color: rgb(48, 48, 48); }

.asciinema-terminal .bg-236 { background-color: rgb(48, 48, 48); }

.asciinema-terminal .fg-237 { color: rgb(58, 58, 58); }

.asciinema-terminal .bg-237 { background-color: rgb(58, 58, 58); }

.asciinema-terminal .fg-238 { color: rgb(68, 68, 68); }

.asciinema-terminal .bg-238 { background-color: rgb(68, 68, 68); }

.asciinema-terminal .fg-239 { color: rgb(78, 78, 78); }

.asciinema-terminal .bg-239 { background-color: rgb(78, 78, 78); }

.asciinema-terminal .fg-240 { color: rgb(88, 88, 88); }

.asciinema-terminal .bg-240 { background-color: rgb(88, 88, 88); }

.asciinema-terminal .fg-241 { color: rgb(98, 98, 98); }

.asciinema-terminal .bg-241 { background-color: rgb(98, 98, 98); }

.asciinema-terminal .fg-242 { color: rgb(108, 108, 108); }

.asciinema-terminal .bg-242 { background-color: rgb(108, 108, 108); }

.asciinema-terminal .fg-243 { color: rgb(118, 118, 118); }

.asciinema-terminal .bg-243 { background-color: rgb(118, 118, 118); }

.asciinema-terminal .fg-244 { color: rgb(128, 128, 128); }

.asciinema-terminal .bg-244 { background-color: rgb(128, 128, 128); }

.asciinema-terminal .fg-245 { color: rgb(138, 138, 138); }

.asciinema-terminal .bg-245 { background-color: rgb(138, 138, 138); }

.asciinema-terminal .fg-246 { color: rgb(148, 148, 148); }

.asciinema-terminal .bg-246 { background-color: rgb(148, 148, 148); }

.asciinema-terminal .fg-247 { color: rgb(158, 158, 158); }

.asciinema-terminal .bg-247 { background-color: rgb(158, 158, 158); }

.asciinema-terminal .fg-248 { color: rgb(168, 168, 168); }

.asciinema-terminal .bg-248 { background-color: rgb(168, 168, 168); }

.asciinema-terminal .fg-249 { color: rgb(178, 178, 178); }

.asciinema-terminal .bg-249 { background-color: rgb(178, 178, 178); }

.asciinema-terminal .fg-250 { color: rgb(188, 188, 188); }

.asciinema-terminal .bg-250 { background-color: rgb(188, 188, 188); }

.asciinema-terminal .fg-251 { color: rgb(198, 198, 198); }

.asciinema-terminal .bg-251 { background-color: rgb(198, 198, 198); }

.asciinema-terminal .fg-252 { color: rgb(208, 208, 208); }

.asciinema-terminal .bg-252 { background-color: rgb(208, 208, 208); }

.asciinema-terminal .fg-253 { color: rgb(218, 218, 218); }

.asciinema-terminal .bg-253 { background-color: rgb(218, 218, 218); }

.asciinema-terminal .fg-254 { color: rgb(228, 228, 228); }

.asciinema-terminal .bg-254 { background-color: rgb(228, 228, 228); }

.asciinema-terminal .fg-255 { color: rgb(238, 238, 238); }

.asciinema-terminal .bg-255 { background-color: rgb(238, 238, 238); }

.asciinema-theme-asciinema .asciinema-terminal { color: rgb(204, 204, 204);=
 background-color: rgb(18, 19, 20); border-color: rgb(18, 19, 20); }

.asciinema-theme-asciinema .fg-bg { color: rgb(18, 19, 20); }

.asciinema-theme-asciinema .bg-fg { background-color: rgb(204, 204, 204); }

.asciinema-theme-asciinema .fg-0 { color: rgb(0, 0, 0); }

.asciinema-theme-asciinema .bg-0 { background-color: rgb(0, 0, 0); }

.asciinema-theme-asciinema .fg-1 { color: rgb(221, 60, 105); }

.asciinema-theme-asciinema .bg-1 { background-color: rgb(221, 60, 105); }

.asciinema-theme-asciinema .fg-2 { color: rgb(78, 191, 34); }

.asciinema-theme-asciinema .bg-2 { background-color: rgb(78, 191, 34); }

.asciinema-theme-asciinema .fg-3 { color: rgb(221, 175, 60); }

.asciinema-theme-asciinema .bg-3 { background-color: rgb(221, 175, 60); }

.asciinema-theme-asciinema .fg-4 { color: rgb(38, 176, 215); }

.asciinema-theme-asciinema .bg-4 { background-color: rgb(38, 176, 215); }

.asciinema-theme-asciinema .fg-5 { color: rgb(185, 84, 225); }

.asciinema-theme-asciinema .bg-5 { background-color: rgb(185, 84, 225); }

.asciinema-theme-asciinema .fg-6 { color: rgb(84, 225, 185); }

.asciinema-theme-asciinema .bg-6 { background-color: rgb(84, 225, 185); }

.asciinema-theme-asciinema .fg-7 { color: rgb(217, 217, 217); }

.asciinema-theme-asciinema .bg-7 { background-color: rgb(217, 217, 217); }

.asciinema-theme-asciinema .fg-8 { color: rgb(77, 77, 77); }

.asciinema-theme-asciinema .bg-8 { background-color: rgb(77, 77, 77); }

.asciinema-theme-asciinema .fg-9 { color: rgb(221, 60, 105); }

.asciinema-theme-asciinema .bg-9 { background-color: rgb(221, 60, 105); }

.asciinema-theme-asciinema .fg-10 { color: rgb(78, 191, 34); }

.asciinema-theme-asciinema .bg-10 { background-color: rgb(78, 191, 34); }

.asciinema-theme-asciinema .fg-11 { color: rgb(221, 175, 60); }

.asciinema-theme-asciinema .bg-11 { background-color: rgb(221, 175, 60); }

.asciinema-theme-asciinema .fg-12 { color: rgb(38, 176, 215); }

.asciinema-theme-asciinema .bg-12 { background-color: rgb(38, 176, 215); }

.asciinema-theme-asciinema .fg-13 { color: rgb(185, 84, 225); }

.asciinema-theme-asciinema .bg-13 { background-color: rgb(185, 84, 225); }

.asciinema-theme-asciinema .fg-14 { color: rgb(84, 225, 185); }

.asciinema-theme-asciinema .bg-14 { background-color: rgb(84, 225, 185); }

.asciinema-theme-asciinema .fg-15 { color: rgb(255, 255, 255); }

.asciinema-theme-asciinema .bg-15 { background-color: rgb(255, 255, 255); }

.asciinema-theme-asciinema .fg-8, .asciinema-theme-asciinema .fg-9, .asciin=
ema-theme-asciinema .fg-10, .asciinema-theme-asciinema .fg-11, .asciinema-t=
heme-asciinema .fg-12, .asciinema-theme-asciinema .fg-13, .asciinema-theme-=
asciinema .fg-14, .asciinema-theme-asciinema .fg-15 { font-weight: bold; }

.asciinema-theme-tango .asciinema-terminal { color: rgb(204, 204, 204); bac=
kground-color: rgb(18, 19, 20); border-color: rgb(18, 19, 20); }

.asciinema-theme-tango .fg-bg { color: rgb(18, 19, 20); }

.asciinema-theme-tango .bg-fg { background-color: rgb(204, 204, 204); }

.asciinema-theme-tango .fg-0 { color: rgb(0, 0, 0); }

.asciinema-theme-tango .bg-0 { background-color: rgb(0, 0, 0); }

.asciinema-theme-tango .fg-1 { color: rgb(204, 0, 0); }

.asciinema-theme-tango .bg-1 { background-color: rgb(204, 0, 0); }

.asciinema-theme-tango .fg-2 { color: rgb(78, 154, 6); }

.asciinema-theme-tango .bg-2 { background-color: rgb(78, 154, 6); }

.asciinema-theme-tango .fg-3 { color: rgb(196, 160, 0); }

.asciinema-theme-tango .bg-3 { background-color: rgb(196, 160, 0); }

.asciinema-theme-tango .fg-4 { color: rgb(52, 101, 164); }

.asciinema-theme-tango .bg-4 { background-color: rgb(52, 101, 164); }

.asciinema-theme-tango .fg-5 { color: rgb(117, 80, 123); }

.asciinema-theme-tango .bg-5 { background-color: rgb(117, 80, 123); }

.asciinema-theme-tango .fg-6 { color: rgb(6, 152, 154); }

.asciinema-theme-tango .bg-6 { background-color: rgb(6, 152, 154); }

.asciinema-theme-tango .fg-7 { color: rgb(211, 215, 207); }

.asciinema-theme-tango .bg-7 { background-color: rgb(211, 215, 207); }

.asciinema-theme-tango .fg-8 { color: rgb(85, 87, 83); }

.asciinema-theme-tango .bg-8 { background-color: rgb(85, 87, 83); }

.asciinema-theme-tango .fg-9 { color: rgb(239, 41, 41); }

.asciinema-theme-tango .bg-9 { background-color: rgb(239, 41, 41); }

.asciinema-theme-tango .fg-10 { color: rgb(138, 226, 52); }

.asciinema-theme-tango .bg-10 { background-color: rgb(138, 226, 52); }

.asciinema-theme-tango .fg-11 { color: rgb(252, 233, 79); }

.asciinema-theme-tango .bg-11 { background-color: rgb(252, 233, 79); }

.asciinema-theme-tango .fg-12 { color: rgb(114, 159, 207); }

.asciinema-theme-tango .bg-12 { background-color: rgb(114, 159, 207); }

.asciinema-theme-tango .fg-13 { color: rgb(173, 127, 168); }

.asciinema-theme-tango .bg-13 { background-color: rgb(173, 127, 168); }

.asciinema-theme-tango .fg-14 { color: rgb(52, 226, 226); }

.asciinema-theme-tango .bg-14 { background-color: rgb(52, 226, 226); }

.asciinema-theme-tango .fg-15 { color: rgb(238, 238, 236); }

.asciinema-theme-tango .bg-15 { background-color: rgb(238, 238, 236); }

.asciinema-theme-tango .fg-8, .asciinema-theme-tango .fg-9, .asciinema-them=
e-tango .fg-10, .asciinema-theme-tango .fg-11, .asciinema-theme-tango .fg-1=
2, .asciinema-theme-tango .fg-13, .asciinema-theme-tango .fg-14, .asciinema=
-theme-tango .fg-15 { font-weight: bold; }

.asciinema-theme-solarized-dark .asciinema-terminal { color: rgb(131, 148, =
150); background-color: rgb(0, 43, 54); border-color: rgb(0, 43, 54); }

.asciinema-theme-solarized-dark .fg-bg { color: rgb(0, 43, 54); }

.asciinema-theme-solarized-dark .bg-fg { background-color: rgb(131, 148, 15=
0); }

.asciinema-theme-solarized-dark .fg-0 { color: rgb(7, 54, 66); }

.asciinema-theme-solarized-dark .bg-0 { background-color: rgb(7, 54, 66); }

.asciinema-theme-solarized-dark .fg-1 { color: rgb(220, 50, 47); }

.asciinema-theme-solarized-dark .bg-1 { background-color: rgb(220, 50, 47);=
 }

.asciinema-theme-solarized-dark .fg-2 { color: rgb(133, 153, 0); }

.asciinema-theme-solarized-dark .bg-2 { background-color: rgb(133, 153, 0);=
 }

.asciinema-theme-solarized-dark .fg-3 { color: rgb(181, 137, 0); }

.asciinema-theme-solarized-dark .bg-3 { background-color: rgb(181, 137, 0);=
 }

.asciinema-theme-solarized-dark .fg-4 { color: rgb(38, 139, 210); }

.asciinema-theme-solarized-dark .bg-4 { background-color: rgb(38, 139, 210)=
; }

.asciinema-theme-solarized-dark .fg-5 { color: rgb(211, 54, 130); }

.asciinema-theme-solarized-dark .bg-5 { background-color: rgb(211, 54, 130)=
; }

.asciinema-theme-solarized-dark .fg-6 { color: rgb(42, 161, 152); }

.asciinema-theme-solarized-dark .bg-6 { background-color: rgb(42, 161, 152)=
; }

.asciinema-theme-solarized-dark .fg-7 { color: rgb(238, 232, 213); }

.asciinema-theme-solarized-dark .bg-7 { background-color: rgb(238, 232, 213=
); }

.asciinema-theme-solarized-dark .fg-8 { color: rgb(0, 43, 54); }

.asciinema-theme-solarized-dark .bg-8 { background-color: rgb(0, 43, 54); }

.asciinema-theme-solarized-dark .fg-9 { color: rgb(203, 75, 22); }

.asciinema-theme-solarized-dark .bg-9 { background-color: rgb(203, 75, 22);=
 }

.asciinema-theme-solarized-dark .fg-10 { color: rgb(88, 110, 117); }

.asciinema-theme-solarized-dark .bg-10 { background-color: rgb(88, 110, 117=
); }

.asciinema-theme-solarized-dark .fg-11 { color: rgb(101, 123, 131); }

.asciinema-theme-solarized-dark .bg-11 { background-color: rgb(101, 123, 13=
1); }

.asciinema-theme-solarized-dark .fg-12 { color: rgb(131, 148, 150); }

.asciinema-theme-solarized-dark .bg-12 { background-color: rgb(131, 148, 15=
0); }

.asciinema-theme-solarized-dark .fg-13 { color: rgb(108, 113, 196); }

.asciinema-theme-solarized-dark .bg-13 { background-color: rgb(108, 113, 19=
6); }

.asciinema-theme-solarized-dark .fg-14 { color: rgb(147, 161, 161); }

.asciinema-theme-solarized-dark .bg-14 { background-color: rgb(147, 161, 16=
1); }

.asciinema-theme-solarized-dark .fg-15 { color: rgb(253, 246, 227); }

.asciinema-theme-solarized-dark .bg-15 { background-color: rgb(253, 246, 22=
7); }

.asciinema-theme-solarized-light .asciinema-terminal { color: rgb(101, 123,=
 131); background-color: rgb(253, 246, 227); border-color: rgb(253, 246, 22=
7); }

.asciinema-theme-solarized-light .fg-bg { color: rgb(253, 246, 227); }

.asciinema-theme-solarized-light .bg-fg { background-color: rgb(101, 123, 1=
31); }

.asciinema-theme-solarized-light .fg-0 { color: rgb(7, 54, 66); }

.asciinema-theme-solarized-light .bg-0 { background-color: rgb(7, 54, 66); =
}

.asciinema-theme-solarized-light .fg-1 { color: rgb(220, 50, 47); }

.asciinema-theme-solarized-light .bg-1 { background-color: rgb(220, 50, 47)=
; }

.asciinema-theme-solarized-light .fg-2 { color: rgb(133, 153, 0); }

.asciinema-theme-solarized-light .bg-2 { background-color: rgb(133, 153, 0)=
; }

.asciinema-theme-solarized-light .fg-3 { color: rgb(181, 137, 0); }

.asciinema-theme-solarized-light .bg-3 { background-color: rgb(181, 137, 0)=
; }

.asciinema-theme-solarized-light .fg-4 { color: rgb(38, 139, 210); }

.asciinema-theme-solarized-light .bg-4 { background-color: rgb(38, 139, 210=
); }

.asciinema-theme-solarized-light .fg-5 { color: rgb(211, 54, 130); }

.asciinema-theme-solarized-light .bg-5 { background-color: rgb(211, 54, 130=
); }

.asciinema-theme-solarized-light .fg-6 { color: rgb(42, 161, 152); }

.asciinema-theme-solarized-light .bg-6 { background-color: rgb(42, 161, 152=
); }

.asciinema-theme-solarized-light .fg-7 { color: rgb(238, 232, 213); }

.asciinema-theme-solarized-light .bg-7 { background-color: rgb(238, 232, 21=
3); }

.asciinema-theme-solarized-light .fg-8 { color: rgb(0, 43, 54); }

.asciinema-theme-solarized-light .bg-8 { background-color: rgb(0, 43, 54); =
}

.asciinema-theme-solarized-light .fg-9 { color: rgb(203, 75, 22); }

.asciinema-theme-solarized-light .bg-9 { background-color: rgb(203, 75, 22)=
; }

.asciinema-theme-solarized-light .fg-10 { color: rgb(88, 110, 117); }

.asciinema-theme-solarized-light .bg-10 { background-color: rgb(88, 110, 11=
7); }

.asciinema-theme-solarized-light .fg-11 { color: rgb(101, 124, 131); }

.asciinema-theme-solarized-light .bg-11 { background-color: rgb(101, 124, 1=
31); }

.asciinema-theme-solarized-light .fg-12 { color: rgb(131, 148, 150); }

.asciinema-theme-solarized-light .bg-12 { background-color: rgb(131, 148, 1=
50); }

.asciinema-theme-solarized-light .fg-13 { color: rgb(108, 113, 196); }

.asciinema-theme-solarized-light .bg-13 { background-color: rgb(108, 113, 1=
96); }

.asciinema-theme-solarized-light .fg-14 { color: rgb(147, 161, 161); }

.asciinema-theme-solarized-light .bg-14 { background-color: rgb(147, 161, 1=
61); }

.asciinema-theme-solarized-light .fg-15 { color: rgb(253, 246, 227); }

.asciinema-theme-solarized-light .bg-15 { background-color: rgb(253, 246, 2=
27); }

.asciinema-theme-seti .asciinema-terminal { color: rgb(202, 206, 205); back=
ground-color: rgb(17, 18, 19); border-color: rgb(17, 18, 19); }

.asciinema-theme-seti .fg-bg { color: rgb(17, 18, 19); }

.asciinema-theme-seti .bg-fg { background-color: rgb(202, 206, 205); }

.asciinema-theme-seti .fg-0 { color: rgb(50, 50, 50); }

.asciinema-theme-seti .bg-0 { background-color: rgb(50, 50, 50); }

.asciinema-theme-seti .fg-1 { color: rgb(194, 40, 50); }

.asciinema-theme-seti .bg-1 { background-color: rgb(194, 40, 50); }

.asciinema-theme-seti .fg-2 { color: rgb(142, 196, 61); }

.asciinema-theme-seti .bg-2 { background-color: rgb(142, 196, 61); }

.asciinema-theme-seti .fg-3 { color: rgb(224, 198, 79); }

.asciinema-theme-seti .bg-3 { background-color: rgb(224, 198, 79); }

.asciinema-theme-seti .fg-4 { color: rgb(67, 165, 213); }

.asciinema-theme-seti .bg-4 { background-color: rgb(67, 165, 213); }

.asciinema-theme-seti .fg-5 { color: rgb(139, 87, 181); }

.asciinema-theme-seti .bg-5 { background-color: rgb(139, 87, 181); }

.asciinema-theme-seti .fg-6 { color: rgb(142, 196, 61); }

.asciinema-theme-seti .bg-6 { background-color: rgb(142, 196, 61); }

.asciinema-theme-seti .fg-7 { color: rgb(238, 238, 238); }

.asciinema-theme-seti .bg-7 { background-color: rgb(238, 238, 238); }

.asciinema-theme-seti .fg-8 { color: rgb(50, 50, 50); }

.asciinema-theme-seti .bg-8 { background-color: rgb(50, 50, 50); }

.asciinema-theme-seti .fg-9 { color: rgb(194, 40, 50); }

.asciinema-theme-seti .bg-9 { background-color: rgb(194, 40, 50); }

.asciinema-theme-seti .fg-10 { color: rgb(142, 196, 61); }

.asciinema-theme-seti .bg-10 { background-color: rgb(142, 196, 61); }

.asciinema-theme-seti .fg-11 { color: rgb(224, 198, 79); }

.asciinema-theme-seti .bg-11 { background-color: rgb(224, 198, 79); }

.asciinema-theme-seti .fg-12 { color: rgb(67, 165, 213); }

.asciinema-theme-seti .bg-12 { background-color: rgb(67, 165, 213); }

.asciinema-theme-seti .fg-13 { color: rgb(139, 87, 181); }

.asciinema-theme-seti .bg-13 { background-color: rgb(139, 87, 181); }

.asciinema-theme-seti .fg-14 { color: rgb(142, 196, 61); }

.asciinema-theme-seti .bg-14 { background-color: rgb(142, 196, 61); }

.asciinema-theme-seti .fg-15 { color: rgb(255, 255, 255); }

.asciinema-theme-seti .bg-15 { background-color: rgb(255, 255, 255); }

.asciinema-theme-seti .fg-8, .asciinema-theme-seti .fg-9, .asciinema-theme-=
seti .fg-10, .asciinema-theme-seti .fg-11, .asciinema-theme-seti .fg-12, .a=
sciinema-theme-seti .fg-13, .asciinema-theme-seti .fg-14, .asciinema-theme-=
seti .fg-15 { font-weight: bold; }

.asciinema-theme-monokai .asciinema-terminal { color: rgb(248, 248, 242); b=
ackground-color: rgb(39, 40, 34); border-color: rgb(39, 40, 34); }

.asciinema-theme-monokai .fg-bg { color: rgb(39, 40, 34); }

.asciinema-theme-monokai .bg-fg { background-color: rgb(248, 248, 242); }

.asciinema-theme-monokai .fg-0 { color: rgb(39, 40, 34); }

.asciinema-theme-monokai .bg-0 { background-color: rgb(39, 40, 34); }

.asciinema-theme-monokai .fg-1 { color: rgb(249, 38, 114); }

.asciinema-theme-monokai .bg-1 { background-color: rgb(249, 38, 114); }

.asciinema-theme-monokai .fg-2 { color: rgb(166, 226, 46); }

.asciinema-theme-monokai .bg-2 { background-color: rgb(166, 226, 46); }

.asciinema-theme-monokai .fg-3 { color: rgb(244, 191, 117); }

.asciinema-theme-monokai .bg-3 { background-color: rgb(244, 191, 117); }

.asciinema-theme-monokai .fg-4 { color: rgb(102, 217, 239); }

.asciinema-theme-monokai .bg-4 { background-color: rgb(102, 217, 239); }

.asciinema-theme-monokai .fg-5 { color: rgb(174, 129, 255); }

.asciinema-theme-monokai .bg-5 { background-color: rgb(174, 129, 255); }

.asciinema-theme-monokai .fg-6 { color: rgb(161, 239, 228); }

.asciinema-theme-monokai .bg-6 { background-color: rgb(161, 239, 228); }

.asciinema-theme-monokai .fg-7 { color: rgb(248, 248, 242); }

.asciinema-theme-monokai .bg-7 { background-color: rgb(248, 248, 242); }

.asciinema-theme-monokai .fg-8 { color: rgb(117, 113, 94); }

.asciinema-theme-monokai .bg-8 { background-color: rgb(117, 113, 94); }

.asciinema-theme-monokai .fg-9 { color: rgb(249, 38, 114); }

.asciinema-theme-monokai .bg-9 { background-color: rgb(249, 38, 114); }

.asciinema-theme-monokai .fg-10 { color: rgb(166, 226, 46); }

.asciinema-theme-monokai .bg-10 { background-color: rgb(166, 226, 46); }

.asciinema-theme-monokai .fg-11 { color: rgb(244, 191, 117); }

.asciinema-theme-monokai .bg-11 { background-color: rgb(244, 191, 117); }

.asciinema-theme-monokai .fg-12 { color: rgb(102, 217, 239); }

.asciinema-theme-monokai .bg-12 { background-color: rgb(102, 217, 239); }

.asciinema-theme-monokai .fg-13 { color: rgb(174, 129, 255); }

.asciinema-theme-monokai .bg-13 { background-color: rgb(174, 129, 255); }

.asciinema-theme-monokai .fg-14 { color: rgb(161, 239, 228); }

.asciinema-theme-monokai .bg-14 { background-color: rgb(161, 239, 228); }

.asciinema-theme-monokai .fg-15 { color: rgb(249, 248, 245); }

.asciinema-theme-monokai .bg-15 { background-color: rgb(249, 248, 245); }

.asciinema-theme-monokai .fg-8, .asciinema-theme-monokai .fg-9, .asciinema-=
theme-monokai .fg-10, .asciinema-theme-monokai .fg-11, .asciinema-theme-mon=
okai .fg-12, .asciinema-theme-monokai .fg-13, .asciinema-theme-monokai .fg-=
14, .asciinema-theme-monokai .fg-15 { font-weight: bold; }
------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://linux-kernel-labs.github.io/refs/heads/master/_static/theme_overrides.css

@charset "utf-8";

body { font-family: serif; color: black; font-size: 100%; }

h1, h2, .rst-content .toctree-wrapper p.caption, h3, h4, h5, h6, legend { f=
ont-family: sans-serif; }

.wy-menu-vertical li.current a { color: rgb(80, 80, 80); }

.wy-menu-vertical li.on a, .wy-menu-vertical li.current > a { color: rgb(48=
, 48, 48); }

div[class^=3D"highlight"] pre { font-family: monospace; color: black; font-=
size: 100%; }

.wy-menu-vertical { font-family: sans-serif; }

.c { font-style: normal; }

p { font-size: 100%; }

div[class^=3D"highlight"] pre { line-height: normal; }

.rst-content .highlight > pre { line-height: normal; }

.rst-content table.field-list th.field-name { padding-top: 1px; padding-bot=
tom: 1px; }

.rst-content table.field-list td.field-body { padding-top: 1px; padding-bot=
tom: 1px; }

@media screen {
  .wy-nav-content { max-width: none; }
  .wy-table-responsive table td { white-space: normal; }
  .wy-table-responsive { overflow: auto; }
  .rst-content table.docutils caption { text-align: left; font-size: 100%; =
}
  .toc-title { font-size: 150%; font-weight: bold; }
  caption, .wy-table caption, .rst-content table.field-list caption { font-=
size: 100%; }
  caption a.headerlink { opacity: 0; }
  caption a.headerlink:hover { opacity: 1; }
  span.menuselection { color: blue; font-family: "Courier New", Courier, mo=
nospace; }
  code.kbd, code.kbd span { color: white; background-color: darkblue; font-=
weight: bold; font-family: "Courier New", Courier, monospace; }
  .rst-content .section ul li:last-child, .rst-content .section ul li p:las=
t-child { margin-bottom: 12px; }
  code, .rst-content tt, .rst-content code { color: inherit; border: none; =
padding: unset; background: inherit; font-size: 85%; }
  .rst-content tt.literal, .rst-content tt.literal, .rst-content code.liter=
al { color: inherit; }
}

div[class^=3D"highlight"] pre { font-size: 45%; max-height: 500px; overflow=
-y: scroll; }

.rst-content .highlight > pre { max-height: none; }
------MultipartBoundary--tx3e2bMJX70lDvNz6um5aQ4D1mOz3L3XFmRWGaNa8H------
